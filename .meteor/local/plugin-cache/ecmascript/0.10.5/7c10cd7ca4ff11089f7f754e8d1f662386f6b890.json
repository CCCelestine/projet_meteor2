{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$1$2","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$1","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$7","visitor":{"_exploded":{},"_verified":{},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$9","visitor":{"_exploded":{},"_verified":{},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"ast":true,"babelrc":false,"sourceFileName":"collections/Users.js","filename":"collections/Users.js","sourceMapTarget":"collections/Users.js.map","sourceMaps":true,"presets":[],"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\Célestine\\Documents\\ORT\\Dev_Web_Avance\\Projet\\ce","parserOpts":{"sourceType":"module","sourceFileName":"collections/Users.js","plugins":["jsx","jsx","flow","flow","objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties"]},"generatorOpts":{"filename":"collections/Users.js","comments":true,"compact":false,"sourceMaps":true,"sourceMapTarget":"collections/Users.js.map","sourceFileName":"collections/Users.js"}},"code":"let SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nSimpleSchema.extendOptions(['autoform']);\nSimpleSchema.extendOptions(['denyUpdate']); // Schéma du profil\n\nGlobals.schemas.UserProfile = new SimpleSchema({\n  firstName: {\n    type: String,\n    regEx: /^[a-zA-Z-]{2,25}/,\n    optional: true,\n    label: \"Prénom\"\n  },\n  lastName: {\n    type: String,\n    regEx: /^[a-zA-Z-]{2,25}/,\n    optional: true,\n    label: \"Nom\"\n  },\n  birthDay: {\n    type: Date,\n    optional: true,\n    label: \"Date de naissance\"\n  },\n  gender: {\n    type: String,\n    allowedValues: ['M', 'F'],\n    optional: true,\n    label: \"Genre\",\n    autoform: {\n      afFieldInput: {\n        type: \"select2\",\n        // type de champ particulier, voir plus bas\n        options: [{\n          value: \"M\",\n          label: \"Homme\"\n        }, {\n          value: \"F\",\n          label: \"Femme\"\n        }]\n      }\n    }\n  },\n  organization: {\n    type: String,\n    regEx: /^[a-z0-9A-Z .]{3,30}$/,\n    optional: true,\n    label: \"Organisation\"\n  },\n  website: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Url,\n    optional: true,\n    label: \"Site Web\"\n  },\n  bio: {\n    type: String,\n    optional: true,\n    label: \"Biographie\",\n    autoform: {\n      afFieldInput: {\n        type: \"textarea\"\n      }\n    }\n  }\n}); // Schéma principal\n\nGlobals.schemas.User = new SimpleSchema({\n  username: {\n    type: String,\n    regEx: /^[a-z0-9A-Z_]{3,15}$/,\n    label: \"Nom d'utilisateur\"\n  },\n  password: {\n    type: String,\n    label: \"Mot de passe\",\n    optional: true,\n    autoform: {\n      afFieldInput: {\n        type: \"password\"\n      }\n    }\n  },\n  confirmation: {\n    type: String,\n    label: \"Confirmation\",\n    optional: true,\n    custom: function () {\n      if (this.value !== this.field('password').value) {\n        return \"passwordMissmatch\";\n      }\n    },\n    autoform: {\n      afFieldInput: {\n        type: \"password\"\n      }\n    }\n  },\n  emails: {\n    type: Array,\n    optional: false,\n    label: \"Adresses Email\"\n  },\n  \"emails.$\": {\n    type: Object\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    label: \"Adresse\"\n  },\n  \"emails.$.verified\": {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      omit: true\n    }\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      } else {\n        this.unset();\n      }\n    },\n    autoform: {\n      omit: true\n    }\n  },\n  profile: {\n    type: Globals.schemas.UserProfile,\n    optional: true\n  },\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true,\n    autoform: {\n      omit: true\n    }\n  },\n  roles: {\n    type: [String],\n    optional: true,\n    autoform: {\n      omit: true\n    }\n  }\n}); // On attache ce schéma à la collection\n\nMeteor.users.attachSchema(Globals.schemas.User);","map":{"version":3,"sources":["collections/Users.js"],"names":["SimpleSchema","module","watch","require","default","v","extendOptions","Globals","schemas","UserProfile","firstName","type","String","regEx","optional","label","lastName","birthDay","Date","gender","allowedValues","autoform","afFieldInput","options","value","organization","website","RegEx","Url","bio","User","username","password","confirmation","custom","field","emails","Array","Object","Email","Boolean","omit","createdAt","autoValue","isInsert","unset","profile","services","blackbox","roles","Meteor","users","attachSchema"],"mappings":"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","file":"collections/Users.js.map","sourcesContent":["import SimpleSchema from 'simpl-schema';\r\nSimpleSchema.extendOptions(['autoform']);\r\nSimpleSchema.extendOptions(['denyUpdate']);\r\n\r\n// Schéma du profil\r\nGlobals.schemas.UserProfile = new SimpleSchema({\r\n    firstName: {\r\n        type: String,\r\n        regEx: /^[a-zA-Z-]{2,25}/,\r\n        optional: true,\r\n        label: \"Prénom\"\r\n    },\r\n    lastName: {\r\n        type: String,\r\n        regEx: /^[a-zA-Z-]{2,25}/,\r\n        optional: true,\r\n        label: \"Nom\"\r\n    },\r\n    birthDay: {\r\n        type: Date,\r\n        optional: true,\r\n        label: \"Date de naissance\"\r\n    },\r\n    gender: {\r\n        type: String,\r\n        allowedValues: ['M', 'F'],\r\n        optional: true,\r\n        label: \"Genre\",\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"select2\", // type de champ particulier, voir plus bas\r\n                options: [\r\n                    {\r\n                        value: \"M\",\r\n                        label: \"Homme\"\r\n                    },\r\n                    {\r\n                        value: \"F\",\r\n                        label: \"Femme\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    organization: {\r\n        type: String,\r\n        regEx: /^[a-z0-9A-Z .]{3,30}$/,\r\n        optional: true,\r\n        label: \"Organisation\"\r\n    },\r\n    website: {\r\n        type: String,\r\n        regEx: SimpleSchema.RegEx.Url,\r\n        optional: true,\r\n        label: \"Site Web\"\r\n    },\r\n    bio: {\r\n        type: String,\r\n        optional: true,\r\n        label: \"Biographie\",\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"textarea\"\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n// Schéma principal\r\nGlobals.schemas.User = new SimpleSchema({\r\n    username: {\r\n        type: String,\r\n        regEx: /^[a-z0-9A-Z_]{3,15}$/,\r\n        label: \"Nom d'utilisateur\"\r\n    },\r\n    password: {\r\n        type: String,\r\n        label: \"Mot de passe\",\r\n        optional: true,\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"password\"\r\n            }\r\n        }\r\n    },\r\n    confirmation: {\r\n        type: String,\r\n        label: \"Confirmation\",\r\n        optional: true,\r\n        custom: function(){\r\n            if(this.value !== this.field('password').value){\r\n                return \"passwordMissmatch\";\r\n            }\r\n        },\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"password\"\r\n            }\r\n        }\r\n    },\r\n    emails: {\r\n        type: Array,\r\n        optional: false,\r\n        label: \"Adresses Email\"\r\n    },\r\n    \"emails.$\" :{\r\n        type: Object\r\n    },\r\n    \"emails.$.address\": {\r\n        type: String,\r\n        regEx: SimpleSchema.RegEx.Email,\r\n        label: \"Adresse\"\r\n    },\r\n    \"emails.$.verified\": {\r\n        type: Boolean,\r\n        optional: true,\r\n        autoform: {\r\n            omit: true\r\n        }\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        autoValue: function () {\r\n            if (this.isInsert) {\r\n                return new Date;\r\n            } else {\r\n                this.unset();\r\n            }\r\n        },\r\n        autoform: {\r\n            omit: true\r\n        }\r\n    },\r\n    profile: {\r\n        type: Globals.schemas.UserProfile,\r\n        optional: true,\r\n\r\n    },\r\n    services: {\r\n        type: Object,\r\n        optional: true,\r\n        blackbox: true,\r\n        autoform:{\r\n            omit: true\r\n        }\r\n    },\r\n    roles: {\r\n        type: [String],\r\n        optional: true,\r\n        autoform: {\r\n            omit: true\r\n        }\r\n    }\r\n});\r\n\r\n// On attache ce schéma à la collection\r\nMeteor.users.attachSchema(Globals.schemas.User);"]},"hash":"7c10cd7ca4ff11089f7f754e8d1f662386f6b890"}
