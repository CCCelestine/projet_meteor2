[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Template = Package['templating-runtime'].Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar AutoForm = Package['aldeed:autoform'].AutoForm;\nvar HTML = Package.htmljs.HTML;\nvar Spacebars = Package.spacebars.Spacebars;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/aldeed_autoform-select2/template.autoform-select2.js                   //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\n\nTemplate.__checkName(\"afSelect2\");\nTemplate[\"afSelect2\"] = new Template(\"Template.afSelect2\", (function() {\n  var view = this;\n  return HTML.SELECT(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"atts\"));\n  }), \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n  }, function() {\n    return [ \"\\n      \", Blaze.If(function() {\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n    }, function() {\n      return [ \"\\n        \", HTML.OPTGROUP({\n        label: function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));\n        }\n      }, \"\\n        \", Blaze.Each(function() {\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));\n      }, function() {\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {\n          return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n        }), Blaze.View(\"lookup:..label\", function() {\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n        })), \"\\n        \" ];\n      }), \"\\n        \"), \"\\n      \" ];\n    }, function() {\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {\n        return Spacebars.attrMustache(view.lookup(\"afSelectOptionAtts\"));\n      }), Blaze.View(\"lookup:..label\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));\n      })), \"\\n      \" ];\n    }), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////\n//                                                                                 //\n// packages/aldeed_autoform-select2/autoform-select2.js                            //\n//                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////\n                                                                                   //\n/* global AutoForm, _, $, Template */\n\nAutoForm.addInputType('select2', {\n  template: 'afSelect2',\n  valueConverters: {\n    stringArray: function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          return $.trim(item);\n        });\n      }\n      return val;\n    },\n    number: AutoForm.Utility.stringToNumber,\n    numberArray: function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToNumber(item);\n        });\n      }\n      return val;\n    },\n    boolean: AutoForm.Utility.stringToBool,\n    booleanArray: function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToBool(item);\n        });\n      }\n      return val;\n    },\n    date: AutoForm.Utility.stringToDate,\n    dateArray: function (val) {\n      if (_.isArray(val)) {\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.Utility.stringToDate(item);\n        });\n      }\n      return val;\n    }\n  },\n  contextAdjust: function (context) {\n    var itemAtts = _.omit(context.atts, 'firstOption');\n\n    // NOTE: We don't add firstOption to select2 input because\n    // it doesn't make sense with the way select2 works.\n\n    // build items list\n    context.items = [];\n\n    // When single-select and placeholder is passed,\n    // the first option should be an empty option.\n    var multiple = itemAtts.multiple;\n    var select2Options = itemAtts.select2Options || {};\n\n    if (!multiple && select2Options.placeholder) {\n      context.items.push('');\n    }\n\n    // Check if option is selected\n    var isSelected = function(conVal, optVal) {\n      return _.isArray(conVal) ? _.contains(conVal, optVal) : optVal === conVal;\n    };\n\n    // Add all defined options\n    _.each(context.selectOptions, function(opt) {\n      if (opt.optgroup) {\n        var subItems = _.map(opt.options, function(subOpt) {\n          return {\n            name: context.name,\n            label: subOpt.label,\n            value: subOpt.value,\n            // _id must be included because it is a special property that\n            // #each uses to track unique list items when adding and removing them\n            // See https://github.com/meteor/meteor/issues/2174\n            _id: subOpt.value,\n            selected: isSelected(context.value, subOpt.value),\n            atts: itemAtts\n          };\n        });\n        context.items.push({\n          optgroup: opt.optgroup,\n          items: subItems\n        });\n      } else {\n        context.items.push({\n          name: context.name,\n          label: opt.label,\n          value: opt.value,\n          // _id must be included because it is a special property that\n          // #each uses to track unique list items when adding and removing them\n          // See https://github.com/meteor/meteor/issues/2174\n          _id: opt.value,\n          selected: isSelected(context.value, opt.value),\n          atts: itemAtts\n        });\n      }\n    });\n\n    return context;\n  }\n});\n\nTemplate.afSelect2.helpers({\n  atts: function addFormControlAtts() {\n    return _.omit(this.atts, 'select2Options');\n  }\n});\n\nTemplate.afSelect2.events({\n  'select2:select select': function (event, template) {\n    // When select2 selection changes, we update the `selected` attr\n    // on the real select element. This persists better when the DOM\n    // changes, allowing us to retain selection properly by using this\n    // in the template autorun.\n    // Fixes #18\n    var val = template.$('select').val();\n    if (!_.isArray(val)) { val = [val]; }\n    template.$('select option').each(function () {\n      var $this = $(this);\n      var selected = val.indexOf($this.attr('value')) !== -1;\n      $this.prop('selected', selected).attr('selected', selected);\n    });\n  }\n});\n\nTemplate.afSelect2.onRendered(function () {\n  var template = this;\n  var $s = template.$('select');\n\n  // instanciate select2\n  $s.select2(template.data.atts.select2Options || {});\n\n  template.autorun(function () {\n    var data = Template.currentData();\n\n    var values = [];\n    _.each(data.items, function (item) {\n      if (_.has(item, 'items')) {\n        _.each(item.items, function (subItem) {\n          if (subItem.selected) {\n            values.push(subItem.value);\n          }\n        });\n      } else {\n        if (item.selected) {\n          values.push(item.value);\n        }\n      }\n    });\n\n    var $selects;\n    if (values.length === 0) {\n      $selects = template.$('select option');\n    } else {\n      // Include any that were previously added as new tags\n      $selects = template.$('select option[data-select2-tag]');\n    }\n\n    $selects.each(function () {\n      var $this = $(this);\n      if ($this.attr('selected')) {\n        values.push($this.attr('value'));\n      }\n    });\n\n    var currentValues = $s.val();\n    if ((!currentValues && values.length > 0) ||\n        (currentValues && currentValues.toString() !== values.toString())) {\n      // select2 requires that we trigger change event\n      // for it to realize it needs to update the select2 list.\n      // We do it only if values have actually changed,\n      // which should help prevent autosave infinite looping.\n      $s.val(values).trigger('change');\n    }\n  });\n});\n\nTemplate.afSelect2.onDestroyed(function () {\n  try {\n    if (this.view && this.view._domrange && this.$('select').data('select2')) {\n      this.$('select').select2('destroy');\n    }\n  } catch (error) {}\n});\n\n/*\n *  BOOTSTRAP THEME\n */\n\nTemplate.afSelect2.copyAs('afSelect2_bootstrap3');\n\n// The only difference is that we need to add \"form-control\" class\nTemplate.afSelect2_bootstrap3.helpers({\n  atts: function addFormControlAtts() {\n    var atts = _.omit(this.atts, 'select2Options');\n    // Add bootstrap class\n    atts = AutoForm.Utility.addClass(atts, 'form-control');\n    return atts;\n  }\n});\n\n/////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"aldeed:autoform-select2\");\n\n})();\n","servePath":"/packages/aldeed_autoform-select2.js"}]