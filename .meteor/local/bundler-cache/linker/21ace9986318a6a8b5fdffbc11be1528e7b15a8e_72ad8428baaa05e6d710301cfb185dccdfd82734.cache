[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/natestrauser_select2/packages/natestrauser_select2.js    //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/natestrauser:select2/lib/select2/select2.js                                                                //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\nCopyright 2012 Igor Vaynberg                                                                                           // 2\n                                                                                                                       // 3\nVersion: 3.5.1 Timestamp: Tue Jul 22 18:58:56 EDT 2014                                                                 // 4\n                                                                                                                       // 5\nThis software is licensed under the Apache License, Version 2.0 (the \"Apache License\") or the GNU                      // 6\nGeneral Public License version 2 (the \"GPL License\"). You may choose either license to govern your                     // 7\nuse of this software only upon the condition that you accept all of the terms of either the Apache                     // 8\nLicense or the GPL License.                                                                                            // 9\n                                                                                                                       // 10\nYou may obtain a copy of the Apache License and the GPL License at:                                                    // 11\n                                                                                                                       // 12\n    http://www.apache.org/licenses/LICENSE-2.0                                                                         // 13\n    http://www.gnu.org/licenses/gpl-2.0.html                                                                           // 14\n                                                                                                                       // 15\nUnless required by applicable law or agreed to in writing, software distributed under the                              // 16\nApache License or the GPL License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR                            // 17\nCONDITIONS OF ANY KIND, either express or implied. See the Apache License and the GPL License for                      // 18\nthe specific language governing permissions and limitations under the Apache License and the GPL License.              // 19\n*/                                                                                                                     // 20\n(function ($) {                                                                                                        // 21\n    if(typeof $.fn.each2 == \"undefined\") {                                                                             // 22\n        $.extend($.fn, {                                                                                               // 23\n            /*                                                                                                         // 24\n            * 4-10 times faster .each replacement                                                                      // 25\n            * use it carefully, as it overrides jQuery context of element on each iteration                            // 26\n            */                                                                                                         // 27\n            each2 : function (c) {                                                                                     // 28\n                var j = $([0]), i = -1, l = this.length;                                                               // 29\n                while (                                                                                                // 30\n                    ++i < l                                                                                            // 31\n                    && (j.context = j[0] = this[i])                                                                    // 32\n                    && c.call(j[0], i, j) !== false //\"this\"=DOM, i=index, j=jQuery object                             // 33\n                );                                                                                                     // 34\n                return this;                                                                                           // 35\n            }                                                                                                          // 36\n        });                                                                                                            // 37\n    }                                                                                                                  // 38\n})(jQuery);                                                                                                            // 39\n                                                                                                                       // 40\n(function ($, undefined) {                                                                                             // 41\n    \"use strict\";                                                                                                      // 42\n    /*global document, window, jQuery, console */                                                                      // 43\n                                                                                                                       // 44\n    if (window.Select2 !== undefined) {                                                                                // 45\n        return;                                                                                                        // 46\n    }                                                                                                                  // 47\n                                                                                                                       // 48\n    var KEY, AbstractSelect2, SingleSelect2, MultiSelect2, nextUid, sizer,                                             // 49\n        lastMousePosition={x:0,y:0}, $document, scrollBarDimensions,                                                   // 50\n                                                                                                                       // 51\n    KEY = {                                                                                                            // 52\n        TAB: 9,                                                                                                        // 53\n        ENTER: 13,                                                                                                     // 54\n        ESC: 27,                                                                                                       // 55\n        SPACE: 32,                                                                                                     // 56\n        LEFT: 37,                                                                                                      // 57\n        UP: 38,                                                                                                        // 58\n        RIGHT: 39,                                                                                                     // 59\n        DOWN: 40,                                                                                                      // 60\n        SHIFT: 16,                                                                                                     // 61\n        CTRL: 17,                                                                                                      // 62\n        ALT: 18,                                                                                                       // 63\n        PAGE_UP: 33,                                                                                                   // 64\n        PAGE_DOWN: 34,                                                                                                 // 65\n        HOME: 36,                                                                                                      // 66\n        END: 35,                                                                                                       // 67\n        BACKSPACE: 8,                                                                                                  // 68\n        DELETE: 46,                                                                                                    // 69\n        isArrow: function (k) {                                                                                        // 70\n            k = k.which ? k.which : k;                                                                                 // 71\n            switch (k) {                                                                                               // 72\n            case KEY.LEFT:                                                                                             // 73\n            case KEY.RIGHT:                                                                                            // 74\n            case KEY.UP:                                                                                               // 75\n            case KEY.DOWN:                                                                                             // 76\n                return true;                                                                                           // 77\n            }                                                                                                          // 78\n            return false;                                                                                              // 79\n        },                                                                                                             // 80\n        isControl: function (e) {                                                                                      // 81\n            var k = e.which;                                                                                           // 82\n            switch (k) {                                                                                               // 83\n            case KEY.SHIFT:                                                                                            // 84\n            case KEY.CTRL:                                                                                             // 85\n            case KEY.ALT:                                                                                              // 86\n                return true;                                                                                           // 87\n            }                                                                                                          // 88\n                                                                                                                       // 89\n            if (e.metaKey) return true;                                                                                // 90\n                                                                                                                       // 91\n            return false;                                                                                              // 92\n        },                                                                                                             // 93\n        isFunctionKey: function (k) {                                                                                  // 94\n            k = k.which ? k.which : k;                                                                                 // 95\n            return k >= 112 && k <= 123;                                                                               // 96\n        }                                                                                                              // 97\n    },                                                                                                                 // 98\n    MEASURE_SCROLLBAR_TEMPLATE = \"<div class='select2-measure-scrollbar'></div>\",                                      // 99\n                                                                                                                       // 100\n    // removed diacritics support to enable spiderable - see https://github.com/gadicc/meteor-phantomjs/issues/1       // 101\n    // DIACRITICS = {\"\\u24B6\":\"A\",\"\\uFF21\":\"A\",\"\\u00C0\":\"A\",\"\\u00C1\":\"A\",\"\\u00C2\":\"A\",\"\\u1EA6\":\"A\",\"\\u1EA4\":\"A\",\"\\u1EAA\":\"A\",\"\\u1EA8\":\"A\",\"\\u00C3\":\"A\",\"\\u0100\":\"A\",\"\\u0102\":\"A\",\"\\u1EB0\":\"A\",\"\\u1EAE\":\"A\",\"\\u1EB4\":\"A\",\"\\u1EB2\":\"A\",\"\\u0226\":\"A\",\"\\u01E0\":\"A\",\"\\u00C4\":\"A\",\"\\u01DE\":\"A\",\"\\u1EA2\":\"A\",\"\\u00C5\":\"A\",\"\\u01FA\":\"A\",\"\\u01CD\":\"A\",\"\\u0200\":\"A\",\"\\u0202\":\"A\",\"\\u1EA0\":\"A\",\"\\u1EAC\":\"A\",\"\\u1EB6\":\"A\",\"\\u1E00\":\"A\",\"\\u0104\":\"A\",\"\\u023A\":\"A\",\"\\u2C6F\":\"A\",\"\\uA732\":\"AA\",\"\\u00C6\":\"AE\",\"\\u01FC\":\"AE\",\"\\u01E2\":\"AE\",\"\\uA734\":\"AO\",\"\\uA736\":\"AU\",\"\\uA738\":\"AV\",\"\\uA73A\":\"AV\",\"\\uA73C\":\"AY\",\"\\u24B7\":\"B\",\"\\uFF22\":\"B\",\"\\u1E02\":\"B\",\"\\u1E04\":\"B\",\"\\u1E06\":\"B\",\"\\u0243\":\"B\",\"\\u0182\":\"B\",\"\\u0181\":\"B\",\"\\u24B8\":\"C\",\"\\uFF23\":\"C\",\"\\u0106\":\"C\",\"\\u0108\":\"C\",\"\\u010A\":\"C\",\"\\u010C\":\"C\",\"\\u00C7\":\"C\",\"\\u1E08\":\"C\",\"\\u0187\":\"C\",\"\\u023B\":\"C\",\"\\uA73E\":\"C\",\"\\u24B9\":\"D\",\"\\uFF24\":\"D\",\"\\u1E0A\":\"D\",\"\\u010E\":\"D\",\"\\u1E0C\":\"D\",\"\\u1E10\":\"D\",\"\\u1E12\":\"D\",\"\\u1E0E\":\"D\",\"\\u0110\":\"D\",\"\\u018B\":\"D\",\"\\u018A\":\"D\",\"\\u0189\":\"D\",\"\\uA779\":\"D\",\"\\u01F1\":\"DZ\",\"\\u01C4\":\"DZ\",\"\\u01F2\":\"Dz\",\"\\u01C5\":\"Dz\",\"\\u24BA\":\"E\",\"\\uFF25\":\"E\",\"\\u00C8\":\"E\",\"\\u00C9\":\"E\",\"\\u00CA\":\"E\",\"\\u1EC0\":\"E\",\"\\u1EBE\":\"E\",\"\\u1EC4\":\"E\",\"\\u1EC2\":\"E\",\"\\u1EBC\":\"E\",\"\\u0112\":\"E\",\"\\u1E14\":\"E\",\"\\u1E16\":\"E\",\"\\u0114\":\"E\",\"\\u0116\":\"E\",\"\\u00CB\":\"E\",\"\\u1EBA\":\"E\",\"\\u011A\":\"E\",\"\\u0204\":\"E\",\"\\u0206\":\"E\",\"\\u1EB8\":\"E\",\"\\u1EC6\":\"E\",\"\\u0228\":\"E\",\"\\u1E1C\":\"E\",\"\\u0118\":\"E\",\"\\u1E18\":\"E\",\"\\u1E1A\":\"E\",\"\\u0190\":\"E\",\"\\u018E\":\"E\",\"\\u24BB\":\"F\",\"\\uFF26\":\"F\",\"\\u1E1E\":\"F\",\"\\u0191\":\"F\",\"\\uA77B\":\"F\",\"\\u24BC\":\"G\",\"\\uFF27\":\"G\",\"\\u01F4\":\"G\",\"\\u011C\":\"G\",\"\\u1E20\":\"G\",\"\\u011E\":\"G\",\"\\u0120\":\"G\",\"\\u01E6\":\"G\",\"\\u0122\":\"G\",\"\\u01E4\":\"G\",\"\\u0193\":\"G\",\"\\uA7A0\":\"G\",\"\\uA77D\":\"G\",\"\\uA77E\":\"G\",\"\\u24BD\":\"H\",\"\\uFF28\":\"H\",\"\\u0124\":\"H\",\"\\u1E22\":\"H\",\"\\u1E26\":\"H\",\"\\u021E\":\"H\",\"\\u1E24\":\"H\",\"\\u1E28\":\"H\",\"\\u1E2A\":\"H\",\"\\u0126\":\"H\",\"\\u2C67\":\"H\",\"\\u2C75\":\"H\",\"\\uA78D\":\"H\",\"\\u24BE\":\"I\",\"\\uFF29\":\"I\",\"\\u00CC\":\"I\",\"\\u00CD\":\"I\",\"\\u00CE\":\"I\",\"\\u0128\":\"I\",\"\\u012A\":\"I\",\"\\u012C\":\"I\",\"\\u0130\":\"I\",\"\\u00CF\":\"I\",\"\\u1E2E\":\"I\",\"\\u1EC8\":\"I\",\"\\u01CF\":\"I\",\"\\u0208\":\"I\",\"\\u020A\":\"I\",\"\\u1ECA\":\"I\",\"\\u012E\":\"I\",\"\\u1E2C\":\"I\",\"\\u0197\":\"I\",\"\\u24BF\":\"J\",\"\\uFF2A\":\"J\",\"\\u0134\":\"J\",\"\\u0248\":\"J\",\"\\u24C0\":\"K\",\"\\uFF2B\":\"K\",\"\\u1E30\":\"K\",\"\\u01E8\":\"K\",\"\\u1E32\":\"K\",\"\\u0136\":\"K\",\"\\u1E34\":\"K\",\"\\u0198\":\"K\",\"\\u2C69\":\"K\",\"\\uA740\":\"K\",\"\\uA742\":\"K\",\"\\uA744\":\"K\",\"\\uA7A2\":\"K\",\"\\u24C1\":\"L\",\"\\uFF2C\":\"L\",\"\\u013F\":\"L\",\"\\u0139\":\"L\",\"\\u013D\":\"L\",\"\\u1E36\":\"L\",\"\\u1E38\":\"L\",\"\\u013B\":\"L\",\"\\u1E3C\":\"L\",\"\\u1E3A\":\"L\",\"\\u0141\":\"L\",\"\\u023D\":\"L\",\"\\u2C62\":\"L\",\"\\u2C60\":\"L\",\"\\uA748\":\"L\",\"\\uA746\":\"L\",\"\\uA780\":\"L\",\"\\u01C7\":\"LJ\",\"\\u01C8\":\"Lj\",\"\\u24C2\":\"M\",\"\\uFF2D\":\"M\",\"\\u1E3E\":\"M\",\"\\u1E40\":\"M\",\"\\u1E42\":\"M\",\"\\u2C6E\":\"M\",\"\\u019C\":\"M\",\"\\u24C3\":\"N\",\"\\uFF2E\":\"N\",\"\\u01F8\":\"N\",\"\\u0143\":\"N\",\"\\u00D1\":\"N\",\"\\u1E44\":\"N\",\"\\u0147\":\"N\",\"\\u1E46\":\"N\",\"\\u0145\":\"N\",\"\\u1E4A\":\"N\",\"\\u1E48\":\"N\",\"\\u0220\":\"N\",\"\\u019D\":\"N\",\"\\uA790\":\"N\",\"\\uA7A4\":\"N\",\"\\u01CA\":\"NJ\",\"\\u01CB\":\"Nj\",\"\\u24C4\":\"O\",\"\\uFF2F\":\"O\",\"\\u00D2\":\"O\",\"\\u00D3\":\"O\",\"\\u00D4\":\"O\",\"\\u1ED2\":\"O\",\"\\u1ED0\":\"O\",\"\\u1ED6\":\"O\",\"\\u1ED4\":\"O\",\"\\u00D5\":\"O\",\"\\u1E4C\":\"O\",\"\\u022C\":\"O\",\"\\u1E4E\":\"O\",\"\\u014C\":\"O\",\"\\u1E50\":\"O\",\"\\u1E52\":\"O\",\"\\u014E\":\"O\",\"\\u022E\":\"O\",\"\\u0230\":\"O\",\"\\u00D6\":\"O\",\"\\u022A\":\"O\",\"\\u1ECE\":\"O\",\"\\u0150\":\"O\",\"\\u01D1\":\"O\",\"\\u020C\":\"O\",\"\\u020E\":\"O\",\"\\u01A0\":\"O\",\"\\u1EDC\":\"O\",\"\\u1EDA\":\"O\",\"\\u1EE0\":\"O\",\"\\u1EDE\":\"O\",\"\\u1EE2\":\"O\",\"\\u1ECC\":\"O\",\"\\u1ED8\":\"O\",\"\\u01EA\":\"O\",\"\\u01EC\":\"O\",\"\\u00D8\":\"O\",\"\\u01FE\":\"O\",\"\\u0186\":\"O\",\"\\u019F\":\"O\",\"\\uA74A\":\"O\",\"\\uA74C\":\"O\",\"\\u01A2\":\"OI\",\"\\uA74E\":\"OO\",\"\\u0222\":\"OU\",\"\\u24C5\":\"P\",\"\\uFF30\":\"P\",\"\\u1E54\":\"P\",\"\\u1E56\":\"P\",\"\\u01A4\":\"P\",\"\\u2C63\":\"P\",\"\\uA750\":\"P\",\"\\uA752\":\"P\",\"\\uA754\":\"P\",\"\\u24C6\":\"Q\",\"\\uFF31\":\"Q\",\"\\uA756\":\"Q\",\"\\uA758\":\"Q\",\"\\u024A\":\"Q\",\"\\u24C7\":\"R\",\"\\uFF32\":\"R\",\"\\u0154\":\"R\",\"\\u1E58\":\"R\",\"\\u0158\":\"R\",\"\\u0210\":\"R\",\"\\u0212\":\"R\",\"\\u1E5A\":\"R\",\"\\u1E5C\":\"R\",\"\\u0156\":\"R\",\"\\u1E5E\":\"R\",\"\\u024C\":\"R\",\"\\u2C64\":\"R\",\"\\uA75A\":\"R\",\"\\uA7A6\":\"R\",\"\\uA782\":\"R\",\"\\u24C8\":\"S\",\"\\uFF33\":\"S\",\"\\u1E9E\":\"S\",\"\\u015A\":\"S\",\"\\u1E64\":\"S\",\"\\u015C\":\"S\",\"\\u1E60\":\"S\",\"\\u0160\":\"S\",\"\\u1E66\":\"S\",\"\\u1E62\":\"S\",\"\\u1E68\":\"S\",\"\\u0218\":\"S\",\"\\u015E\":\"S\",\"\\u2C7E\":\"S\",\"\\uA7A8\":\"S\",\"\\uA784\":\"S\",\"\\u24C9\":\"T\",\"\\uFF34\":\"T\",\"\\u1E6A\":\"T\",\"\\u0164\":\"T\",\"\\u1E6C\":\"T\",\"\\u021A\":\"T\",\"\\u0162\":\"T\",\"\\u1E70\":\"T\",\"\\u1E6E\":\"T\",\"\\u0166\":\"T\",\"\\u01AC\":\"T\",\"\\u01AE\":\"T\",\"\\u023E\":\"T\",\"\\uA786\":\"T\",\"\\uA728\":\"TZ\",\"\\u24CA\":\"U\",\"\\uFF35\":\"U\",\"\\u00D9\":\"U\",\"\\u00DA\":\"U\",\"\\u00DB\":\"U\",\"\\u0168\":\"U\",\"\\u1E78\":\"U\",\"\\u016A\":\"U\",\"\\u1E7A\":\"U\",\"\\u016C\":\"U\",\"\\u00DC\":\"U\",\"\\u01DB\":\"U\",\"\\u01D7\":\"U\",\"\\u01D5\":\"U\",\"\\u01D9\":\"U\",\"\\u1EE6\":\"U\",\"\\u016E\":\"U\",\"\\u0170\":\"U\",\"\\u01D3\":\"U\",\"\\u0214\":\"U\",\"\\u0216\":\"U\",\"\\u01AF\":\"U\",\"\\u1EEA\":\"U\",\"\\u1EE8\":\"U\",\"\\u1EEE\":\"U\",\"\\u1EEC\":\"U\",\"\\u1EF0\":\"U\",\"\\u1EE4\":\"U\",\"\\u1E72\":\"U\",\"\\u0172\":\"U\",\"\\u1E76\":\"U\",\"\\u1E74\":\"U\",\"\\u0244\":\"U\",\"\\u24CB\":\"V\",\"\\uFF36\":\"V\",\"\\u1E7C\":\"V\",\"\\u1E7E\":\"V\",\"\\u01B2\":\"V\",\"\\uA75E\":\"V\",\"\\u0245\":\"V\",\"\\uA760\":\"VY\",\"\\u24CC\":\"W\",\"\\uFF37\":\"W\",\"\\u1E80\":\"W\",\"\\u1E82\":\"W\",\"\\u0174\":\"W\",\"\\u1E86\":\"W\",\"\\u1E84\":\"W\",\"\\u1E88\":\"W\",\"\\u2C72\":\"W\",\"\\u24CD\":\"X\",\"\\uFF38\":\"X\",\"\\u1E8A\":\"X\",\"\\u1E8C\":\"X\",\"\\u24CE\":\"Y\",\"\\uFF39\":\"Y\",\"\\u1EF2\":\"Y\",\"\\u00DD\":\"Y\",\"\\u0176\":\"Y\",\"\\u1EF8\":\"Y\",\"\\u0232\":\"Y\",\"\\u1E8E\":\"Y\",\"\\u0178\":\"Y\",\"\\u1EF6\":\"Y\",\"\\u1EF4\":\"Y\",\"\\u01B3\":\"Y\",\"\\u024E\":\"Y\",\"\\u1EFE\":\"Y\",\"\\u24CF\":\"Z\",\"\\uFF3A\":\"Z\",\"\\u0179\":\"Z\",\"\\u1E90\":\"Z\",\"\\u017B\":\"Z\",\"\\u017D\":\"Z\",\"\\u1E92\":\"Z\",\"\\u1E94\":\"Z\",\"\\u01B5\":\"Z\",\"\\u0224\":\"Z\",\"\\u2C7F\":\"Z\",\"\\u2C6B\":\"Z\",\"\\uA762\":\"Z\",\"\\u24D0\":\"a\",\"\\uFF41\":\"a\",\"\\u1E9A\":\"a\",\"\\u00E0\":\"a\",\"\\u00E1\":\"a\",\"\\u00E2\":\"a\",\"\\u1EA7\":\"a\",\"\\u1EA5\":\"a\",\"\\u1EAB\":\"a\",\"\\u1EA9\":\"a\",\"\\u00E3\":\"a\",\"\\u0101\":\"a\",\"\\u0103\":\"a\",\"\\u1EB1\":\"a\",\"\\u1EAF\":\"a\",\"\\u1EB5\":\"a\",\"\\u1EB3\":\"a\",\"\\u0227\":\"a\",\"\\u01E1\":\"a\",\"\\u00E4\":\"a\",\"\\u01DF\":\"a\",\"\\u1EA3\":\"a\",\"\\u00E5\":\"a\",\"\\u01FB\":\"a\",\"\\u01CE\":\"a\",\"\\u0201\":\"a\",\"\\u0203\":\"a\",\"\\u1EA1\":\"a\",\"\\u1EAD\":\"a\",\"\\u1EB7\":\"a\",\"\\u1E01\":\"a\",\"\\u0105\":\"a\",\"\\u2C65\":\"a\",\"\\u0250\":\"a\",\"\\uA733\":\"aa\",\"\\u00E6\":\"ae\",\"\\u01FD\":\"ae\",\"\\u01E3\":\"ae\",\"\\uA735\":\"ao\",\"\\uA737\":\"au\",\"\\uA739\":\"av\",\"\\uA73B\":\"av\",\"\\uA73D\":\"ay\",\"\\u24D1\":\"b\",\"\\uFF42\":\"b\",\"\\u1E03\":\"b\",\"\\u1E05\":\"b\",\"\\u1E07\":\"b\",\"\\u0180\":\"b\",\"\\u0183\":\"b\",\"\\u0253\":\"b\",\"\\u24D2\":\"c\",\"\\uFF43\":\"c\",\"\\u0107\":\"c\",\"\\u0109\":\"c\",\"\\u010B\":\"c\",\"\\u010D\":\"c\",\"\\u00E7\":\"c\",\"\\u1E09\":\"c\",\"\\u0188\":\"c\",\"\\u023C\":\"c\",\"\\uA73F\":\"c\",\"\\u2184\":\"c\",\"\\u24D3\":\"d\",\"\\uFF44\":\"d\",\"\\u1E0B\":\"d\",\"\\u010F\":\"d\",\"\\u1E0D\":\"d\",\"\\u1E11\":\"d\",\"\\u1E13\":\"d\",\"\\u1E0F\":\"d\",\"\\u0111\":\"d\",\"\\u018C\":\"d\",\"\\u0256\":\"d\",\"\\u0257\":\"d\",\"\\uA77A\":\"d\",\"\\u01F3\":\"dz\",\"\\u01C6\":\"dz\",\"\\u24D4\":\"e\",\"\\uFF45\":\"e\",\"\\u00E8\":\"e\",\"\\u00E9\":\"e\",\"\\u00EA\":\"e\",\"\\u1EC1\":\"e\",\"\\u1EBF\":\"e\",\"\\u1EC5\":\"e\",\"\\u1EC3\":\"e\",\"\\u1EBD\":\"e\",\"\\u0113\":\"e\",\"\\u1E15\":\"e\",\"\\u1E17\":\"e\",\"\\u0115\":\"e\",\"\\u0117\":\"e\",\"\\u00EB\":\"e\",\"\\u1EBB\":\"e\",\"\\u011B\":\"e\",\"\\u0205\":\"e\",\"\\u0207\":\"e\",\"\\u1EB9\":\"e\",\"\\u1EC7\":\"e\",\"\\u0229\":\"e\",\"\\u1E1D\":\"e\",\"\\u0119\":\"e\",\"\\u1E19\":\"e\",\"\\u1E1B\":\"e\",\"\\u0247\":\"e\",\"\\u025B\":\"e\",\"\\u01DD\":\"e\",\"\\u24D5\":\"f\",\"\\uFF46\":\"f\",\"\\u1E1F\":\"f\",\"\\u0192\":\"f\",\"\\uA77C\":\"f\",\"\\u24D6\":\"g\",\"\\uFF47\":\"g\",\"\\u01F5\":\"g\",\"\\u011D\":\"g\",\"\\u1E21\":\"g\",\"\\u011F\":\"g\",\"\\u0121\":\"g\",\"\\u01E7\":\"g\",\"\\u0123\":\"g\",\"\\u01E5\":\"g\",\"\\u0260\":\"g\",\"\\uA7A1\":\"g\",\"\\u1D79\":\"g\",\"\\uA77F\":\"g\",\"\\u24D7\":\"h\",\"\\uFF48\":\"h\",\"\\u0125\":\"h\",\"\\u1E23\":\"h\",\"\\u1E27\":\"h\",\"\\u021F\":\"h\",\"\\u1E25\":\"h\",\"\\u1E29\":\"h\",\"\\u1E2B\":\"h\",\"\\u1E96\":\"h\",\"\\u0127\":\"h\",\"\\u2C68\":\"h\",\"\\u2C76\":\"h\",\"\\u0265\":\"h\",\"\\u0195\":\"hv\",\"\\u24D8\":\"i\",\"\\uFF49\":\"i\",\"\\u00EC\":\"i\",\"\\u00ED\":\"i\",\"\\u00EE\":\"i\",\"\\u0129\":\"i\",\"\\u012B\":\"i\",\"\\u012D\":\"i\",\"\\u00EF\":\"i\",\"\\u1E2F\":\"i\",\"\\u1EC9\":\"i\",\"\\u01D0\":\"i\",\"\\u0209\":\"i\",\"\\u020B\":\"i\",\"\\u1ECB\":\"i\",\"\\u012F\":\"i\",\"\\u1E2D\":\"i\",\"\\u0268\":\"i\",\"\\u0131\":\"i\",\"\\u24D9\":\"j\",\"\\uFF4A\":\"j\",\"\\u0135\":\"j\",\"\\u01F0\":\"j\",\"\\u0249\":\"j\",\"\\u24DA\":\"k\",\"\\uFF4B\":\"k\",\"\\u1E31\":\"k\",\"\\u01E9\":\"k\",\"\\u1E33\":\"k\",\"\\u0137\":\"k\",\"\\u1E35\":\"k\",\"\\u0199\":\"k\",\"\\u2C6A\":\"k\",\"\\uA741\":\"k\",\"\\uA743\":\"k\",\"\\uA745\":\"k\",\"\\uA7A3\":\"k\",\"\\u24DB\":\"l\",\"\\uFF4C\":\"l\",\"\\u0140\":\"l\",\"\\u013A\":\"l\",\"\\u013E\":\"l\",\"\\u1E37\":\"l\",\"\\u1E39\":\"l\",\"\\u013C\":\"l\",\"\\u1E3D\":\"l\",\"\\u1E3B\":\"l\",\"\\u017F\":\"l\",\"\\u0142\":\"l\",\"\\u019A\":\"l\",\"\\u026B\":\"l\",\"\\u2C61\":\"l\",\"\\uA749\":\"l\",\"\\uA781\":\"l\",\"\\uA747\":\"l\",\"\\u01C9\":\"lj\",\"\\u24DC\":\"m\",\"\\uFF4D\":\"m\",\"\\u1E3F\":\"m\",\"\\u1E41\":\"m\",\"\\u1E43\":\"m\",\"\\u0271\":\"m\",\"\\u026F\":\"m\",\"\\u24DD\":\"n\",\"\\uFF4E\":\"n\",\"\\u01F9\":\"n\",\"\\u0144\":\"n\",\"\\u00F1\":\"n\",\"\\u1E45\":\"n\",\"\\u0148\":\"n\",\"\\u1E47\":\"n\",\"\\u0146\":\"n\",\"\\u1E4B\":\"n\",\"\\u1E49\":\"n\",\"\\u019E\":\"n\",\"\\u0272\":\"n\",\"\\u0149\":\"n\",\"\\uA791\":\"n\",\"\\uA7A5\":\"n\",\"\\u01CC\":\"nj\",\"\\u24DE\":\"o\",\"\\uFF4F\":\"o\",\"\\u00F2\":\"o\",\"\\u00F3\":\"o\",\"\\u00F4\":\"o\",\"\\u1ED3\":\"o\",\"\\u1ED1\":\"o\",\"\\u1ED7\":\"o\",\"\\u1ED5\":\"o\",\"\\u00F5\":\"o\",\"\\u1E4D\":\"o\",\"\\u022D\":\"o\",\"\\u1E4F\":\"o\",\"\\u014D\":\"o\",\"\\u1E51\":\"o\",\"\\u1E53\":\"o\",\"\\u014F\":\"o\",\"\\u022F\":\"o\",\"\\u0231\":\"o\",\"\\u00F6\":\"o\",\"\\u022B\":\"o\",\"\\u1ECF\":\"o\",\"\\u0151\":\"o\",\"\\u01D2\":\"o\",\"\\u020D\":\"o\",\"\\u020F\":\"o\",\"\\u01A1\":\"o\",\"\\u1EDD\":\"o\",\"\\u1EDB\":\"o\",\"\\u1EE1\":\"o\",\"\\u1EDF\":\"o\",\"\\u1EE3\":\"o\",\"\\u1ECD\":\"o\",\"\\u1ED9\":\"o\",\"\\u01EB\":\"o\",\"\\u01ED\":\"o\",\"\\u00F8\":\"o\",\"\\u01FF\":\"o\",\"\\u0254\":\"o\",\"\\uA74B\":\"o\",\"\\uA74D\":\"o\",\"\\u0275\":\"o\",\"\\u01A3\":\"oi\",\"\\u0223\":\"ou\",\"\\uA74F\":\"oo\",\"\\u24DF\":\"p\",\"\\uFF50\":\"p\",\"\\u1E55\":\"p\",\"\\u1E57\":\"p\",\"\\u01A5\":\"p\",\"\\u1D7D\":\"p\",\"\\uA751\":\"p\",\"\\uA753\":\"p\",\"\\uA755\":\"p\",\"\\u24E0\":\"q\",\"\\uFF51\":\"q\",\"\\u024B\":\"q\",\"\\uA757\":\"q\",\"\\uA759\":\"q\",\"\\u24E1\":\"r\",\"\\uFF52\":\"r\",\"\\u0155\":\"r\",\"\\u1E59\":\"r\",\"\\u0159\":\"r\",\"\\u0211\":\"r\",\"\\u0213\":\"r\",\"\\u1E5B\":\"r\",\"\\u1E5D\":\"r\",\"\\u0157\":\"r\",\"\\u1E5F\":\"r\",\"\\u024D\":\"r\",\"\\u027D\":\"r\",\"\\uA75B\":\"r\",\"\\uA7A7\":\"r\",\"\\uA783\":\"r\",\"\\u24E2\":\"s\",\"\\uFF53\":\"s\",\"\\u00DF\":\"s\",\"\\u015B\":\"s\",\"\\u1E65\":\"s\",\"\\u015D\":\"s\",\"\\u1E61\":\"s\",\"\\u0161\":\"s\",\"\\u1E67\":\"s\",\"\\u1E63\":\"s\",\"\\u1E69\":\"s\",\"\\u0219\":\"s\",\"\\u015F\":\"s\",\"\\u023F\":\"s\",\"\\uA7A9\":\"s\",\"\\uA785\":\"s\",\"\\u1E9B\":\"s\",\"\\u24E3\":\"t\",\"\\uFF54\":\"t\",\"\\u1E6B\":\"t\",\"\\u1E97\":\"t\",\"\\u0165\":\"t\",\"\\u1E6D\":\"t\",\"\\u021B\":\"t\",\"\\u0163\":\"t\",\"\\u1E71\":\"t\",\"\\u1E6F\":\"t\",\"\\u0167\":\"t\",\"\\u01AD\":\"t\",\"\\u0288\":\"t\",\"\\u2C66\":\"t\",\"\\uA787\":\"t\",\"\\uA729\":\"tz\",\"\\u24E4\":\"u\",\"\\uFF55\":\"u\",\"\\u00F9\":\"u\",\"\\u00FA\":\"u\",\"\\u00FB\":\"u\",\"\\u0169\":\"u\",\"\\u1E79\":\"u\",\"\\u016B\":\"u\",\"\\u1E7B\":\"u\",\"\\u016D\":\"u\",\"\\u00FC\":\"u\",\"\\u01DC\":\"u\",\"\\u01D8\":\"u\",\"\\u01D6\":\"u\",\"\\u01DA\":\"u\",\"\\u1EE7\":\"u\",\"\\u016F\":\"u\",\"\\u0171\":\"u\",\"\\u01D4\":\"u\",\"\\u0215\":\"u\",\"\\u0217\":\"u\",\"\\u01B0\":\"u\",\"\\u1EEB\":\"u\",\"\\u1EE9\":\"u\",\"\\u1EEF\":\"u\",\"\\u1EED\":\"u\",\"\\u1EF1\":\"u\",\"\\u1EE5\":\"u\",\"\\u1E73\":\"u\",\"\\u0173\":\"u\",\"\\u1E77\":\"u\",\"\\u1E75\":\"u\",\"\\u0289\":\"u\",\"\\u24E5\":\"v\",\"\\uFF56\":\"v\",\"\\u1E7D\":\"v\",\"\\u1E7F\":\"v\",\"\\u028B\":\"v\",\"\\uA75F\":\"v\",\"\\u028C\":\"v\",\"\\uA761\":\"vy\",\"\\u24E6\":\"w\",\"\\uFF57\":\"w\",\"\\u1E81\":\"w\",\"\\u1E83\":\"w\",\"\\u0175\":\"w\",\"\\u1E87\":\"w\",\"\\u1E85\":\"w\",\"\\u1E98\":\"w\",\"\\u1E89\":\"w\",\"\\u2C73\":\"w\",\"\\u24E7\":\"x\",\"\\uFF58\":\"x\",\"\\u1E8B\":\"x\",\"\\u1E8D\":\"x\",\"\\u24E8\":\"y\",\"\\uFF59\":\"y\",\"\\u1EF3\":\"y\",\"\\u00FD\":\"y\",\"\\u0177\":\"y\",\"\\u1EF9\":\"y\",\"\\u0233\":\"y\",\"\\u1E8F\":\"y\",\"\\u00FF\":\"y\",\"\\u1EF7\":\"y\",\"\\u1E99\":\"y\",\"\\u1EF5\":\"y\",\"\\u01B4\":\"y\",\"\\u024F\":\"y\",\"\\u1EFF\":\"y\",\"\\u24E9\":\"z\",\"\\uFF5A\":\"z\",\"\\u017A\":\"z\",\"\\u1E91\":\"z\",\"\\u017C\":\"z\",\"\\u017E\":\"z\",\"\\u1E93\":\"z\",\"\\u1E95\":\"z\",\"\\u01B6\":\"z\",\"\\u0225\":\"z\",\"\\u0240\":\"z\",\"\\u2C6C\":\"z\",\"\\uA763\":\"z\",\"\\u0386\":\"\\u0391\",\"\\u0388\":\"\\u0395\",\"\\u0389\":\"\\u0397\",\"\\u038A\":\"\\u0399\",\"\\u03AA\":\"\\u0399\",\"\\u038C\":\"\\u039F\",\"\\u038E\":\"\\u03A5\",\"\\u03AB\":\"\\u03A5\",\"\\u038F\":\"\\u03A9\",\"\\u03AC\":\"\\u03B1\",\"\\u03AD\":\"\\u03B5\",\"\\u03AE\":\"\\u03B7\",\"\\u03AF\":\"\\u03B9\",\"\\u03CA\":\"\\u03B9\",\"\\u0390\":\"\\u03B9\",\"\\u03CC\":\"\\u03BF\",\"\\u03CD\":\"\\u03C5\",\"\\u03CB\":\"\\u03C5\",\"\\u03B0\":\"\\u03C5\",\"\\u03C9\":\"\\u03C9\",\"\\u03C2\":\"\\u03C3\"};\n                                                                                                                       // 103\n    $document = $(document);                                                                                           // 104\n                                                                                                                       // 105\n    nextUid=(function() { var counter=1; return function() { return counter++; }; }());                                // 106\n                                                                                                                       // 107\n                                                                                                                       // 108\n    function reinsertElement(element) {                                                                                // 109\n        var placeholder = $(document.createTextNode(''));                                                              // 110\n                                                                                                                       // 111\n        element.before(placeholder);                                                                                   // 112\n        placeholder.before(element);                                                                                   // 113\n        placeholder.remove();                                                                                          // 114\n    }                                                                                                                  // 115\n                                                                                                                       // 116\n    function stripDiacritics(str) {                                                                                    // 117\n        // removed diacritics support to enable spiderable - see https://github.com/gadicc/meteor-phantomjs/issues/1   // 118\n        return str;                                                                                                    // 119\n        // // Used 'uni range + named function' from http://jsperf.com/diacritics/18                                   // 120\n        // function match(a) {                                                                                         // 121\n        //     return DIACRITICS[a] || a;                                                                              // 122\n        // }                                                                                                           // 123\n                                                                                                                       // 124\n        // return str.replace(/[^\\u0000-\\u007E]/g, match);                                                             // 125\n    }                                                                                                                  // 126\n                                                                                                                       // 127\n    function indexOf(value, array) {                                                                                   // 128\n        var i = 0, l = array.length;                                                                                   // 129\n        for (; i < l; i = i + 1) {                                                                                     // 130\n            if (equal(value, array[i])) return i;                                                                      // 131\n        }                                                                                                              // 132\n        return -1;                                                                                                     // 133\n    }                                                                                                                  // 134\n                                                                                                                       // 135\n    function measureScrollbar () {                                                                                     // 136\n        var $template = $( MEASURE_SCROLLBAR_TEMPLATE );                                                               // 137\n        $template.appendTo('body');                                                                                    // 138\n                                                                                                                       // 139\n        var dim = {                                                                                                    // 140\n            width: $template.width() - $template[0].clientWidth,                                                       // 141\n            height: $template.height() - $template[0].clientHeight                                                     // 142\n        };                                                                                                             // 143\n        $template.remove();                                                                                            // 144\n                                                                                                                       // 145\n        return dim;                                                                                                    // 146\n    }                                                                                                                  // 147\n                                                                                                                       // 148\n    /**                                                                                                                // 149\n     * Compares equality of a and b                                                                                    // 150\n     * @param a                                                                                                        // 151\n     * @param b                                                                                                        // 152\n     */                                                                                                                // 153\n    function equal(a, b) {                                                                                             // 154\n        if (a === b) return true;                                                                                      // 155\n        if (a === undefined || b === undefined) return false;                                                          // 156\n        if (a === null || b === null) return false;                                                                    // 157\n        // Check whether 'a' or 'b' is a string (primitive or object).                                                 // 158\n        // The concatenation of an empty string (+'') converts its argument to a string's primitive.                   // 159\n        if (a.constructor === String) return a+'' === b+''; // a+'' - in case 'a' is a String object                   // 160\n        if (b.constructor === String) return b+'' === a+''; // b+'' - in case 'b' is a String object                   // 161\n        return false;                                                                                                  // 162\n    }                                                                                                                  // 163\n                                                                                                                       // 164\n    /**                                                                                                                // 165\n     * Splits the string into an array of values, trimming each value. An empty array is returned for nulls or empty   // 166\n     * strings                                                                                                         // 167\n     * @param string                                                                                                   // 168\n     * @param separator                                                                                                // 169\n     */                                                                                                                // 170\n    function splitVal(string, separator) {                                                                             // 171\n        var val, i, l;                                                                                                 // 172\n        if (string === null || string.length < 1) return [];                                                           // 173\n        val = string.split(separator);                                                                                 // 174\n        for (i = 0, l = val.length; i < l; i = i + 1) val[i] = $.trim(val[i]);                                         // 175\n        return val;                                                                                                    // 176\n    }                                                                                                                  // 177\n                                                                                                                       // 178\n    function getSideBorderPadding(element) {                                                                           // 179\n        return element.outerWidth(false) - element.width();                                                            // 180\n    }                                                                                                                  // 181\n                                                                                                                       // 182\n    function installKeyUpChangeEvent(element) {                                                                        // 183\n        var key=\"keyup-change-value\";                                                                                  // 184\n        element.on(\"keydown\", function () {                                                                            // 185\n            if ($.data(element, key) === undefined) {                                                                  // 186\n                $.data(element, key, element.val());                                                                   // 187\n            }                                                                                                          // 188\n        });                                                                                                            // 189\n        element.on(\"keyup\", function () {                                                                              // 190\n            var val= $.data(element, key);                                                                             // 191\n            if (val !== undefined && element.val() !== val) {                                                          // 192\n                $.removeData(element, key);                                                                            // 193\n                element.trigger(\"keyup-change\");                                                                       // 194\n            }                                                                                                          // 195\n        });                                                                                                            // 196\n    }                                                                                                                  // 197\n                                                                                                                       // 198\n                                                                                                                       // 199\n    /**                                                                                                                // 200\n     * filters mouse events so an event is fired only if the mouse moved.                                              // 201\n     *                                                                                                                 // 202\n     * filters out mouse events that occur when mouse is stationary but                                                // 203\n     * the elements under the pointer are scrolled.                                                                    // 204\n     */                                                                                                                // 205\n    function installFilteredMouseMove(element) {                                                                       // 206\n        element.on(\"mousemove\", function (e) {                                                                         // 207\n            var lastpos = lastMousePosition;                                                                           // 208\n            if (lastpos === undefined || lastpos.x !== e.pageX || lastpos.y !== e.pageY) {                             // 209\n                $(e.target).trigger(\"mousemove-filtered\", e);                                                          // 210\n            }                                                                                                          // 211\n        });                                                                                                            // 212\n    }                                                                                                                  // 213\n                                                                                                                       // 214\n    /**                                                                                                                // 215\n     * Debounces a function. Returns a function that calls the original fn function only if no invocations have been made\n     * within the last quietMillis milliseconds.                                                                       // 217\n     *                                                                                                                 // 218\n     * @param quietMillis number of milliseconds to wait before invoking fn                                            // 219\n     * @param fn function to be debounced                                                                              // 220\n     * @param ctx object to be used as this reference within fn                                                        // 221\n     * @return debounced version of fn                                                                                 // 222\n     */                                                                                                                // 223\n    function debounce(quietMillis, fn, ctx) {                                                                          // 224\n        ctx = ctx || undefined;                                                                                        // 225\n        var timeout;                                                                                                   // 226\n        return function () {                                                                                           // 227\n            var args = arguments;                                                                                      // 228\n            window.clearTimeout(timeout);                                                                              // 229\n            timeout = window.setTimeout(function() {                                                                   // 230\n                fn.apply(ctx, args);                                                                                   // 231\n            }, quietMillis);                                                                                           // 232\n        };                                                                                                             // 233\n    }                                                                                                                  // 234\n                                                                                                                       // 235\n    function installDebouncedScroll(threshold, element) {                                                              // 236\n        var notify = debounce(threshold, function (e) { element.trigger(\"scroll-debounced\", e);});                     // 237\n        element.on(\"scroll\", function (e) {                                                                            // 238\n            if (indexOf(e.target, element.get()) >= 0) notify(e);                                                      // 239\n        });                                                                                                            // 240\n    }                                                                                                                  // 241\n                                                                                                                       // 242\n    function focus($el) {                                                                                              // 243\n        if ($el[0] === document.activeElement) return;                                                                 // 244\n                                                                                                                       // 245\n        /* set the focus in a 0 timeout - that way the focus is set after the processing                               // 246\n            of the current event has finished - which seems like the only reliable way                                 // 247\n            to set focus */                                                                                            // 248\n        window.setTimeout(function() {                                                                                 // 249\n            var el=$el[0], pos=$el.val().length, range;                                                                // 250\n                                                                                                                       // 251\n            $el.focus();                                                                                               // 252\n                                                                                                                       // 253\n            /* make sure el received focus so we do not error out when trying to manipulate the caret.                 // 254\n                sometimes modals or others listeners may steal it after its set */                                     // 255\n            var isVisible = (el.offsetWidth > 0 || el.offsetHeight > 0);                                               // 256\n            if (isVisible && el === document.activeElement) {                                                          // 257\n                                                                                                                       // 258\n                /* after the focus is set move the caret to the end, necessary when we val()                           // 259\n                    just before setting focus */                                                                       // 260\n                if(el.setSelectionRange)                                                                               // 261\n                {                                                                                                      // 262\n                    el.setSelectionRange(pos, pos);                                                                    // 263\n                }                                                                                                      // 264\n                else if (el.createTextRange) {                                                                         // 265\n                    range = el.createTextRange();                                                                      // 266\n                    range.collapse(false);                                                                             // 267\n                    range.select();                                                                                    // 268\n                }                                                                                                      // 269\n            }                                                                                                          // 270\n        }, 0);                                                                                                         // 271\n    }                                                                                                                  // 272\n                                                                                                                       // 273\n    function getCursorInfo(el) {                                                                                       // 274\n        el = $(el)[0];                                                                                                 // 275\n        var offset = 0;                                                                                                // 276\n        var length = 0;                                                                                                // 277\n        if ('selectionStart' in el) {                                                                                  // 278\n            offset = el.selectionStart;                                                                                // 279\n            length = el.selectionEnd - offset;                                                                         // 280\n        } else if ('selection' in document) {                                                                          // 281\n            el.focus();                                                                                                // 282\n            var sel = document.selection.createRange();                                                                // 283\n            length = document.selection.createRange().text.length;                                                     // 284\n            sel.moveStart('character', -el.value.length);                                                              // 285\n            offset = sel.text.length - length;                                                                         // 286\n        }                                                                                                              // 287\n        return { offset: offset, length: length };                                                                     // 288\n    }                                                                                                                  // 289\n                                                                                                                       // 290\n    function killEvent(event) {                                                                                        // 291\n        event.preventDefault();                                                                                        // 292\n        event.stopPropagation();                                                                                       // 293\n    }                                                                                                                  // 294\n    function killEventImmediately(event) {                                                                             // 295\n        event.preventDefault();                                                                                        // 296\n        event.stopImmediatePropagation();                                                                              // 297\n    }                                                                                                                  // 298\n                                                                                                                       // 299\n    function measureTextWidth(e) {                                                                                     // 300\n        if (!sizer){                                                                                                   // 301\n            var style = e[0].currentStyle || window.getComputedStyle(e[0], null);                                      // 302\n            sizer = $(document.createElement(\"div\")).css({                                                             // 303\n                position: \"absolute\",                                                                                  // 304\n                left: \"-10000px\",                                                                                      // 305\n                top: \"-10000px\",                                                                                       // 306\n                display: \"none\",                                                                                       // 307\n                fontSize: style.fontSize,                                                                              // 308\n                fontFamily: style.fontFamily,                                                                          // 309\n                fontStyle: style.fontStyle,                                                                            // 310\n                fontWeight: style.fontWeight,                                                                          // 311\n                letterSpacing: style.letterSpacing,                                                                    // 312\n                textTransform: style.textTransform,                                                                    // 313\n                whiteSpace: \"nowrap\"                                                                                   // 314\n            });                                                                                                        // 315\n            sizer.attr(\"class\",\"select2-sizer\");                                                                       // 316\n            $(\"body\").append(sizer);                                                                                   // 317\n        }                                                                                                              // 318\n        sizer.text(e.val());                                                                                           // 319\n        return sizer.width();                                                                                          // 320\n    }                                                                                                                  // 321\n                                                                                                                       // 322\n    function syncCssClasses(dest, src, adapter) {                                                                      // 323\n        var classes, replacements = [], adapted;                                                                       // 324\n                                                                                                                       // 325\n        classes = $.trim(dest.attr(\"class\"));                                                                          // 326\n                                                                                                                       // 327\n        if (classes) {                                                                                                 // 328\n            classes = '' + classes; // for IE which returns object                                                     // 329\n                                                                                                                       // 330\n            $(classes.split(/\\s+/)).each2(function() {                                                                 // 331\n                if (this.indexOf(\"select2-\") === 0) {                                                                  // 332\n                    replacements.push(this);                                                                           // 333\n                }                                                                                                      // 334\n            });                                                                                                        // 335\n        }                                                                                                              // 336\n                                                                                                                       // 337\n        classes = $.trim(src.attr(\"class\"));                                                                           // 338\n                                                                                                                       // 339\n        if (classes) {                                                                                                 // 340\n            classes = '' + classes; // for IE which returns object                                                     // 341\n                                                                                                                       // 342\n            $(classes.split(/\\s+/)).each2(function() {                                                                 // 343\n                if (this.indexOf(\"select2-\") !== 0) {                                                                  // 344\n                    adapted = adapter(this);                                                                           // 345\n                                                                                                                       // 346\n                    if (adapted) {                                                                                     // 347\n                        replacements.push(adapted);                                                                    // 348\n                    }                                                                                                  // 349\n                }                                                                                                      // 350\n            });                                                                                                        // 351\n        }                                                                                                              // 352\n                                                                                                                       // 353\n        dest.attr(\"class\", replacements.join(\" \"));                                                                    // 354\n    }                                                                                                                  // 355\n                                                                                                                       // 356\n                                                                                                                       // 357\n    function markMatch(text, term, markup, escapeMarkup) {                                                             // 358\n        var match=stripDiacritics(text.toUpperCase()).indexOf(stripDiacritics(term.toUpperCase())),                    // 359\n            tl=term.length;                                                                                            // 360\n                                                                                                                       // 361\n        if (match<0) {                                                                                                 // 362\n            markup.push(escapeMarkup(text));                                                                           // 363\n            return;                                                                                                    // 364\n        }                                                                                                              // 365\n                                                                                                                       // 366\n        markup.push(escapeMarkup(text.substring(0, match)));                                                           // 367\n        markup.push(\"<span class='select2-match'>\");                                                                   // 368\n        markup.push(escapeMarkup(text.substring(match, match + tl)));                                                  // 369\n        markup.push(\"</span>\");                                                                                        // 370\n        markup.push(escapeMarkup(text.substring(match + tl, text.length)));                                            // 371\n    }                                                                                                                  // 372\n                                                                                                                       // 373\n    function defaultEscapeMarkup(markup) {                                                                             // 374\n        var replace_map = {                                                                                            // 375\n            '\\\\': '&#92;',                                                                                             // 376\n            '&': '&amp;',                                                                                              // 377\n            '<': '&lt;',                                                                                               // 378\n            '>': '&gt;',                                                                                               // 379\n            '\"': '&quot;',                                                                                             // 380\n            \"'\": '&#39;',                                                                                              // 381\n            \"/\": '&#47;'                                                                                               // 382\n        };                                                                                                             // 383\n                                                                                                                       // 384\n        return String(markup).replace(/[&<>\"'\\/\\\\]/g, function (match) {                                               // 385\n            return replace_map[match];                                                                                 // 386\n        });                                                                                                            // 387\n    }                                                                                                                  // 388\n                                                                                                                       // 389\n    /**                                                                                                                // 390\n     * Produces an ajax-based query function                                                                           // 391\n     *                                                                                                                 // 392\n     * @param options object containing configuration parameters                                                       // 393\n     * @param options.params parameter map for the transport ajax call, can contain such options as cache, jsonpCallback, etc. see $.ajax\n     * @param options.transport function that will be used to execute the ajax request. must be compatible with parameters supported by $.ajax\n     * @param options.url url for the data                                                                             // 396\n     * @param options.data a function(searchTerm, pageNumber, context) that should return an object containing query string parameters for the above url.\n     * @param options.dataType request data type: ajax, jsonp, other datatypes supported by jQuery's $.ajax function or the transport function if specified\n     * @param options.quietMillis (optional) milliseconds to wait before making the ajaxRequest, helps debounce the ajax function if invoked too often\n     * @param options.results a function(remoteData, pageNumber, query) that converts data returned form the remote request to the format expected by Select2.\n     *      The expected format is an object containing the following keys:                                            // 401\n     *      results array of objects that will be used as choices                                                      // 402\n     *      more (optional) boolean indicating whether there are more results available                                // 403\n     *      Example: {results:[{id:1, text:'Red'},{id:2, text:'Blue'}], more:true}                                     // 404\n     */                                                                                                                // 405\n    function ajax(options) {                                                                                           // 406\n        var timeout, // current scheduled but not yet executed request                                                 // 407\n            handler = null,                                                                                            // 408\n            quietMillis = options.quietMillis || 100,                                                                  // 409\n            ajaxUrl = options.url,                                                                                     // 410\n            self = this;                                                                                               // 411\n                                                                                                                       // 412\n        return function (query) {                                                                                      // 413\n            window.clearTimeout(timeout);                                                                              // 414\n            timeout = window.setTimeout(function () {                                                                  // 415\n                var data = options.data, // ajax data function                                                         // 416\n                    url = ajaxUrl, // ajax url string or function                                                      // 417\n                    transport = options.transport || $.fn.select2.ajaxDefaults.transport,                              // 418\n                    // deprecated - to be removed in 4.0  - use params instead                                         // 419\n                    deprecated = {                                                                                     // 420\n                        type: options.type || 'GET', // set type of request (GET or POST)                              // 421\n                        cache: options.cache || false,                                                                 // 422\n                        jsonpCallback: options.jsonpCallback||undefined,                                               // 423\n                        dataType: options.dataType||\"json\"                                                             // 424\n                    },                                                                                                 // 425\n                    params = $.extend({}, $.fn.select2.ajaxDefaults.params, deprecated);                               // 426\n                                                                                                                       // 427\n                data = data ? data.call(self, query.term, query.page, query.context) : null;                           // 428\n                url = (typeof url === 'function') ? url.call(self, query.term, query.page, query.context) : url;       // 429\n                                                                                                                       // 430\n                if (handler && typeof handler.abort === \"function\") { handler.abort(); }                               // 431\n                                                                                                                       // 432\n                if (options.params) {                                                                                  // 433\n                    if ($.isFunction(options.params)) {                                                                // 434\n                        $.extend(params, options.params.call(self));                                                   // 435\n                    } else {                                                                                           // 436\n                        $.extend(params, options.params);                                                              // 437\n                    }                                                                                                  // 438\n                }                                                                                                      // 439\n                                                                                                                       // 440\n                $.extend(params, {                                                                                     // 441\n                    url: url,                                                                                          // 442\n                    dataType: options.dataType,                                                                        // 443\n                    data: data,                                                                                        // 444\n                    success: function (data) {                                                                         // 445\n                        // TODO - replace query.page with query so users have access to term, page, etc.               // 446\n                        // added query as third paramter to keep backwards compatibility                               // 447\n                        var results = options.results(data, query.page, query);                                        // 448\n                        query.callback(results);                                                                       // 449\n                    },                                                                                                 // 450\n                    error: function(jqXHR, textStatus, errorThrown){                                                   // 451\n                        var results = {                                                                                // 452\n                            hasError: true,                                                                            // 453\n                            jqXHR: jqXHR,                                                                              // 454\n                            textStatus: textStatus,                                                                    // 455\n                            errorThrown: errorThrown,                                                                  // 456\n                        };                                                                                             // 457\n                                                                                                                       // 458\n                        query.callback(results);                                                                       // 459\n                    }                                                                                                  // 460\n                });                                                                                                    // 461\n                handler = transport.call(self, params);                                                                // 462\n            }, quietMillis);                                                                                           // 463\n        };                                                                                                             // 464\n    }                                                                                                                  // 465\n                                                                                                                       // 466\n    /**                                                                                                                // 467\n     * Produces a query function that works with a local array                                                         // 468\n     *                                                                                                                 // 469\n     * @param options object containing configuration parameters. The options parameter can either be an array or an   // 470\n     * object.                                                                                                         // 471\n     *                                                                                                                 // 472\n     * If the array form is used it is assumed that it contains objects with 'id' and 'text' keys.                     // 473\n     *                                                                                                                 // 474\n     * If the object form is used it is assumed that it contains 'data' and 'text' keys. The 'data' key should contain // 475\n     * an array of objects that will be used as choices. These objects must contain at least an 'id' key. The 'text'   // 476\n     * key can either be a String in which case it is expected that each element in the 'data' array has a key with the\n     * value of 'text' which will be used to match choices. Alternatively, text can be a function(item) that can extract\n     * the text.                                                                                                       // 479\n     */                                                                                                                // 480\n    function local(options) {                                                                                          // 481\n        var data = options, // data elements                                                                           // 482\n            dataText,                                                                                                  // 483\n            tmp,                                                                                                       // 484\n            text = function (item) { return \"\"+item.text; }; // function used to retrieve the text portion of a data item that is matched against the search\n                                                                                                                       // 486\n         if ($.isArray(data)) {                                                                                        // 487\n            tmp = data;                                                                                                // 488\n            data = { results: tmp };                                                                                   // 489\n        }                                                                                                              // 490\n                                                                                                                       // 491\n         if ($.isFunction(data) === false) {                                                                           // 492\n            tmp = data;                                                                                                // 493\n            data = function() { return tmp; };                                                                         // 494\n        }                                                                                                              // 495\n                                                                                                                       // 496\n        var dataItem = data();                                                                                         // 497\n        if (dataItem.text) {                                                                                           // 498\n            text = dataItem.text;                                                                                      // 499\n            // if text is not a function we assume it to be a key name                                                 // 500\n            if (!$.isFunction(text)) {                                                                                 // 501\n                dataText = dataItem.text; // we need to store this in a separate variable because in the next step data gets reset and data.text is no longer available\n                text = function (item) { return item[dataText]; };                                                     // 503\n            }                                                                                                          // 504\n        }                                                                                                              // 505\n                                                                                                                       // 506\n        return function (query) {                                                                                      // 507\n            var t = query.term, filtered = { results: [] }, process;                                                   // 508\n            if (t === \"\") {                                                                                            // 509\n                query.callback(data());                                                                                // 510\n                return;                                                                                                // 511\n            }                                                                                                          // 512\n                                                                                                                       // 513\n            process = function(datum, collection) {                                                                    // 514\n                var group, attr;                                                                                       // 515\n                datum = datum[0];                                                                                      // 516\n                if (datum.children) {                                                                                  // 517\n                    group = {};                                                                                        // 518\n                    for (attr in datum) {                                                                              // 519\n                        if (datum.hasOwnProperty(attr)) group[attr]=datum[attr];                                       // 520\n                    }                                                                                                  // 521\n                    group.children=[];                                                                                 // 522\n                    $(datum.children).each2(function(i, childDatum) { process(childDatum, group.children); });         // 523\n                    if (group.children.length || query.matcher(t, text(group), datum)) {                               // 524\n                        collection.push(group);                                                                        // 525\n                    }                                                                                                  // 526\n                } else {                                                                                               // 527\n                    if (query.matcher(t, text(datum), datum)) {                                                        // 528\n                        collection.push(datum);                                                                        // 529\n                    }                                                                                                  // 530\n                }                                                                                                      // 531\n            };                                                                                                         // 532\n                                                                                                                       // 533\n            $(data().results).each2(function(i, datum) { process(datum, filtered.results); });                         // 534\n            query.callback(filtered);                                                                                  // 535\n        };                                                                                                             // 536\n    }                                                                                                                  // 537\n                                                                                                                       // 538\n    // TODO javadoc                                                                                                    // 539\n    function tags(data) {                                                                                              // 540\n        var isFunc = $.isFunction(data);                                                                               // 541\n        return function (query) {                                                                                      // 542\n            var t = query.term, filtered = {results: []};                                                              // 543\n            var result = isFunc ? data(query) : data;                                                                  // 544\n            if ($.isArray(result)) {                                                                                   // 545\n                $(result).each(function () {                                                                           // 546\n                    var isObject = this.text !== undefined,                                                            // 547\n                        text = isObject ? this.text : this;                                                            // 548\n                    if (t === \"\" || query.matcher(t, text)) {                                                          // 549\n                        filtered.results.push(isObject ? this : {id: this, text: this});                               // 550\n                    }                                                                                                  // 551\n                });                                                                                                    // 552\n                query.callback(filtered);                                                                              // 553\n            }                                                                                                          // 554\n        };                                                                                                             // 555\n    }                                                                                                                  // 556\n                                                                                                                       // 557\n    /**                                                                                                                // 558\n     * Checks if the formatter function should be used.                                                                // 559\n     *                                                                                                                 // 560\n     * Throws an error if it is not a function. Returns true if it should be used,                                     // 561\n     * false if no formatting should be performed.                                                                     // 562\n     *                                                                                                                 // 563\n     * @param formatter                                                                                                // 564\n     */                                                                                                                // 565\n    function checkFormatter(formatter, formatterName) {                                                                // 566\n        if ($.isFunction(formatter)) return true;                                                                      // 567\n        if (!formatter) return false;                                                                                  // 568\n        if (typeof(formatter) === 'string') return true;                                                               // 569\n        throw new Error(formatterName +\" must be a string, function, or falsy value\");                                 // 570\n    }                                                                                                                  // 571\n                                                                                                                       // 572\n  /**                                                                                                                  // 573\n   * Returns a given value                                                                                             // 574\n   * If given a function, returns its output                                                                           // 575\n   *                                                                                                                   // 576\n   * @param val string|function                                                                                        // 577\n   * @param context value of \"this\" to be passed to function                                                           // 578\n   * @returns {*}                                                                                                      // 579\n   */                                                                                                                  // 580\n    function evaluate(val, context) {                                                                                  // 581\n        if ($.isFunction(val)) {                                                                                       // 582\n            var args = Array.prototype.slice.call(arguments, 2);                                                       // 583\n            return val.apply(context, args);                                                                           // 584\n        }                                                                                                              // 585\n        return val;                                                                                                    // 586\n    }                                                                                                                  // 587\n                                                                                                                       // 588\n    function countResults(results) {                                                                                   // 589\n        var count = 0;                                                                                                 // 590\n        $.each(results, function(i, item) {                                                                            // 591\n            if (item.children) {                                                                                       // 592\n                count += countResults(item.children);                                                                  // 593\n            } else {                                                                                                   // 594\n                count++;                                                                                               // 595\n            }                                                                                                          // 596\n        });                                                                                                            // 597\n        return count;                                                                                                  // 598\n    }                                                                                                                  // 599\n                                                                                                                       // 600\n    /**                                                                                                                // 601\n     * Default tokenizer. This function uses breaks the input on substring match of any string from the                // 602\n     * opts.tokenSeparators array and uses opts.createSearchChoice to create the choice object. Both of those          // 603\n     * two options have to be defined in order for the tokenizer to work.                                              // 604\n     *                                                                                                                 // 605\n     * @param input text user has typed so far or pasted into the search field                                         // 606\n     * @param selection currently selected choices                                                                     // 607\n     * @param selectCallback function(choice) callback tho add the choice to selection                                 // 608\n     * @param opts select2's opts                                                                                      // 609\n     * @return undefined/null to leave the current input unchanged, or a string to change the input to the returned value\n     */                                                                                                                // 611\n    function defaultTokenizer(input, selection, selectCallback, opts) {                                                // 612\n        var original = input, // store the original so we can compare and know if we need to tell the search to update its text\n            dupe = false, // check for whether a token we extracted represents a duplicate selected choice             // 614\n            token, // token                                                                                            // 615\n            index, // position at which the separator was found                                                        // 616\n            i, l, // looping variables                                                                                 // 617\n            separator; // the matched separator                                                                        // 618\n                                                                                                                       // 619\n        if (!opts.createSearchChoice || !opts.tokenSeparators || opts.tokenSeparators.length < 1) return undefined;    // 620\n                                                                                                                       // 621\n        while (true) {                                                                                                 // 622\n            index = -1;                                                                                                // 623\n                                                                                                                       // 624\n            for (i = 0, l = opts.tokenSeparators.length; i < l; i++) {                                                 // 625\n                separator = opts.tokenSeparators[i];                                                                   // 626\n                index = input.indexOf(separator);                                                                      // 627\n                if (index >= 0) break;                                                                                 // 628\n            }                                                                                                          // 629\n                                                                                                                       // 630\n            if (index < 0) break; // did not find any token separator in the input string, bail                        // 631\n                                                                                                                       // 632\n            token = input.substring(0, index);                                                                         // 633\n            input = input.substring(index + separator.length);                                                         // 634\n                                                                                                                       // 635\n            if (token.length > 0) {                                                                                    // 636\n                token = opts.createSearchChoice.call(this, token, selection);                                          // 637\n                if (token !== undefined && token !== null && opts.id(token) !== undefined && opts.id(token) !== null) {\n                    dupe = false;                                                                                      // 639\n                    for (i = 0, l = selection.length; i < l; i++) {                                                    // 640\n                        if (equal(opts.id(token), opts.id(selection[i]))) {                                            // 641\n                            dupe = true; break;                                                                        // 642\n                        }                                                                                              // 643\n                    }                                                                                                  // 644\n                                                                                                                       // 645\n                    if (!dupe) selectCallback(token);                                                                  // 646\n                }                                                                                                      // 647\n            }                                                                                                          // 648\n        }                                                                                                              // 649\n                                                                                                                       // 650\n        if (original!==input) return input;                                                                            // 651\n    }                                                                                                                  // 652\n                                                                                                                       // 653\n    function cleanupJQueryElements() {                                                                                 // 654\n        var self = this;                                                                                               // 655\n                                                                                                                       // 656\n        $.each(arguments, function (i, element) {                                                                      // 657\n            self[element].remove();                                                                                    // 658\n            self[element] = null;                                                                                      // 659\n        });                                                                                                            // 660\n    }                                                                                                                  // 661\n                                                                                                                       // 662\n    /**                                                                                                                // 663\n     * Creates a new class                                                                                             // 664\n     *                                                                                                                 // 665\n     * @param superClass                                                                                               // 666\n     * @param methods                                                                                                  // 667\n     */                                                                                                                // 668\n    function clazz(SuperClass, methods) {                                                                              // 669\n        var constructor = function () {};                                                                              // 670\n        constructor.prototype = new SuperClass;                                                                        // 671\n        constructor.prototype.constructor = constructor;                                                               // 672\n        constructor.prototype.parent = SuperClass.prototype;                                                           // 673\n        constructor.prototype = $.extend(constructor.prototype, methods);                                              // 674\n        return constructor;                                                                                            // 675\n    }                                                                                                                  // 676\n                                                                                                                       // 677\n    AbstractSelect2 = clazz(Object, {                                                                                  // 678\n                                                                                                                       // 679\n        // abstract                                                                                                    // 680\n        bind: function (func) {                                                                                        // 681\n            var self = this;                                                                                           // 682\n            return function () {                                                                                       // 683\n                func.apply(self, arguments);                                                                           // 684\n            };                                                                                                         // 685\n        },                                                                                                             // 686\n                                                                                                                       // 687\n        // abstract                                                                                                    // 688\n        init: function (opts) {                                                                                        // 689\n            var results, search, resultsSelector = \".select2-results\";                                                 // 690\n                                                                                                                       // 691\n            // prepare options                                                                                         // 692\n            this.opts = opts = this.prepareOpts(opts);                                                                 // 693\n                                                                                                                       // 694\n            this.id=opts.id;                                                                                           // 695\n                                                                                                                       // 696\n            // destroy if called on an existing component                                                              // 697\n            if (opts.element.data(\"select2\") !== undefined &&                                                          // 698\n                opts.element.data(\"select2\") !== null) {                                                               // 699\n                opts.element.data(\"select2\").destroy();                                                                // 700\n            }                                                                                                          // 701\n                                                                                                                       // 702\n            this.container = this.createContainer();                                                                   // 703\n                                                                                                                       // 704\n            this.liveRegion = $(\"<span>\", {                                                                            // 705\n                    role: \"status\",                                                                                    // 706\n                    \"aria-live\": \"polite\"                                                                              // 707\n                })                                                                                                     // 708\n                .addClass(\"select2-hidden-accessible\")                                                                 // 709\n                .appendTo(document.body);                                                                              // 710\n                                                                                                                       // 711\n            this.containerId=\"s2id_\"+(opts.element.attr(\"id\") || \"autogen\"+nextUid());                                 // 712\n            this.containerEventName= this.containerId                                                                  // 713\n                .replace(/([.])/g, '_')                                                                                // 714\n                .replace(/([;&,\\-\\.\\+\\*\\~':\"\\!\\^#$%@\\[\\]\\(\\)=>\\|])/g, '\\\\$1');                                         // 715\n            this.container.attr(\"id\", this.containerId);                                                               // 716\n                                                                                                                       // 717\n            this.container.attr(\"title\", opts.element.attr(\"title\"));                                                  // 718\n                                                                                                                       // 719\n            this.body = $(\"body\");                                                                                     // 720\n                                                                                                                       // 721\n            syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);                       // 722\n                                                                                                                       // 723\n            this.container.attr(\"style\", opts.element.attr(\"style\"));                                                  // 724\n            this.container.css(evaluate(opts.containerCss, this.opts.element));                                        // 725\n            this.container.addClass(evaluate(opts.containerCssClass, this.opts.element));                              // 726\n                                                                                                                       // 727\n            this.elementTabIndex = this.opts.element.attr(\"tabindex\");                                                 // 728\n                                                                                                                       // 729\n            // swap container for the element                                                                          // 730\n            this.opts.element                                                                                          // 731\n                .data(\"select2\", this)                                                                                 // 732\n                .attr(\"tabindex\", \"-1\")                                                                                // 733\n                .before(this.container)                                                                                // 734\n                .on(\"click.select2\", killEvent); // do not leak click events                                           // 735\n                                                                                                                       // 736\n            this.container.data(\"select2\", this);                                                                      // 737\n                                                                                                                       // 738\n            this.dropdown = this.container.find(\".select2-drop\");                                                      // 739\n                                                                                                                       // 740\n            syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);                         // 741\n                                                                                                                       // 742\n            this.dropdown.addClass(evaluate(opts.dropdownCssClass, this.opts.element));                                // 743\n            this.dropdown.data(\"select2\", this);                                                                       // 744\n            this.dropdown.on(\"click\", killEvent);                                                                      // 745\n                                                                                                                       // 746\n            this.results = results = this.container.find(resultsSelector);                                             // 747\n            this.search = search = this.container.find(\"input.select2-input\");                                         // 748\n                                                                                                                       // 749\n            this.queryCount = 0;                                                                                       // 750\n            this.resultsPage = 0;                                                                                      // 751\n            this.context = null;                                                                                       // 752\n                                                                                                                       // 753\n            // initialize the container                                                                                // 754\n            this.initContainer();                                                                                      // 755\n                                                                                                                       // 756\n            this.container.on(\"click\", killEvent);                                                                     // 757\n                                                                                                                       // 758\n            installFilteredMouseMove(this.results);                                                                    // 759\n                                                                                                                       // 760\n            this.dropdown.on(\"mousemove-filtered\", resultsSelector, this.bind(this.highlightUnderEvent));              // 761\n            this.dropdown.on(\"touchstart touchmove touchend\", resultsSelector, this.bind(function (event) {            // 762\n                this._touchEvent = true;                                                                               // 763\n                this.highlightUnderEvent(event);                                                                       // 764\n            }));                                                                                                       // 765\n            this.dropdown.on(\"touchmove\", resultsSelector, this.bind(this.touchMoved));                                // 766\n            this.dropdown.on(\"touchstart touchend\", resultsSelector, this.bind(this.clearTouchMoved));                 // 767\n                                                                                                                       // 768\n            // Waiting for a click event on touch devices to select option and hide dropdown                           // 769\n            // otherwise click will be triggered on an underlying element                                              // 770\n            this.dropdown.on('click', this.bind(function (event) {                                                     // 771\n                if (this._touchEvent) {                                                                                // 772\n                    this._touchEvent = false;                                                                          // 773\n                    this.selectHighlighted();                                                                          // 774\n                }                                                                                                      // 775\n            }));                                                                                                       // 776\n                                                                                                                       // 777\n            installDebouncedScroll(80, this.results);                                                                  // 778\n            this.dropdown.on(\"scroll-debounced\", resultsSelector, this.bind(this.loadMoreIfNeeded));                   // 779\n                                                                                                                       // 780\n            // do not propagate change event from the search field out of the component                                // 781\n            $(this.container).on(\"change\", \".select2-input\", function(e) {e.stopPropagation();});                      // 782\n            $(this.dropdown).on(\"change\", \".select2-input\", function(e) {e.stopPropagation();});                       // 783\n                                                                                                                       // 784\n            // if jquery.mousewheel plugin is installed we can prevent out-of-bounds scrolling of results via mousewheel\n            if ($.fn.mousewheel) {                                                                                     // 786\n                results.mousewheel(function (e, delta, deltaX, deltaY) {                                               // 787\n                    var top = results.scrollTop();                                                                     // 788\n                    if (deltaY > 0 && top - deltaY <= 0) {                                                             // 789\n                        results.scrollTop(0);                                                                          // 790\n                        killEvent(e);                                                                                  // 791\n                    } else if (deltaY < 0 && results.get(0).scrollHeight - results.scrollTop() + deltaY <= results.height()) {\n                        results.scrollTop(results.get(0).scrollHeight - results.height());                             // 793\n                        killEvent(e);                                                                                  // 794\n                    }                                                                                                  // 795\n                });                                                                                                    // 796\n            }                                                                                                          // 797\n                                                                                                                       // 798\n            installKeyUpChangeEvent(search);                                                                           // 799\n            search.on(\"keyup-change input paste\", this.bind(this.updateResults));                                      // 800\n            search.on(\"focus\", function () { search.addClass(\"select2-focused\"); });                                   // 801\n            search.on(\"blur\", function () { search.removeClass(\"select2-focused\");});                                  // 802\n                                                                                                                       // 803\n            this.dropdown.on(\"mouseup\", resultsSelector, this.bind(function (e) {                                      // 804\n                if ($(e.target).closest(\".select2-result-selectable\").length > 0) {                                    // 805\n                    this.highlightUnderEvent(e);                                                                       // 806\n                    this.selectHighlighted(e);                                                                         // 807\n                }                                                                                                      // 808\n            }));                                                                                                       // 809\n                                                                                                                       // 810\n            // trap all mouse events from leaving the dropdown. sometimes there may be a modal that is listening       // 811\n            // for mouse events outside of itself so it can close itself. since the dropdown is now outside the select2's\n            // dom it will trigger the popup close, which is not what we want                                          // 813\n            // focusin can cause focus wars between modals and select2 since the dropdown is outside the modal.        // 814\n            this.dropdown.on(\"click mouseup mousedown touchstart touchend focusin\", function (e) { e.stopPropagation(); });\n                                                                                                                       // 816\n            this.nextSearchTerm = undefined;                                                                           // 817\n                                                                                                                       // 818\n            if ($.isFunction(this.opts.initSelection)) {                                                               // 819\n                // initialize selection based on the current value of the source element                               // 820\n                this.initSelection();                                                                                  // 821\n                                                                                                                       // 822\n                // if the user has provided a function that can set selection based on the value of the source element // 823\n                // we monitor the change event on the element and trigger it, allowing for two way synchronization     // 824\n                this.monitorSource();                                                                                  // 825\n            }                                                                                                          // 826\n                                                                                                                       // 827\n            if (opts.maximumInputLength !== null) {                                                                    // 828\n                this.search.attr(\"maxlength\", opts.maximumInputLength);                                                // 829\n            }                                                                                                          // 830\n                                                                                                                       // 831\n            var disabled = opts.element.prop(\"disabled\");                                                              // 832\n            if (disabled === undefined) disabled = false;                                                              // 833\n            this.enable(!disabled);                                                                                    // 834\n                                                                                                                       // 835\n            var readonly = opts.element.prop(\"readonly\");                                                              // 836\n            if (readonly === undefined) readonly = false;                                                              // 837\n            this.readonly(readonly);                                                                                   // 838\n                                                                                                                       // 839\n            // Calculate size of scrollbar                                                                             // 840\n            scrollBarDimensions = scrollBarDimensions || measureScrollbar();                                           // 841\n                                                                                                                       // 842\n            this.autofocus = opts.element.prop(\"autofocus\");                                                           // 843\n            opts.element.prop(\"autofocus\", false);                                                                     // 844\n            if (this.autofocus) this.focus();                                                                          // 845\n                                                                                                                       // 846\n            this.search.attr(\"placeholder\", opts.searchInputPlaceholder);                                              // 847\n        },                                                                                                             // 848\n                                                                                                                       // 849\n        // abstract                                                                                                    // 850\n        destroy: function () {                                                                                         // 851\n            var element=this.opts.element, select2 = element.data(\"select2\"), self = this;                             // 852\n                                                                                                                       // 853\n            this.close();                                                                                              // 854\n                                                                                                                       // 855\n            if (element.length && element[0].detachEvent) {                                                            // 856\n                element.each(function () {                                                                             // 857\n                    this.detachEvent(\"onpropertychange\", self._sync);                                                  // 858\n                });                                                                                                    // 859\n            }                                                                                                          // 860\n            if (this.propertyObserver) {                                                                               // 861\n                this.propertyObserver.disconnect();                                                                    // 862\n                this.propertyObserver = null;                                                                          // 863\n            }                                                                                                          // 864\n            this._sync = null;                                                                                         // 865\n                                                                                                                       // 866\n            if (select2 !== undefined) {                                                                               // 867\n                select2.container.remove();                                                                            // 868\n                select2.liveRegion.remove();                                                                           // 869\n                select2.dropdown.remove();                                                                             // 870\n                element                                                                                                // 871\n                    .removeClass(\"select2-offscreen\")                                                                  // 872\n                    .removeData(\"select2\")                                                                             // 873\n                    .off(\".select2\")                                                                                   // 874\n                    .prop(\"autofocus\", this.autofocus || false);                                                       // 875\n                if (this.elementTabIndex) {                                                                            // 876\n                    element.attr({tabindex: this.elementTabIndex});                                                    // 877\n                } else {                                                                                               // 878\n                    element.removeAttr(\"tabindex\");                                                                    // 879\n                }                                                                                                      // 880\n                element.show();                                                                                        // 881\n            }                                                                                                          // 882\n                                                                                                                       // 883\n            cleanupJQueryElements.call(this,                                                                           // 884\n                \"container\",                                                                                           // 885\n                \"liveRegion\",                                                                                          // 886\n                \"dropdown\",                                                                                            // 887\n                \"results\",                                                                                             // 888\n                \"search\"                                                                                               // 889\n            );                                                                                                         // 890\n        },                                                                                                             // 891\n                                                                                                                       // 892\n        // abstract                                                                                                    // 893\n        optionToData: function(element) {                                                                              // 894\n            if (element.is(\"option\")) {                                                                                // 895\n                return {                                                                                               // 896\n                    id:element.prop(\"value\"),                                                                          // 897\n                    text:element.text(),                                                                               // 898\n                    element: element.get(),                                                                            // 899\n                    css: element.attr(\"class\"),                                                                        // 900\n                    disabled: element.prop(\"disabled\"),                                                                // 901\n                    locked: equal(element.attr(\"locked\"), \"locked\") || equal(element.data(\"locked\"), true)             // 902\n                };                                                                                                     // 903\n            } else if (element.is(\"optgroup\")) {                                                                       // 904\n                return {                                                                                               // 905\n                    text:element.attr(\"label\"),                                                                        // 906\n                    children:[],                                                                                       // 907\n                    element: element.get(),                                                                            // 908\n                    css: element.attr(\"class\")                                                                         // 909\n                };                                                                                                     // 910\n            }                                                                                                          // 911\n        },                                                                                                             // 912\n                                                                                                                       // 913\n        // abstract                                                                                                    // 914\n        prepareOpts: function (opts) {                                                                                 // 915\n            var element, select, idKey, ajaxUrl, self = this;                                                          // 916\n                                                                                                                       // 917\n            element = opts.element;                                                                                    // 918\n                                                                                                                       // 919\n            if (element.get(0).tagName.toLowerCase() === \"select\") {                                                   // 920\n                this.select = select = opts.element;                                                                   // 921\n            }                                                                                                          // 922\n                                                                                                                       // 923\n            if (select) {                                                                                              // 924\n                // these options are not allowed when attached to a select because they are picked up off the element itself\n                $.each([\"id\", \"multiple\", \"ajax\", \"query\", \"createSearchChoice\", \"initSelection\", \"data\", \"tags\"], function () {\n                    if (this in opts) {                                                                                // 927\n                        throw new Error(\"Option '\" + this + \"' is not allowed for Select2 when attached to a <select> element.\");\n                    }                                                                                                  // 929\n                });                                                                                                    // 930\n            }                                                                                                          // 931\n                                                                                                                       // 932\n            opts = $.extend({}, {                                                                                      // 933\n                populateResults: function(container, results, query) {                                                 // 934\n                    var populate, id=this.opts.id, liveRegion=this.liveRegion;                                         // 935\n                                                                                                                       // 936\n                    populate=function(results, container, depth) {                                                     // 937\n                                                                                                                       // 938\n                        var i, l, result, selectable, disabled, compound, node, label, innerContainer, formatted;      // 939\n                                                                                                                       // 940\n                        results = opts.sortResults(results, container, query);                                         // 941\n                                                                                                                       // 942\n                        // collect the created nodes for bulk append                                                   // 943\n                        var nodes = [];                                                                                // 944\n                        for (i = 0, l = results.length; i < l; i = i + 1) {                                            // 945\n                                                                                                                       // 946\n                            result=results[i];                                                                         // 947\n                                                                                                                       // 948\n                            disabled = (result.disabled === true);                                                     // 949\n                            selectable = (!disabled) && (id(result) !== undefined);                                    // 950\n                                                                                                                       // 951\n                            compound=result.children && result.children.length > 0;                                    // 952\n                                                                                                                       // 953\n                            node=$(\"<li></li>\");                                                                       // 954\n                            node.addClass(\"select2-results-dept-\"+depth);                                              // 955\n                            node.addClass(\"select2-result\");                                                           // 956\n                            node.addClass(selectable ? \"select2-result-selectable\" : \"select2-result-unselectable\");   // 957\n                            if (disabled) { node.addClass(\"select2-disabled\"); }                                       // 958\n                            if (compound) { node.addClass(\"select2-result-with-children\"); }                           // 959\n                            node.addClass(self.opts.formatResultCssClass(result));                                     // 960\n                            node.attr(\"role\", \"presentation\");                                                         // 961\n                                                                                                                       // 962\n                            label=$(document.createElement(\"div\"));                                                    // 963\n                            label.addClass(\"select2-result-label\");                                                    // 964\n                            label.attr(\"id\", \"select2-result-label-\" + nextUid());                                     // 965\n                            label.attr(\"role\", \"option\");                                                              // 966\n                                                                                                                       // 967\n                            formatted=opts.formatResult(result, label, query, self.opts.escapeMarkup);                 // 968\n                            if (formatted!==undefined) {                                                               // 969\n                                label.html(formatted);                                                                 // 970\n                                node.append(label);                                                                    // 971\n                            }                                                                                          // 972\n                                                                                                                       // 973\n                                                                                                                       // 974\n                            if (compound) {                                                                            // 975\n                                                                                                                       // 976\n                                innerContainer=$(\"<ul></ul>\");                                                         // 977\n                                innerContainer.addClass(\"select2-result-sub\");                                         // 978\n                                populate(result.children, innerContainer, depth+1);                                    // 979\n                                node.append(innerContainer);                                                           // 980\n                            }                                                                                          // 981\n                                                                                                                       // 982\n                            node.data(\"select2-data\", result);                                                         // 983\n                            nodes.push(node[0]);                                                                       // 984\n                        }                                                                                              // 985\n                                                                                                                       // 986\n                        // bulk append the created nodes                                                               // 987\n                        container.append(nodes);                                                                       // 988\n                        liveRegion.text(opts.formatMatches(results.length));                                           // 989\n                    };                                                                                                 // 990\n                                                                                                                       // 991\n                    populate(results, container, 0);                                                                   // 992\n                }                                                                                                      // 993\n            }, $.fn.select2.defaults, opts);                                                                           // 994\n                                                                                                                       // 995\n            if (typeof(opts.id) !== \"function\") {                                                                      // 996\n                idKey = opts.id;                                                                                       // 997\n                opts.id = function (e) { return e[idKey]; };                                                           // 998\n            }                                                                                                          // 999\n                                                                                                                       // 1000\n            if ($.isArray(opts.element.data(\"select2Tags\"))) {                                                         // 1001\n                if (\"tags\" in opts) {                                                                                  // 1002\n                    throw \"tags specified as both an attribute 'data-select2-tags' and in options of Select2 \" + opts.element.attr(\"id\");\n                }                                                                                                      // 1004\n                opts.tags=opts.element.data(\"select2Tags\");                                                            // 1005\n            }                                                                                                          // 1006\n                                                                                                                       // 1007\n            if (select) {                                                                                              // 1008\n                opts.query = this.bind(function (query) {                                                              // 1009\n                    var data = { results: [], more: false },                                                           // 1010\n                        term = query.term,                                                                             // 1011\n                        children, placeholderOption, process;                                                          // 1012\n                                                                                                                       // 1013\n                    process=function(element, collection) {                                                            // 1014\n                        var group;                                                                                     // 1015\n                        if (element.is(\"option\")) {                                                                    // 1016\n                            if (query.matcher(term, element.text(), element)) {                                        // 1017\n                                collection.push(self.optionToData(element));                                           // 1018\n                            }                                                                                          // 1019\n                        } else if (element.is(\"optgroup\")) {                                                           // 1020\n                            group=self.optionToData(element);                                                          // 1021\n                            element.children().each2(function(i, elm) { process(elm, group.children); });              // 1022\n                            if (group.children.length>0) {                                                             // 1023\n                                collection.push(group);                                                                // 1024\n                            }                                                                                          // 1025\n                        }                                                                                              // 1026\n                    };                                                                                                 // 1027\n                                                                                                                       // 1028\n                    children=element.children();                                                                       // 1029\n                                                                                                                       // 1030\n                    // ignore the placeholder option if there is one                                                   // 1031\n                    if (this.getPlaceholder() !== undefined && children.length > 0) {                                  // 1032\n                        placeholderOption = this.getPlaceholderOption();                                               // 1033\n                        if (placeholderOption) {                                                                       // 1034\n                            children=children.not(placeholderOption);                                                  // 1035\n                        }                                                                                              // 1036\n                    }                                                                                                  // 1037\n                                                                                                                       // 1038\n                    children.each2(function(i, elm) { process(elm, data.results); });                                  // 1039\n                                                                                                                       // 1040\n                    query.callback(data);                                                                              // 1041\n                });                                                                                                    // 1042\n                // this is needed because inside val() we construct choices from options and their id is hardcoded     // 1043\n                opts.id=function(e) { return e.id; };                                                                  // 1044\n            } else {                                                                                                   // 1045\n                if (!(\"query\" in opts)) {                                                                              // 1046\n                                                                                                                       // 1047\n                    if (\"ajax\" in opts) {                                                                              // 1048\n                        ajaxUrl = opts.element.data(\"ajax-url\");                                                       // 1049\n                        if (ajaxUrl && ajaxUrl.length > 0) {                                                           // 1050\n                            opts.ajax.url = ajaxUrl;                                                                   // 1051\n                        }                                                                                              // 1052\n                        opts.query = ajax.call(opts.element, opts.ajax);                                               // 1053\n                    } else if (\"data\" in opts) {                                                                       // 1054\n                        opts.query = local(opts.data);                                                                 // 1055\n                    } else if (\"tags\" in opts) {                                                                       // 1056\n                        opts.query = tags(opts.tags);                                                                  // 1057\n                        if (opts.createSearchChoice === undefined) {                                                   // 1058\n                            opts.createSearchChoice = function (term) { return {id: $.trim(term), text: $.trim(term)}; };\n                        }                                                                                              // 1060\n                        if (opts.initSelection === undefined) {                                                        // 1061\n                            opts.initSelection = function (element, callback) {                                        // 1062\n                                var data = [];                                                                         // 1063\n                                $(splitVal(element.val(), opts.separator)).each(function () {                          // 1064\n                                    var obj = { id: this, text: this },                                                // 1065\n                                        tags = opts.tags;                                                              // 1066\n                                    if ($.isFunction(tags)) tags=tags();                                               // 1067\n                                    $(tags).each(function() { if (equal(this.id, obj.id)) { obj = this; return false; } });\n                                    data.push(obj);                                                                    // 1069\n                                });                                                                                    // 1070\n                                                                                                                       // 1071\n                                callback(data);                                                                        // 1072\n                            };                                                                                         // 1073\n                        }                                                                                              // 1074\n                    }                                                                                                  // 1075\n                }                                                                                                      // 1076\n            }                                                                                                          // 1077\n            if (typeof(opts.query) !== \"function\") {                                                                   // 1078\n                throw \"query function not defined for Select2 \" + opts.element.attr(\"id\");                             // 1079\n            }                                                                                                          // 1080\n                                                                                                                       // 1081\n            if (opts.createSearchChoicePosition === 'top') {                                                           // 1082\n                opts.createSearchChoicePosition = function(list, item) { list.unshift(item); };                        // 1083\n            }                                                                                                          // 1084\n            else if (opts.createSearchChoicePosition === 'bottom') {                                                   // 1085\n                opts.createSearchChoicePosition = function(list, item) { list.push(item); };                           // 1086\n            }                                                                                                          // 1087\n            else if (typeof(opts.createSearchChoicePosition) !== \"function\")  {                                        // 1088\n                throw \"invalid createSearchChoicePosition option must be 'top', 'bottom' or a custom function\";        // 1089\n            }                                                                                                          // 1090\n                                                                                                                       // 1091\n            return opts;                                                                                               // 1092\n        },                                                                                                             // 1093\n                                                                                                                       // 1094\n        /**                                                                                                            // 1095\n         * Monitor the original element for changes and update select2 accordingly                                     // 1096\n         */                                                                                                            // 1097\n        // abstract                                                                                                    // 1098\n        monitorSource: function () {                                                                                   // 1099\n            var el = this.opts.element, observer, self = this;                                                         // 1100\n                                                                                                                       // 1101\n            el.on(\"change.select2\", this.bind(function (e) {                                                           // 1102\n                if (this.opts.element.data(\"select2-change-triggered\") !== true) {                                     // 1103\n                    this.initSelection();                                                                              // 1104\n                }                                                                                                      // 1105\n            }));                                                                                                       // 1106\n                                                                                                                       // 1107\n            this._sync = this.bind(function () {                                                                       // 1108\n                                                                                                                       // 1109\n                // sync enabled state                                                                                  // 1110\n                var disabled = el.prop(\"disabled\");                                                                    // 1111\n                if (disabled === undefined) disabled = false;                                                          // 1112\n                this.enable(!disabled);                                                                                // 1113\n                                                                                                                       // 1114\n                var readonly = el.prop(\"readonly\");                                                                    // 1115\n                if (readonly === undefined) readonly = false;                                                          // 1116\n                this.readonly(readonly);                                                                               // 1117\n                                                                                                                       // 1118\n                syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);                   // 1119\n                this.container.addClass(evaluate(this.opts.containerCssClass, this.opts.element));                     // 1120\n                                                                                                                       // 1121\n                syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);                     // 1122\n                this.dropdown.addClass(evaluate(this.opts.dropdownCssClass, this.opts.element));                       // 1123\n                                                                                                                       // 1124\n            });                                                                                                        // 1125\n                                                                                                                       // 1126\n            // IE8-10 (IE9/10 won't fire propertyChange via attachEventListener)                                       // 1127\n            if (el.length && el[0].attachEvent) {                                                                      // 1128\n                el.each(function() {                                                                                   // 1129\n                    this.attachEvent(\"onpropertychange\", self._sync);                                                  // 1130\n                });                                                                                                    // 1131\n            }                                                                                                          // 1132\n                                                                                                                       // 1133\n            // safari, chrome, firefox, IE11                                                                           // 1134\n            observer = window.MutationObserver || window.WebKitMutationObserver|| window.MozMutationObserver;          // 1135\n            if (observer !== undefined) {                                                                              // 1136\n                if (this.propertyObserver) { delete this.propertyObserver; this.propertyObserver = null; }             // 1137\n                this.propertyObserver = new observer(function (mutations) {                                            // 1138\n                    $.each(mutations, self._sync);                                                                     // 1139\n                });                                                                                                    // 1140\n                this.propertyObserver.observe(el.get(0), { attributes:true, subtree:false });                          // 1141\n            }                                                                                                          // 1142\n        },                                                                                                             // 1143\n                                                                                                                       // 1144\n        // abstract                                                                                                    // 1145\n        triggerSelect: function(data) {                                                                                // 1146\n            var evt = $.Event(\"select2-selecting\", { val: this.id(data), object: data, choice: data });                // 1147\n            this.opts.element.trigger(evt);                                                                            // 1148\n            return !evt.isDefaultPrevented();                                                                          // 1149\n        },                                                                                                             // 1150\n                                                                                                                       // 1151\n        /**                                                                                                            // 1152\n         * Triggers the change event on the source element                                                             // 1153\n         */                                                                                                            // 1154\n        // abstract                                                                                                    // 1155\n        triggerChange: function (details) {                                                                            // 1156\n                                                                                                                       // 1157\n            details = details || {};                                                                                   // 1158\n            details= $.extend({}, details, { type: \"change\", val: this.val() });                                       // 1159\n            // prevents recursive triggering                                                                           // 1160\n            this.opts.element.data(\"select2-change-triggered\", true);                                                  // 1161\n            this.opts.element.trigger(details);                                                                        // 1162\n            this.opts.element.data(\"select2-change-triggered\", false);                                                 // 1163\n                                                                                                                       // 1164\n            // some validation frameworks ignore the change event and listen instead to keyup, click for selects       // 1165\n            // so here we trigger the click event manually                                                             // 1166\n            this.opts.element.click();                                                                                 // 1167\n                                                                                                                       // 1168\n            // ValidationEngine ignores the change event and listens instead to blur                                   // 1169\n            // so here we trigger the blur event manually if so desired                                                // 1170\n            if (this.opts.blurOnChange)                                                                                // 1171\n                this.opts.element.blur();                                                                              // 1172\n        },                                                                                                             // 1173\n                                                                                                                       // 1174\n        //abstract                                                                                                     // 1175\n        isInterfaceEnabled: function()                                                                                 // 1176\n        {                                                                                                              // 1177\n            return this.enabledInterface === true;                                                                     // 1178\n        },                                                                                                             // 1179\n                                                                                                                       // 1180\n        // abstract                                                                                                    // 1181\n        enableInterface: function() {                                                                                  // 1182\n            var enabled = this._enabled && !this._readonly,                                                            // 1183\n                disabled = !enabled;                                                                                   // 1184\n                                                                                                                       // 1185\n            if (enabled === this.enabledInterface) return false;                                                       // 1186\n                                                                                                                       // 1187\n            this.container.toggleClass(\"select2-container-disabled\", disabled);                                        // 1188\n            this.close();                                                                                              // 1189\n            this.enabledInterface = enabled;                                                                           // 1190\n                                                                                                                       // 1191\n            return true;                                                                                               // 1192\n        },                                                                                                             // 1193\n                                                                                                                       // 1194\n        // abstract                                                                                                    // 1195\n        enable: function(enabled) {                                                                                    // 1196\n            if (enabled === undefined) enabled = true;                                                                 // 1197\n            if (this._enabled === enabled) return;                                                                     // 1198\n            this._enabled = enabled;                                                                                   // 1199\n                                                                                                                       // 1200\n            this.opts.element.prop(\"disabled\", !enabled);                                                              // 1201\n            this.enableInterface();                                                                                    // 1202\n        },                                                                                                             // 1203\n                                                                                                                       // 1204\n        // abstract                                                                                                    // 1205\n        disable: function() {                                                                                          // 1206\n            this.enable(false);                                                                                        // 1207\n        },                                                                                                             // 1208\n                                                                                                                       // 1209\n        // abstract                                                                                                    // 1210\n        readonly: function(enabled) {                                                                                  // 1211\n            if (enabled === undefined) enabled = false;                                                                // 1212\n            if (this._readonly === enabled) return;                                                                    // 1213\n            this._readonly = enabled;                                                                                  // 1214\n                                                                                                                       // 1215\n            this.opts.element.prop(\"readonly\", enabled);                                                               // 1216\n            this.enableInterface();                                                                                    // 1217\n        },                                                                                                             // 1218\n                                                                                                                       // 1219\n        // abstract                                                                                                    // 1220\n        opened: function () {                                                                                          // 1221\n            return (this.container) ? this.container.hasClass(\"select2-dropdown-open\") : false;                        // 1222\n        },                                                                                                             // 1223\n                                                                                                                       // 1224\n        // abstract                                                                                                    // 1225\n        positionDropdown: function() {                                                                                 // 1226\n            var $dropdown = this.dropdown,                                                                             // 1227\n                offset = this.container.offset(),                                                                      // 1228\n                height = this.container.outerHeight(false),                                                            // 1229\n                width = this.container.outerWidth(false),                                                              // 1230\n                dropHeight = $dropdown.outerHeight(false),                                                             // 1231\n                $window = $(window),                                                                                   // 1232\n                windowWidth = $window.width(),                                                                         // 1233\n                windowHeight = $window.height(),                                                                       // 1234\n                viewPortRight = $window.scrollLeft() + windowWidth,                                                    // 1235\n                viewportBottom = $window.scrollTop() + windowHeight,                                                   // 1236\n                dropTop = offset.top + height,                                                                         // 1237\n                dropLeft = offset.left,                                                                                // 1238\n                enoughRoomBelow = dropTop + dropHeight <= viewportBottom,                                              // 1239\n                enoughRoomAbove = (offset.top - dropHeight) >= $window.scrollTop(),                                    // 1240\n                dropWidth = $dropdown.outerWidth(false),                                                               // 1241\n                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight,                                             // 1242\n                aboveNow = $dropdown.hasClass(\"select2-drop-above\"),                                                   // 1243\n                bodyOffset,                                                                                            // 1244\n                above,                                                                                                 // 1245\n                changeDirection,                                                                                       // 1246\n                css,                                                                                                   // 1247\n                resultsListNode;                                                                                       // 1248\n                                                                                                                       // 1249\n            // always prefer the current above/below alignment, unless there is not enough room                        // 1250\n            if (aboveNow) {                                                                                            // 1251\n                above = true;                                                                                          // 1252\n                if (!enoughRoomAbove && enoughRoomBelow) {                                                             // 1253\n                    changeDirection = true;                                                                            // 1254\n                    above = false;                                                                                     // 1255\n                }                                                                                                      // 1256\n            } else {                                                                                                   // 1257\n                above = false;                                                                                         // 1258\n                if (!enoughRoomBelow && enoughRoomAbove) {                                                             // 1259\n                    changeDirection = true;                                                                            // 1260\n                    above = true;                                                                                      // 1261\n                }                                                                                                      // 1262\n            }                                                                                                          // 1263\n                                                                                                                       // 1264\n            //if we are changing direction we need to get positions when dropdown is hidden;                           // 1265\n            if (changeDirection) {                                                                                     // 1266\n                $dropdown.hide();                                                                                      // 1267\n                offset = this.container.offset();                                                                      // 1268\n                height = this.container.outerHeight(false);                                                            // 1269\n                width = this.container.outerWidth(false);                                                              // 1270\n                dropHeight = $dropdown.outerHeight(false);                                                             // 1271\n                viewPortRight = $window.scrollLeft() + windowWidth;                                                    // 1272\n                viewportBottom = $window.scrollTop() + windowHeight;                                                   // 1273\n                dropTop = offset.top + height;                                                                         // 1274\n                dropLeft = offset.left;                                                                                // 1275\n                dropWidth = $dropdown.outerWidth(false);                                                               // 1276\n                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight;                                             // 1277\n                $dropdown.show();                                                                                      // 1278\n                                                                                                                       // 1279\n                // fix so the cursor does not move to the left within the search-textbox in IE                         // 1280\n                this.focusSearch();                                                                                    // 1281\n            }                                                                                                          // 1282\n                                                                                                                       // 1283\n            if (this.opts.dropdownAutoWidth) {                                                                         // 1284\n                resultsListNode = $('.select2-results', $dropdown)[0];                                                 // 1285\n                $dropdown.addClass('select2-drop-auto-width');                                                         // 1286\n                $dropdown.css('width', '');                                                                            // 1287\n                // Add scrollbar width to dropdown if vertical scrollbar is present                                    // 1288\n                dropWidth = $dropdown.outerWidth(false) + (resultsListNode.scrollHeight === resultsListNode.clientHeight ? 0 : scrollBarDimensions.width);\n                dropWidth > width ? width = dropWidth : dropWidth = width;                                             // 1290\n                dropHeight = $dropdown.outerHeight(false);                                                             // 1291\n                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight;                                             // 1292\n            }                                                                                                          // 1293\n            else {                                                                                                     // 1294\n                this.container.removeClass('select2-drop-auto-width');                                                 // 1295\n            }                                                                                                          // 1296\n                                                                                                                       // 1297\n            //console.log(\"below/ droptop:\", dropTop, \"dropHeight\", dropHeight, \"sum\", (dropTop+dropHeight)+\" viewport bottom\", viewportBottom, \"enough?\", enoughRoomBelow);\n            //console.log(\"above/ offset.top\", offset.top, \"dropHeight\", dropHeight, \"top\", (offset.top-dropHeight), \"scrollTop\", this.body.scrollTop(), \"enough?\", enoughRoomAbove);\n                                                                                                                       // 1300\n            // fix positioning when body has an offset and is not position: static                                     // 1301\n            if (this.body.css('position') !== 'static') {                                                              // 1302\n                bodyOffset = this.body.offset();                                                                       // 1303\n                dropTop -= bodyOffset.top;                                                                             // 1304\n                dropLeft -= bodyOffset.left;                                                                           // 1305\n            }                                                                                                          // 1306\n                                                                                                                       // 1307\n            if (!enoughRoomOnRight) {                                                                                  // 1308\n                dropLeft = offset.left + this.container.outerWidth(false) - dropWidth;                                 // 1309\n            }                                                                                                          // 1310\n                                                                                                                       // 1311\n            css =  {                                                                                                   // 1312\n                left: dropLeft,                                                                                        // 1313\n                width: width                                                                                           // 1314\n            };                                                                                                         // 1315\n                                                                                                                       // 1316\n            if (above) {                                                                                               // 1317\n                css.top = offset.top - dropHeight;                                                                     // 1318\n                css.bottom = 'auto';                                                                                   // 1319\n                this.container.addClass(\"select2-drop-above\");                                                         // 1320\n                $dropdown.addClass(\"select2-drop-above\");                                                              // 1321\n            }                                                                                                          // 1322\n            else {                                                                                                     // 1323\n                css.top = dropTop;                                                                                     // 1324\n                css.bottom = 'auto';                                                                                   // 1325\n                this.container.removeClass(\"select2-drop-above\");                                                      // 1326\n                $dropdown.removeClass(\"select2-drop-above\");                                                           // 1327\n            }                                                                                                          // 1328\n            css = $.extend(css, evaluate(this.opts.dropdownCss, this.opts.element));                                   // 1329\n                                                                                                                       // 1330\n            $dropdown.css(css);                                                                                        // 1331\n        },                                                                                                             // 1332\n                                                                                                                       // 1333\n        // abstract                                                                                                    // 1334\n        shouldOpen: function() {                                                                                       // 1335\n            var event;                                                                                                 // 1336\n                                                                                                                       // 1337\n            if (this.opened()) return false;                                                                           // 1338\n                                                                                                                       // 1339\n            if (this._enabled === false || this._readonly === true) return false;                                      // 1340\n                                                                                                                       // 1341\n            event = $.Event(\"select2-opening\");                                                                        // 1342\n            this.opts.element.trigger(event);                                                                          // 1343\n            return !event.isDefaultPrevented();                                                                        // 1344\n        },                                                                                                             // 1345\n                                                                                                                       // 1346\n        // abstract                                                                                                    // 1347\n        clearDropdownAlignmentPreference: function() {                                                                 // 1348\n            // clear the classes used to figure out the preference of where the dropdown should be opened              // 1349\n            this.container.removeClass(\"select2-drop-above\");                                                          // 1350\n            this.dropdown.removeClass(\"select2-drop-above\");                                                           // 1351\n        },                                                                                                             // 1352\n                                                                                                                       // 1353\n        /**                                                                                                            // 1354\n         * Opens the dropdown                                                                                          // 1355\n         *                                                                                                             // 1356\n         * @return {Boolean} whether or not dropdown was opened. This method will return false if, for example,        // 1357\n         * the dropdown is already open, or if the 'open' event listener on the element called preventDefault().       // 1358\n         */                                                                                                            // 1359\n        // abstract                                                                                                    // 1360\n        open: function () {                                                                                            // 1361\n                                                                                                                       // 1362\n            if (!this.shouldOpen()) return false;                                                                      // 1363\n                                                                                                                       // 1364\n            this.opening();                                                                                            // 1365\n                                                                                                                       // 1366\n            // Only bind the document mousemove when the dropdown is visible                                           // 1367\n            $document.on(\"mousemove.select2Event\", function (e) {                                                      // 1368\n                lastMousePosition.x = e.pageX;                                                                         // 1369\n                lastMousePosition.y = e.pageY;                                                                         // 1370\n            });                                                                                                        // 1371\n                                                                                                                       // 1372\n            return true;                                                                                               // 1373\n        },                                                                                                             // 1374\n                                                                                                                       // 1375\n        /**                                                                                                            // 1376\n         * Performs the opening of the dropdown                                                                        // 1377\n         */                                                                                                            // 1378\n        // abstract                                                                                                    // 1379\n        opening: function() {                                                                                          // 1380\n            var cid = this.containerEventName,                                                                         // 1381\n                scroll = \"scroll.\" + cid,                                                                              // 1382\n                resize = \"resize.\"+cid,                                                                                // 1383\n                orient = \"orientationchange.\"+cid,                                                                     // 1384\n                mask;                                                                                                  // 1385\n                                                                                                                       // 1386\n            this.container.addClass(\"select2-dropdown-open\").addClass(\"select2-container-active\");                     // 1387\n                                                                                                                       // 1388\n            this.clearDropdownAlignmentPreference();                                                                   // 1389\n                                                                                                                       // 1390\n            if(this.dropdown[0] !== this.body.children().last()[0]) {                                                  // 1391\n                this.dropdown.detach().appendTo(this.body);                                                            // 1392\n            }                                                                                                          // 1393\n                                                                                                                       // 1394\n            // create the dropdown mask if doesn't already exist                                                       // 1395\n            mask = $(\"#select2-drop-mask\");                                                                            // 1396\n            if (mask.length == 0) {                                                                                    // 1397\n                mask = $(document.createElement(\"div\"));                                                               // 1398\n                mask.attr(\"id\",\"select2-drop-mask\").attr(\"class\",\"select2-drop-mask\");                                 // 1399\n                mask.hide();                                                                                           // 1400\n                mask.appendTo(this.body);                                                                              // 1401\n                mask.on(\"mousedown touchstart click\", function (e) {                                                   // 1402\n                    // Prevent IE from generating a click event on the body                                            // 1403\n                    reinsertElement(mask);                                                                             // 1404\n                                                                                                                       // 1405\n                    var dropdown = $(\"#select2-drop\"), self;                                                           // 1406\n                    if (dropdown.length > 0) {                                                                         // 1407\n                        self=dropdown.data(\"select2\");                                                                 // 1408\n                        if (self.opts.selectOnBlur) {                                                                  // 1409\n                            self.selectHighlighted({noFocus: true});                                                   // 1410\n                        }                                                                                              // 1411\n                        self.close();                                                                                  // 1412\n                        e.preventDefault();                                                                            // 1413\n                        e.stopPropagation();                                                                           // 1414\n                    }                                                                                                  // 1415\n                });                                                                                                    // 1416\n            }                                                                                                          // 1417\n                                                                                                                       // 1418\n            // ensure the mask is always right before the dropdown                                                     // 1419\n            if (this.dropdown.prev()[0] !== mask[0]) {                                                                 // 1420\n                this.dropdown.before(mask);                                                                            // 1421\n            }                                                                                                          // 1422\n                                                                                                                       // 1423\n            // move the global id to the correct dropdown                                                              // 1424\n            $(\"#select2-drop\").removeAttr(\"id\");                                                                       // 1425\n            this.dropdown.attr(\"id\", \"select2-drop\");                                                                  // 1426\n                                                                                                                       // 1427\n            // show the elements                                                                                       // 1428\n            mask.show();                                                                                               // 1429\n                                                                                                                       // 1430\n            this.positionDropdown();                                                                                   // 1431\n            this.dropdown.show();                                                                                      // 1432\n            this.positionDropdown();                                                                                   // 1433\n                                                                                                                       // 1434\n            this.dropdown.addClass(\"select2-drop-active\");                                                             // 1435\n                                                                                                                       // 1436\n            // attach listeners to events that can change the position of the container and thus require               // 1437\n            // the position of the dropdown to be updated as well so it does not come unglued from the container       // 1438\n            var that = this;                                                                                           // 1439\n            this.container.parents().add(window).each(function () {                                                    // 1440\n                $(this).on(resize+\" \"+scroll+\" \"+orient, function (e) {                                                // 1441\n                    if (that.opened()) that.positionDropdown();                                                        // 1442\n                });                                                                                                    // 1443\n            });                                                                                                        // 1444\n                                                                                                                       // 1445\n                                                                                                                       // 1446\n        },                                                                                                             // 1447\n                                                                                                                       // 1448\n        // abstract                                                                                                    // 1449\n        close: function () {                                                                                           // 1450\n            if (!this.opened()) return;                                                                                // 1451\n                                                                                                                       // 1452\n            var cid = this.containerEventName,                                                                         // 1453\n                scroll = \"scroll.\" + cid,                                                                              // 1454\n                resize = \"resize.\"+cid,                                                                                // 1455\n                orient = \"orientationchange.\"+cid;                                                                     // 1456\n                                                                                                                       // 1457\n            // unbind event listeners                                                                                  // 1458\n            this.container.parents().add(window).each(function () { $(this).off(scroll).off(resize).off(orient); });   // 1459\n                                                                                                                       // 1460\n            this.clearDropdownAlignmentPreference();                                                                   // 1461\n                                                                                                                       // 1462\n            $(\"#select2-drop-mask\").hide();                                                                            // 1463\n            this.dropdown.removeAttr(\"id\"); // only the active dropdown has the select2-drop id                        // 1464\n            this.dropdown.hide();                                                                                      // 1465\n            this.container.removeClass(\"select2-dropdown-open\").removeClass(\"select2-container-active\");               // 1466\n            this.results.empty();                                                                                      // 1467\n                                                                                                                       // 1468\n            // Now that the dropdown is closed, unbind the global document mousemove event                             // 1469\n            $document.off(\"mousemove.select2Event\");                                                                   // 1470\n                                                                                                                       // 1471\n            this.clearSearch();                                                                                        // 1472\n            this.search.removeClass(\"select2-active\");                                                                 // 1473\n            this.opts.element.trigger($.Event(\"select2-close\"));                                                       // 1474\n        },                                                                                                             // 1475\n                                                                                                                       // 1476\n        /**                                                                                                            // 1477\n         * Opens control, sets input value, and updates results.                                                       // 1478\n         */                                                                                                            // 1479\n        // abstract                                                                                                    // 1480\n        externalSearch: function (term) {                                                                              // 1481\n            this.open();                                                                                               // 1482\n            this.search.val(term);                                                                                     // 1483\n            this.updateResults(false);                                                                                 // 1484\n        },                                                                                                             // 1485\n                                                                                                                       // 1486\n        // abstract                                                                                                    // 1487\n        clearSearch: function () {                                                                                     // 1488\n                                                                                                                       // 1489\n        },                                                                                                             // 1490\n                                                                                                                       // 1491\n        //abstract                                                                                                     // 1492\n        getMaximumSelectionSize: function() {                                                                          // 1493\n            return evaluate(this.opts.maximumSelectionSize, this.opts.element);                                        // 1494\n        },                                                                                                             // 1495\n                                                                                                                       // 1496\n        // abstract                                                                                                    // 1497\n        ensureHighlightVisible: function () {                                                                          // 1498\n            var results = this.results, children, index, child, hb, rb, y, more, topOffset;                            // 1499\n                                                                                                                       // 1500\n            index = this.highlight();                                                                                  // 1501\n                                                                                                                       // 1502\n            if (index < 0) return;                                                                                     // 1503\n                                                                                                                       // 1504\n            if (index == 0) {                                                                                          // 1505\n                                                                                                                       // 1506\n                // if the first element is highlighted scroll all the way to the top,                                  // 1507\n                // that way any unselectable headers above it will also be scrolled                                    // 1508\n                // into view                                                                                           // 1509\n                                                                                                                       // 1510\n                results.scrollTop(0);                                                                                  // 1511\n                return;                                                                                                // 1512\n            }                                                                                                          // 1513\n                                                                                                                       // 1514\n            children = this.findHighlightableChoices().find('.select2-result-label');                                  // 1515\n                                                                                                                       // 1516\n            child = $(children[index]);                                                                                // 1517\n                                                                                                                       // 1518\n            topOffset = (child.offset() || {}).top || 0;                                                               // 1519\n                                                                                                                       // 1520\n            hb = topOffset + child.outerHeight(true);                                                                  // 1521\n                                                                                                                       // 1522\n            // if this is the last child lets also make sure select2-more-results is visible                           // 1523\n            if (index === children.length - 1) {                                                                       // 1524\n                more = results.find(\"li.select2-more-results\");                                                        // 1525\n                if (more.length > 0) {                                                                                 // 1526\n                    hb = more.offset().top + more.outerHeight(true);                                                   // 1527\n                }                                                                                                      // 1528\n            }                                                                                                          // 1529\n                                                                                                                       // 1530\n            rb = results.offset().top + results.outerHeight(true);                                                     // 1531\n            if (hb > rb) {                                                                                             // 1532\n                results.scrollTop(results.scrollTop() + (hb - rb));                                                    // 1533\n            }                                                                                                          // 1534\n            y = topOffset - results.offset().top;                                                                      // 1535\n                                                                                                                       // 1536\n            // make sure the top of the element is visible                                                             // 1537\n            if (y < 0 && child.css('display') != 'none' ) {                                                            // 1538\n                results.scrollTop(results.scrollTop() + y); // y is negative                                           // 1539\n            }                                                                                                          // 1540\n        },                                                                                                             // 1541\n                                                                                                                       // 1542\n        // abstract                                                                                                    // 1543\n        findHighlightableChoices: function() {                                                                         // 1544\n            return this.results.find(\".select2-result-selectable:not(.select2-disabled):not(.select2-selected)\");      // 1545\n        },                                                                                                             // 1546\n                                                                                                                       // 1547\n        // abstract                                                                                                    // 1548\n        moveHighlight: function (delta) {                                                                              // 1549\n            var choices = this.findHighlightableChoices(),                                                             // 1550\n                index = this.highlight();                                                                              // 1551\n                                                                                                                       // 1552\n            while (index > -1 && index < choices.length) {                                                             // 1553\n                index += delta;                                                                                        // 1554\n                var choice = $(choices[index]);                                                                        // 1555\n                if (choice.hasClass(\"select2-result-selectable\") && !choice.hasClass(\"select2-disabled\") && !choice.hasClass(\"select2-selected\")) {\n                    this.highlight(index);                                                                             // 1557\n                    break;                                                                                             // 1558\n                }                                                                                                      // 1559\n            }                                                                                                          // 1560\n        },                                                                                                             // 1561\n                                                                                                                       // 1562\n        // abstract                                                                                                    // 1563\n        highlight: function (index) {                                                                                  // 1564\n            var choices = this.findHighlightableChoices(),                                                             // 1565\n                choice,                                                                                                // 1566\n                data;                                                                                                  // 1567\n                                                                                                                       // 1568\n            if (arguments.length === 0) {                                                                              // 1569\n                return indexOf(choices.filter(\".select2-highlighted\")[0], choices.get());                              // 1570\n            }                                                                                                          // 1571\n                                                                                                                       // 1572\n            if (index >= choices.length) index = choices.length - 1;                                                   // 1573\n            if (index < 0) index = 0;                                                                                  // 1574\n                                                                                                                       // 1575\n            this.removeHighlight();                                                                                    // 1576\n                                                                                                                       // 1577\n            choice = $(choices[index]);                                                                                // 1578\n            choice.addClass(\"select2-highlighted\");                                                                    // 1579\n                                                                                                                       // 1580\n            // ensure assistive technology can determine the active choice                                             // 1581\n            this.search.attr(\"aria-activedescendant\", choice.find(\".select2-result-label\").attr(\"id\"));                // 1582\n                                                                                                                       // 1583\n            this.ensureHighlightVisible();                                                                             // 1584\n                                                                                                                       // 1585\n            this.liveRegion.text(choice.text());                                                                       // 1586\n                                                                                                                       // 1587\n            data = choice.data(\"select2-data\");                                                                        // 1588\n            if (data) {                                                                                                // 1589\n                this.opts.element.trigger({ type: \"select2-highlight\", val: this.id(data), choice: data });            // 1590\n            }                                                                                                          // 1591\n        },                                                                                                             // 1592\n                                                                                                                       // 1593\n        removeHighlight: function() {                                                                                  // 1594\n            this.results.find(\".select2-highlighted\").removeClass(\"select2-highlighted\");                              // 1595\n        },                                                                                                             // 1596\n                                                                                                                       // 1597\n        touchMoved: function() {                                                                                       // 1598\n            this._touchMoved = true;                                                                                   // 1599\n        },                                                                                                             // 1600\n                                                                                                                       // 1601\n        clearTouchMoved: function() {                                                                                  // 1602\n          this._touchMoved = false;                                                                                    // 1603\n        },                                                                                                             // 1604\n                                                                                                                       // 1605\n        // abstract                                                                                                    // 1606\n        countSelectableResults: function() {                                                                           // 1607\n            return this.findHighlightableChoices().length;                                                             // 1608\n        },                                                                                                             // 1609\n                                                                                                                       // 1610\n        // abstract                                                                                                    // 1611\n        highlightUnderEvent: function (event) {                                                                        // 1612\n            var el = $(event.target).closest(\".select2-result-selectable\");                                            // 1613\n            if (el.length > 0 && !el.is(\".select2-highlighted\")) {                                                     // 1614\n                var choices = this.findHighlightableChoices();                                                         // 1615\n                this.highlight(choices.index(el));                                                                     // 1616\n            } else if (el.length == 0) {                                                                               // 1617\n                // if we are over an unselectable item remove all highlights                                           // 1618\n                this.removeHighlight();                                                                                // 1619\n            }                                                                                                          // 1620\n        },                                                                                                             // 1621\n                                                                                                                       // 1622\n        // abstract                                                                                                    // 1623\n        loadMoreIfNeeded: function () {                                                                                // 1624\n            var results = this.results,                                                                                // 1625\n                more = results.find(\"li.select2-more-results\"),                                                        // 1626\n                below, // pixels the element is below the scroll fold, below==0 is when the element is starting to be visible\n                page = this.resultsPage + 1,                                                                           // 1628\n                self=this,                                                                                             // 1629\n                term=this.search.val(),                                                                                // 1630\n                context=this.context;                                                                                  // 1631\n                                                                                                                       // 1632\n            if (more.length === 0) return;                                                                             // 1633\n            below = more.offset().top - results.offset().top - results.height();                                       // 1634\n                                                                                                                       // 1635\n            if (below <= this.opts.loadMorePadding) {                                                                  // 1636\n                more.addClass(\"select2-active\");                                                                       // 1637\n                this.opts.query({                                                                                      // 1638\n                        element: this.opts.element,                                                                    // 1639\n                        term: term,                                                                                    // 1640\n                        page: page,                                                                                    // 1641\n                        context: context,                                                                              // 1642\n                        matcher: this.opts.matcher,                                                                    // 1643\n                        callback: this.bind(function (data) {                                                          // 1644\n                                                                                                                       // 1645\n                    // ignore a response if the select2 has been closed before it was received                         // 1646\n                    if (!self.opened()) return;                                                                        // 1647\n                                                                                                                       // 1648\n                                                                                                                       // 1649\n                    self.opts.populateResults.call(this, results, data.results, {term: term, page: page, context:context});\n                    self.postprocessResults(data, false, false);                                                       // 1651\n                                                                                                                       // 1652\n                    if (data.more===true) {                                                                            // 1653\n                        more.detach().appendTo(results).text(evaluate(self.opts.formatLoadMore, self.opts.element, page+1));\n                        window.setTimeout(function() { self.loadMoreIfNeeded(); }, 10);                                // 1655\n                    } else {                                                                                           // 1656\n                        more.remove();                                                                                 // 1657\n                    }                                                                                                  // 1658\n                    self.positionDropdown();                                                                           // 1659\n                    self.resultsPage = page;                                                                           // 1660\n                    self.context = data.context;                                                                       // 1661\n                    this.opts.element.trigger({ type: \"select2-loaded\", items: data });                                // 1662\n                })});                                                                                                  // 1663\n            }                                                                                                          // 1664\n        },                                                                                                             // 1665\n                                                                                                                       // 1666\n        /**                                                                                                            // 1667\n         * Default tokenizer function which does nothing                                                               // 1668\n         */                                                                                                            // 1669\n        tokenize: function() {                                                                                         // 1670\n                                                                                                                       // 1671\n        },                                                                                                             // 1672\n                                                                                                                       // 1673\n        /**                                                                                                            // 1674\n         * @param initial whether or not this is the call to this method right after the dropdown has been opened      // 1675\n         */                                                                                                            // 1676\n        // abstract                                                                                                    // 1677\n        updateResults: function (initial) {                                                                            // 1678\n            var search = this.search,                                                                                  // 1679\n                results = this.results,                                                                                // 1680\n                opts = this.opts,                                                                                      // 1681\n                data,                                                                                                  // 1682\n                self = this,                                                                                           // 1683\n                input,                                                                                                 // 1684\n                term = search.val(),                                                                                   // 1685\n                lastTerm = $.data(this.container, \"select2-last-term\"),                                                // 1686\n                // sequence number used to drop out-of-order responses                                                 // 1687\n                queryNumber;                                                                                           // 1688\n                                                                                                                       // 1689\n            // prevent duplicate queries against the same term                                                         // 1690\n            if (initial !== true && lastTerm && equal(term, lastTerm)) return;                                         // 1691\n                                                                                                                       // 1692\n            $.data(this.container, \"select2-last-term\", term);                                                         // 1693\n                                                                                                                       // 1694\n            // if the search is currently hidden we do not alter the results                                           // 1695\n            if (initial !== true && (this.showSearchInput === false || !this.opened())) {                              // 1696\n                return;                                                                                                // 1697\n            }                                                                                                          // 1698\n                                                                                                                       // 1699\n            function postRender() {                                                                                    // 1700\n                search.removeClass(\"select2-active\");                                                                  // 1701\n                self.positionDropdown();                                                                               // 1702\n                if (results.find('.select2-no-results,.select2-selection-limit,.select2-searching').length) {          // 1703\n                    self.liveRegion.text(results.text());                                                              // 1704\n                }                                                                                                      // 1705\n                else {                                                                                                 // 1706\n                    self.liveRegion.text(self.opts.formatMatches(results.find('.select2-result-selectable').length));  // 1707\n                }                                                                                                      // 1708\n            }                                                                                                          // 1709\n                                                                                                                       // 1710\n            function render(html) {                                                                                    // 1711\n                results.html(html);                                                                                    // 1712\n                postRender();                                                                                          // 1713\n            }                                                                                                          // 1714\n                                                                                                                       // 1715\n            queryNumber = ++this.queryCount;                                                                           // 1716\n                                                                                                                       // 1717\n            var maxSelSize = this.getMaximumSelectionSize();                                                           // 1718\n            if (maxSelSize >=1) {                                                                                      // 1719\n                data = this.data();                                                                                    // 1720\n                if ($.isArray(data) && data.length >= maxSelSize && checkFormatter(opts.formatSelectionTooBig, \"formatSelectionTooBig\")) {\n                    render(\"<li class='select2-selection-limit'>\" + evaluate(opts.formatSelectionTooBig, opts.element, maxSelSize) + \"</li>\");\n                    return;                                                                                            // 1723\n                }                                                                                                      // 1724\n            }                                                                                                          // 1725\n                                                                                                                       // 1726\n            if (search.val().length < opts.minimumInputLength) {                                                       // 1727\n                if (checkFormatter(opts.formatInputTooShort, \"formatInputTooShort\")) {                                 // 1728\n                    render(\"<li class='select2-no-results'>\" + evaluate(opts.formatInputTooShort, opts.element, search.val(), opts.minimumInputLength) + \"</li>\");\n                } else {                                                                                               // 1730\n                    render(\"\");                                                                                        // 1731\n                }                                                                                                      // 1732\n                if (initial && this.showSearch) this.showSearch(true);                                                 // 1733\n                return;                                                                                                // 1734\n            }                                                                                                          // 1735\n                                                                                                                       // 1736\n            if (opts.maximumInputLength && search.val().length > opts.maximumInputLength) {                            // 1737\n                if (checkFormatter(opts.formatInputTooLong, \"formatInputTooLong\")) {                                   // 1738\n                    render(\"<li class='select2-no-results'>\" + evaluate(opts.formatInputTooLong, opts.element, search.val(), opts.maximumInputLength) + \"</li>\");\n                } else {                                                                                               // 1740\n                    render(\"\");                                                                                        // 1741\n                }                                                                                                      // 1742\n                return;                                                                                                // 1743\n            }                                                                                                          // 1744\n                                                                                                                       // 1745\n            if (opts.formatSearching && this.findHighlightableChoices().length === 0) {                                // 1746\n                render(\"<li class='select2-searching'>\" + evaluate(opts.formatSearching, opts.element) + \"</li>\");     // 1747\n            }                                                                                                          // 1748\n                                                                                                                       // 1749\n            search.addClass(\"select2-active\");                                                                         // 1750\n                                                                                                                       // 1751\n            this.removeHighlight();                                                                                    // 1752\n                                                                                                                       // 1753\n            // give the tokenizer a chance to pre-process the input                                                    // 1754\n            input = this.tokenize();                                                                                   // 1755\n            if (input != undefined && input != null) {                                                                 // 1756\n                search.val(input);                                                                                     // 1757\n            }                                                                                                          // 1758\n                                                                                                                       // 1759\n            this.resultsPage = 1;                                                                                      // 1760\n                                                                                                                       // 1761\n            opts.query({                                                                                               // 1762\n                element: opts.element,                                                                                 // 1763\n                    term: search.val(),                                                                                // 1764\n                    page: this.resultsPage,                                                                            // 1765\n                    context: null,                                                                                     // 1766\n                    matcher: opts.matcher,                                                                             // 1767\n                    callback: this.bind(function (data) {                                                              // 1768\n                var def; // default choice                                                                             // 1769\n                                                                                                                       // 1770\n                // ignore old responses                                                                                // 1771\n                if (queryNumber != this.queryCount) {                                                                  // 1772\n                  return;                                                                                              // 1773\n                }                                                                                                      // 1774\n                                                                                                                       // 1775\n                // ignore a response if the select2 has been closed before it was received                             // 1776\n                if (!this.opened()) {                                                                                  // 1777\n                    this.search.removeClass(\"select2-active\");                                                         // 1778\n                    return;                                                                                            // 1779\n                }                                                                                                      // 1780\n                                                                                                                       // 1781\n                // handle ajax error                                                                                   // 1782\n                if(data.hasError !== undefined && checkFormatter(opts.formatAjaxError, \"formatAjaxError\")) {           // 1783\n                    render(\"<li class='select2-ajax-error'>\" + evaluate(opts.formatAjaxError, opts.element, data.jqXHR, data.textStatus, data.errorThrown) + \"</li>\");\n                    return;                                                                                            // 1785\n                }                                                                                                      // 1786\n                                                                                                                       // 1787\n                // save context, if any                                                                                // 1788\n                this.context = (data.context===undefined) ? null : data.context;                                       // 1789\n                // create a default choice and prepend it to the list                                                  // 1790\n                if (this.opts.createSearchChoice && search.val() !== \"\") {                                             // 1791\n                    def = this.opts.createSearchChoice.call(self, search.val(), data.results);                         // 1792\n                    if (def !== undefined && def !== null && self.id(def) !== undefined && self.id(def) !== null) {    // 1793\n                        if ($(data.results).filter(                                                                    // 1794\n                            function () {                                                                              // 1795\n                                return equal(self.id(this), self.id(def));                                             // 1796\n                            }).length === 0) {                                                                         // 1797\n                            this.opts.createSearchChoicePosition(data.results, def);                                   // 1798\n                        }                                                                                              // 1799\n                    }                                                                                                  // 1800\n                }                                                                                                      // 1801\n                                                                                                                       // 1802\n                if (data.results.length === 0 && checkFormatter(opts.formatNoMatches, \"formatNoMatches\")) {            // 1803\n                    render(\"<li class='select2-no-results'>\" + evaluate(opts.formatNoMatches, opts.element, search.val()) + \"</li>\");\n                    return;                                                                                            // 1805\n                }                                                                                                      // 1806\n                                                                                                                       // 1807\n                results.empty();                                                                                       // 1808\n                self.opts.populateResults.call(this, results, data.results, {term: search.val(), page: this.resultsPage, context:null});\n                                                                                                                       // 1810\n                if (data.more === true && checkFormatter(opts.formatLoadMore, \"formatLoadMore\")) {                     // 1811\n                    results.append(\"<li class='select2-more-results'>\" + opts.escapeMarkup(evaluate(opts.formatLoadMore, opts.element, this.resultsPage)) + \"</li>\");\n                    window.setTimeout(function() { self.loadMoreIfNeeded(); }, 10);                                    // 1813\n                }                                                                                                      // 1814\n                                                                                                                       // 1815\n                this.postprocessResults(data, initial);                                                                // 1816\n                                                                                                                       // 1817\n                postRender();                                                                                          // 1818\n                                                                                                                       // 1819\n                this.opts.element.trigger({ type: \"select2-loaded\", items: data });                                    // 1820\n            })});                                                                                                      // 1821\n        },                                                                                                             // 1822\n                                                                                                                       // 1823\n        // abstract                                                                                                    // 1824\n        cancel: function () {                                                                                          // 1825\n            this.close();                                                                                              // 1826\n        },                                                                                                             // 1827\n                                                                                                                       // 1828\n        // abstract                                                                                                    // 1829\n        blur: function () {                                                                                            // 1830\n            // if selectOnBlur == true, select the currently highlighted option                                        // 1831\n            if (this.opts.selectOnBlur)                                                                                // 1832\n                this.selectHighlighted({noFocus: true});                                                               // 1833\n                                                                                                                       // 1834\n            this.close();                                                                                              // 1835\n            this.container.removeClass(\"select2-container-active\");                                                    // 1836\n            // synonymous to .is(':focus'), which is available in jquery >= 1.6                                        // 1837\n            if (this.search[0] === document.activeElement) { this.search.blur(); }                                     // 1838\n            this.clearSearch();                                                                                        // 1839\n            this.selection.find(\".select2-search-choice-focus\").removeClass(\"select2-search-choice-focus\");            // 1840\n        },                                                                                                             // 1841\n                                                                                                                       // 1842\n        // abstract                                                                                                    // 1843\n        focusSearch: function () {                                                                                     // 1844\n            focus(this.search);                                                                                        // 1845\n        },                                                                                                             // 1846\n                                                                                                                       // 1847\n        // abstract                                                                                                    // 1848\n        selectHighlighted: function (options) {                                                                        // 1849\n            if (this._touchMoved) {                                                                                    // 1850\n              this.clearTouchMoved();                                                                                  // 1851\n              return;                                                                                                  // 1852\n            }                                                                                                          // 1853\n            var index=this.highlight(),                                                                                // 1854\n                highlighted=this.results.find(\".select2-highlighted\"),                                                 // 1855\n                data = highlighted.closest('.select2-result').data(\"select2-data\");                                    // 1856\n                                                                                                                       // 1857\n            if (data) {                                                                                                // 1858\n                this.highlight(index);                                                                                 // 1859\n                this.onSelect(data, options);                                                                          // 1860\n            } else if (options && options.noFocus) {                                                                   // 1861\n                this.close();                                                                                          // 1862\n            }                                                                                                          // 1863\n        },                                                                                                             // 1864\n                                                                                                                       // 1865\n        // abstract                                                                                                    // 1866\n        getPlaceholder: function () {                                                                                  // 1867\n            var placeholderOption;                                                                                     // 1868\n            return this.opts.element.attr(\"placeholder\") ||                                                            // 1869\n                this.opts.element.attr(\"data-placeholder\") || // jquery 1.4 compat                                     // 1870\n                this.opts.element.data(\"placeholder\") ||                                                               // 1871\n                this.opts.placeholder ||                                                                               // 1872\n                ((placeholderOption = this.getPlaceholderOption()) !== undefined ? placeholderOption.text() : undefined);\n        },                                                                                                             // 1874\n                                                                                                                       // 1875\n        // abstract                                                                                                    // 1876\n        getPlaceholderOption: function() {                                                                             // 1877\n            if (this.select) {                                                                                         // 1878\n                var firstOption = this.select.children('option').first();                                              // 1879\n                if (this.opts.placeholderOption !== undefined ) {                                                      // 1880\n                    //Determine the placeholder option based on the specified placeholderOption setting                // 1881\n                    return (this.opts.placeholderOption === \"first\" && firstOption) ||                                 // 1882\n                           (typeof this.opts.placeholderOption === \"function\" && this.opts.placeholderOption(this.select));\n                } else if ($.trim(firstOption.text()) === \"\" && firstOption.val() === \"\") {                            // 1884\n                    //No explicit placeholder option specified, use the first if it's blank                            // 1885\n                    return firstOption;                                                                                // 1886\n                }                                                                                                      // 1887\n            }                                                                                                          // 1888\n        },                                                                                                             // 1889\n                                                                                                                       // 1890\n        /**                                                                                                            // 1891\n         * Get the desired width for the container element.  This is                                                   // 1892\n         * derived first from option `width` passed to select2, then                                                   // 1893\n         * the inline 'style' on the original element, and finally                                                     // 1894\n         * falls back to the jQuery calculated element width.                                                          // 1895\n         */                                                                                                            // 1896\n        // abstract                                                                                                    // 1897\n        initContainerWidth: function () {                                                                              // 1898\n            function resolveContainerWidth() {                                                                         // 1899\n                var style, attrs, matches, i, l, attr;                                                                 // 1900\n                                                                                                                       // 1901\n                if (this.opts.width === \"off\") {                                                                       // 1902\n                    return null;                                                                                       // 1903\n                } else if (this.opts.width === \"element\"){                                                             // 1904\n                    return this.opts.element.outerWidth(false) === 0 ? 'auto' : this.opts.element.outerWidth(false) + 'px';\n                } else if (this.opts.width === \"copy\" || this.opts.width === \"resolve\") {                              // 1906\n                    // check if there is inline style on the element that contains width                               // 1907\n                    style = this.opts.element.attr('style');                                                           // 1908\n                    if (style !== undefined) {                                                                         // 1909\n                        attrs = style.split(';');                                                                      // 1910\n                        for (i = 0, l = attrs.length; i < l; i = i + 1) {                                              // 1911\n                            attr = attrs[i].replace(/\\s/g, '');                                                        // 1912\n                            matches = attr.match(/^width:(([-+]?([0-9]*\\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i);     // 1913\n                            if (matches !== null && matches.length >= 1)                                               // 1914\n                                return matches[1];                                                                     // 1915\n                        }                                                                                              // 1916\n                    }                                                                                                  // 1917\n                                                                                                                       // 1918\n                    if (this.opts.width === \"resolve\") {                                                               // 1919\n                        // next check if css('width') can resolve a width that is percent based, this is sometimes possible\n                        // when attached to input type=hidden or elements hidden via css                               // 1921\n                        style = this.opts.element.css('width');                                                        // 1922\n                        if (style.indexOf(\"%\") > 0) return style;                                                      // 1923\n                                                                                                                       // 1924\n                        // finally, fallback on the calculated width of the element                                    // 1925\n                        return (this.opts.element.outerWidth(false) === 0 ? 'auto' : this.opts.element.outerWidth(false) + 'px');\n                    }                                                                                                  // 1927\n                                                                                                                       // 1928\n                    return null;                                                                                       // 1929\n                } else if ($.isFunction(this.opts.width)) {                                                            // 1930\n                    return this.opts.width();                                                                          // 1931\n                } else {                                                                                               // 1932\n                    return this.opts.width;                                                                            // 1933\n               }                                                                                                       // 1934\n            };                                                                                                         // 1935\n                                                                                                                       // 1936\n            var width = resolveContainerWidth.call(this);                                                              // 1937\n            if (width !== null) {                                                                                      // 1938\n                this.container.css(\"width\", width);                                                                    // 1939\n            }                                                                                                          // 1940\n        }                                                                                                              // 1941\n    });                                                                                                                // 1942\n                                                                                                                       // 1943\n    SingleSelect2 = clazz(AbstractSelect2, {                                                                           // 1944\n                                                                                                                       // 1945\n        // single                                                                                                      // 1946\n                                                                                                                       // 1947\n        createContainer: function () {                                                                                 // 1948\n            var container = $(document.createElement(\"div\")).attr({                                                    // 1949\n                \"class\": \"select2-container\"                                                                           // 1950\n            }).html([                                                                                                  // 1951\n                \"<a href='javascript:void(0)' class='select2-choice' tabindex='-1'>\",                                  // 1952\n                \"   <span class='select2-chosen'>&#160;</span><abbr class='select2-search-choice-close'></abbr>\",      // 1953\n                \"   <span class='select2-arrow' role='presentation'><b role='presentation'></b></span>\",               // 1954\n                \"</a>\",                                                                                                // 1955\n                \"<label for='' class='select2-offscreen'></label>\",                                                    // 1956\n                \"<input class='select2-focusser select2-offscreen' type='text' aria-haspopup='true' role='button' />\", // 1957\n                \"<div class='select2-drop select2-display-none'>\",                                                     // 1958\n                \"   <div class='select2-search'>\",                                                                     // 1959\n                \"       <label for='' class='select2-offscreen'></label>\",                                             // 1960\n                \"       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input' role='combobox' aria-expanded='true'\",\n                \"       aria-autocomplete='list' />\",                                                                  // 1962\n                \"   </div>\",                                                                                           // 1963\n                \"   <ul class='select2-results' role='listbox'>\",                                                      // 1964\n                \"   </ul>\",                                                                                            // 1965\n                \"</div>\"].join(\"\"));                                                                                   // 1966\n            return container;                                                                                          // 1967\n        },                                                                                                             // 1968\n                                                                                                                       // 1969\n        // single                                                                                                      // 1970\n        enableInterface: function() {                                                                                  // 1971\n            if (this.parent.enableInterface.apply(this, arguments)) {                                                  // 1972\n                this.focusser.prop(\"disabled\", !this.isInterfaceEnabled());                                            // 1973\n            }                                                                                                          // 1974\n        },                                                                                                             // 1975\n                                                                                                                       // 1976\n        // single                                                                                                      // 1977\n        opening: function () {                                                                                         // 1978\n            var el, range, len;                                                                                        // 1979\n                                                                                                                       // 1980\n            if (this.opts.minimumResultsForSearch >= 0) {                                                              // 1981\n                this.showSearch(true);                                                                                 // 1982\n            }                                                                                                          // 1983\n                                                                                                                       // 1984\n            this.parent.opening.apply(this, arguments);                                                                // 1985\n                                                                                                                       // 1986\n            if (this.showSearchInput !== false) {                                                                      // 1987\n                // IE appends focusser.val() at the end of field :/ so we manually insert it at the beginning using a range\n                // all other browsers handle this just fine                                                            // 1989\n                                                                                                                       // 1990\n                this.search.val(this.focusser.val());                                                                  // 1991\n            }                                                                                                          // 1992\n            if (this.opts.shouldFocusInput(this)) {                                                                    // 1993\n                this.search.focus();                                                                                   // 1994\n                // move the cursor to the end after focussing, otherwise it will be at the beginning and               // 1995\n                // new text will appear *before* focusser.val()                                                        // 1996\n                el = this.search.get(0);                                                                               // 1997\n                if (el.createTextRange) {                                                                              // 1998\n                    range = el.createTextRange();                                                                      // 1999\n                    range.collapse(false);                                                                             // 2000\n                    range.select();                                                                                    // 2001\n                } else if (el.setSelectionRange) {                                                                     // 2002\n                    len = this.search.val().length;                                                                    // 2003\n                    el.setSelectionRange(len, len);                                                                    // 2004\n                }                                                                                                      // 2005\n            }                                                                                                          // 2006\n                                                                                                                       // 2007\n            // initializes search's value with nextSearchTerm (if defined by user)                                     // 2008\n            // ignore nextSearchTerm if the dropdown is opened by the user pressing a letter                           // 2009\n            if(this.search.val() === \"\") {                                                                             // 2010\n                if(this.nextSearchTerm != undefined){                                                                  // 2011\n                    this.search.val(this.nextSearchTerm);                                                              // 2012\n                    this.search.select();                                                                              // 2013\n                }                                                                                                      // 2014\n            }                                                                                                          // 2015\n                                                                                                                       // 2016\n            this.focusser.prop(\"disabled\", true).val(\"\");                                                              // 2017\n            this.updateResults(true);                                                                                  // 2018\n            this.opts.element.trigger($.Event(\"select2-open\"));                                                        // 2019\n        },                                                                                                             // 2020\n                                                                                                                       // 2021\n        // single                                                                                                      // 2022\n        close: function () {                                                                                           // 2023\n            if (!this.opened()) return;                                                                                // 2024\n            this.parent.close.apply(this, arguments);                                                                  // 2025\n                                                                                                                       // 2026\n            this.focusser.prop(\"disabled\", false);                                                                     // 2027\n                                                                                                                       // 2028\n            if (this.opts.shouldFocusInput(this)) {                                                                    // 2029\n                this.focusser.focus();                                                                                 // 2030\n            }                                                                                                          // 2031\n        },                                                                                                             // 2032\n                                                                                                                       // 2033\n        // single                                                                                                      // 2034\n        focus: function () {                                                                                           // 2035\n            if (this.opened()) {                                                                                       // 2036\n                this.close();                                                                                          // 2037\n            } else {                                                                                                   // 2038\n                this.focusser.prop(\"disabled\", false);                                                                 // 2039\n                if (this.opts.shouldFocusInput(this)) {                                                                // 2040\n                    this.focusser.focus();                                                                             // 2041\n                }                                                                                                      // 2042\n            }                                                                                                          // 2043\n        },                                                                                                             // 2044\n                                                                                                                       // 2045\n        // single                                                                                                      // 2046\n        isFocused: function () {                                                                                       // 2047\n            return this.container.hasClass(\"select2-container-active\");                                                // 2048\n        },                                                                                                             // 2049\n                                                                                                                       // 2050\n        // single                                                                                                      // 2051\n        cancel: function () {                                                                                          // 2052\n            this.parent.cancel.apply(this, arguments);                                                                 // 2053\n            this.focusser.prop(\"disabled\", false);                                                                     // 2054\n                                                                                                                       // 2055\n            if (this.opts.shouldFocusInput(this)) {                                                                    // 2056\n                this.focusser.focus();                                                                                 // 2057\n            }                                                                                                          // 2058\n        },                                                                                                             // 2059\n                                                                                                                       // 2060\n        // single                                                                                                      // 2061\n        destroy: function() {                                                                                          // 2062\n            $(\"label[for='\" + this.focusser.attr('id') + \"']\")                                                         // 2063\n                .attr('for', this.opts.element.attr(\"id\"));                                                            // 2064\n            this.parent.destroy.apply(this, arguments);                                                                // 2065\n                                                                                                                       // 2066\n            cleanupJQueryElements.call(this,                                                                           // 2067\n                \"selection\",                                                                                           // 2068\n                \"focusser\"                                                                                             // 2069\n            );                                                                                                         // 2070\n        },                                                                                                             // 2071\n                                                                                                                       // 2072\n        // single                                                                                                      // 2073\n        initContainer: function () {                                                                                   // 2074\n                                                                                                                       // 2075\n            var selection,                                                                                             // 2076\n                container = this.container,                                                                            // 2077\n                dropdown = this.dropdown,                                                                              // 2078\n                idSuffix = nextUid(),                                                                                  // 2079\n                elementLabel;                                                                                          // 2080\n                                                                                                                       // 2081\n            if (this.opts.minimumResultsForSearch < 0) {                                                               // 2082\n                this.showSearch(false);                                                                                // 2083\n            } else {                                                                                                   // 2084\n                this.showSearch(true);                                                                                 // 2085\n            }                                                                                                          // 2086\n                                                                                                                       // 2087\n            this.selection = selection = container.find(\".select2-choice\");                                            // 2088\n                                                                                                                       // 2089\n            this.focusser = container.find(\".select2-focusser\");                                                       // 2090\n                                                                                                                       // 2091\n            // add aria associations                                                                                   // 2092\n            selection.find(\".select2-chosen\").attr(\"id\", \"select2-chosen-\"+idSuffix);                                  // 2093\n            this.focusser.attr(\"aria-labelledby\", \"select2-chosen-\"+idSuffix);                                         // 2094\n            this.results.attr(\"id\", \"select2-results-\"+idSuffix);                                                      // 2095\n            this.search.attr(\"aria-owns\", \"select2-results-\"+idSuffix);                                                // 2096\n                                                                                                                       // 2097\n            // rewrite labels from original element to focusser                                                        // 2098\n            this.focusser.attr(\"id\", \"s2id_autogen\"+idSuffix);                                                         // 2099\n                                                                                                                       // 2100\n            elementLabel = $(\"label[for='\" + this.opts.element.attr(\"id\") + \"']\");                                     // 2101\n                                                                                                                       // 2102\n            this.focusser.prev()                                                                                       // 2103\n                .text(elementLabel.text())                                                                             // 2104\n                .attr('for', this.focusser.attr('id'));                                                                // 2105\n                                                                                                                       // 2106\n            // Ensure the original element retains an accessible name                                                  // 2107\n            var originalTitle = this.opts.element.attr(\"title\");                                                       // 2108\n            this.opts.element.attr(\"title\", (originalTitle || elementLabel.text()));                                   // 2109\n                                                                                                                       // 2110\n            this.focusser.attr(\"tabindex\", this.elementTabIndex);                                                      // 2111\n                                                                                                                       // 2112\n            // write label for search field using the label from the focusser element                                  // 2113\n            this.search.attr(\"id\", this.focusser.attr('id') + '_search');                                              // 2114\n                                                                                                                       // 2115\n            this.search.prev()                                                                                         // 2116\n                .text($(\"label[for='\" + this.focusser.attr('id') + \"']\").text())                                       // 2117\n                .attr('for', this.search.attr('id'));                                                                  // 2118\n                                                                                                                       // 2119\n            this.search.on(\"keydown\", this.bind(function (e) {                                                         // 2120\n                if (!this.isInterfaceEnabled()) return;                                                                // 2121\n                                                                                                                       // 2122\n                // filter 229 keyCodes (input method editor is processing key input)                                   // 2123\n                if (229 == e.keyCode) return;                                                                          // 2124\n                                                                                                                       // 2125\n                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {                                            // 2126\n                    // prevent the page from scrolling                                                                 // 2127\n                    killEvent(e);                                                                                      // 2128\n                    return;                                                                                            // 2129\n                }                                                                                                      // 2130\n                                                                                                                       // 2131\n                switch (e.which) {                                                                                     // 2132\n                    case KEY.UP:                                                                                       // 2133\n                    case KEY.DOWN:                                                                                     // 2134\n                        this.moveHighlight((e.which === KEY.UP) ? -1 : 1);                                             // 2135\n                        killEvent(e);                                                                                  // 2136\n                        return;                                                                                        // 2137\n                    case KEY.ENTER:                                                                                    // 2138\n                        this.selectHighlighted();                                                                      // 2139\n                        killEvent(e);                                                                                  // 2140\n                        return;                                                                                        // 2141\n                    case KEY.TAB:                                                                                      // 2142\n                        this.selectHighlighted({noFocus: true});                                                       // 2143\n                        return;                                                                                        // 2144\n                    case KEY.ESC:                                                                                      // 2145\n                        this.cancel(e);                                                                                // 2146\n                        killEvent(e);                                                                                  // 2147\n                        return;                                                                                        // 2148\n                }                                                                                                      // 2149\n            }));                                                                                                       // 2150\n                                                                                                                       // 2151\n            this.search.on(\"blur\", this.bind(function(e) {                                                             // 2152\n                // a workaround for chrome to keep the search field focussed when the scroll bar is used to scroll the dropdown.\n                // without this the search field loses focus which is annoying                                         // 2154\n                if (document.activeElement === this.body.get(0)) {                                                     // 2155\n                    window.setTimeout(this.bind(function() {                                                           // 2156\n                        if (this.opened()) {                                                                           // 2157\n                            this.search.focus();                                                                       // 2158\n                        }                                                                                              // 2159\n                    }), 0);                                                                                            // 2160\n                }                                                                                                      // 2161\n            }));                                                                                                       // 2162\n                                                                                                                       // 2163\n            this.focusser.on(\"keydown\", this.bind(function (e) {                                                       // 2164\n                if (!this.isInterfaceEnabled()) return;                                                                // 2165\n                                                                                                                       // 2166\n                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {          // 2167\n                    return;                                                                                            // 2168\n                }                                                                                                      // 2169\n                                                                                                                       // 2170\n                if (this.opts.openOnEnter === false && e.which === KEY.ENTER) {                                        // 2171\n                    killEvent(e);                                                                                      // 2172\n                    return;                                                                                            // 2173\n                }                                                                                                      // 2174\n                                                                                                                       // 2175\n                if (e.which == KEY.DOWN || e.which == KEY.UP                                                           // 2176\n                    || (e.which == KEY.ENTER && this.opts.openOnEnter)) {                                              // 2177\n                                                                                                                       // 2178\n                    if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) return;                                      // 2179\n                                                                                                                       // 2180\n                    this.open();                                                                                       // 2181\n                    killEvent(e);                                                                                      // 2182\n                    return;                                                                                            // 2183\n                }                                                                                                      // 2184\n                                                                                                                       // 2185\n                if (e.which == KEY.DELETE || e.which == KEY.BACKSPACE) {                                               // 2186\n                    if (this.opts.allowClear) {                                                                        // 2187\n                        this.clear();                                                                                  // 2188\n                    }                                                                                                  // 2189\n                    killEvent(e);                                                                                      // 2190\n                    return;                                                                                            // 2191\n                }                                                                                                      // 2192\n            }));                                                                                                       // 2193\n                                                                                                                       // 2194\n                                                                                                                       // 2195\n            installKeyUpChangeEvent(this.focusser);                                                                    // 2196\n            this.focusser.on(\"keyup-change input\", this.bind(function(e) {                                             // 2197\n                if (this.opts.minimumResultsForSearch >= 0) {                                                          // 2198\n                    e.stopPropagation();                                                                               // 2199\n                    if (this.opened()) return;                                                                         // 2200\n                    this.open();                                                                                       // 2201\n                }                                                                                                      // 2202\n            }));                                                                                                       // 2203\n                                                                                                                       // 2204\n            selection.on(\"mousedown touchstart\", \"abbr\", this.bind(function (e) {                                      // 2205\n                if (!this.isInterfaceEnabled()) return;                                                                // 2206\n                this.clear();                                                                                          // 2207\n                killEventImmediately(e);                                                                               // 2208\n                this.close();                                                                                          // 2209\n                this.selection.focus();                                                                                // 2210\n            }));                                                                                                       // 2211\n                                                                                                                       // 2212\n            selection.on(\"mousedown touchstart\", this.bind(function (e) {                                              // 2213\n                // Prevent IE from generating a click event on the body                                                // 2214\n                reinsertElement(selection);                                                                            // 2215\n                                                                                                                       // 2216\n                if (!this.container.hasClass(\"select2-container-active\")) {                                            // 2217\n                    this.opts.element.trigger($.Event(\"select2-focus\"));                                               // 2218\n                }                                                                                                      // 2219\n                                                                                                                       // 2220\n                if (this.opened()) {                                                                                   // 2221\n                    this.close();                                                                                      // 2222\n                } else if (this.isInterfaceEnabled()) {                                                                // 2223\n                    this.open();                                                                                       // 2224\n                }                                                                                                      // 2225\n                                                                                                                       // 2226\n                killEvent(e);                                                                                          // 2227\n            }));                                                                                                       // 2228\n                                                                                                                       // 2229\n            dropdown.on(\"mousedown touchstart\", this.bind(function() {                                                 // 2230\n                if (this.opts.shouldFocusInput(this)) {                                                                // 2231\n                    this.search.focus();                                                                               // 2232\n                }                                                                                                      // 2233\n            }));                                                                                                       // 2234\n                                                                                                                       // 2235\n            selection.on(\"focus\", this.bind(function(e) {                                                              // 2236\n                killEvent(e);                                                                                          // 2237\n            }));                                                                                                       // 2238\n                                                                                                                       // 2239\n            this.focusser.on(\"focus\", this.bind(function(){                                                            // 2240\n                if (!this.container.hasClass(\"select2-container-active\")) {                                            // 2241\n                    this.opts.element.trigger($.Event(\"select2-focus\"));                                               // 2242\n                }                                                                                                      // 2243\n                this.container.addClass(\"select2-container-active\");                                                   // 2244\n            })).on(\"blur\", this.bind(function() {                                                                      // 2245\n                if (!this.opened()) {                                                                                  // 2246\n                    this.container.removeClass(\"select2-container-active\");                                            // 2247\n                    this.opts.element.trigger($.Event(\"select2-blur\"));                                                // 2248\n                }                                                                                                      // 2249\n            }));                                                                                                       // 2250\n            this.search.on(\"focus\", this.bind(function(){                                                              // 2251\n                if (!this.container.hasClass(\"select2-container-active\")) {                                            // 2252\n                    this.opts.element.trigger($.Event(\"select2-focus\"));                                               // 2253\n                }                                                                                                      // 2254\n                this.container.addClass(\"select2-container-active\");                                                   // 2255\n            }));                                                                                                       // 2256\n                                                                                                                       // 2257\n            this.initContainerWidth();                                                                                 // 2258\n            this.opts.element.addClass(\"select2-offscreen\");                                                           // 2259\n            this.setPlaceholder();                                                                                     // 2260\n                                                                                                                       // 2261\n        },                                                                                                             // 2262\n                                                                                                                       // 2263\n        // single                                                                                                      // 2264\n        clear: function(triggerChange) {                                                                               // 2265\n            var data=this.selection.data(\"select2-data\");                                                              // 2266\n            if (data) { // guard against queued quick consecutive clicks                                               // 2267\n                var evt = $.Event(\"select2-clearing\");                                                                 // 2268\n                this.opts.element.trigger(evt);                                                                        // 2269\n                if (evt.isDefaultPrevented()) {                                                                        // 2270\n                    return;                                                                                            // 2271\n                }                                                                                                      // 2272\n                var placeholderOption = this.getPlaceholderOption();                                                   // 2273\n                this.opts.element.val(placeholderOption ? placeholderOption.val() : \"\");                               // 2274\n                this.selection.find(\".select2-chosen\").empty();                                                        // 2275\n                this.selection.removeData(\"select2-data\");                                                             // 2276\n                this.setPlaceholder();                                                                                 // 2277\n                                                                                                                       // 2278\n                if (triggerChange !== false){                                                                          // 2279\n                    this.opts.element.trigger({ type: \"select2-removed\", val: this.id(data), choice: data });          // 2280\n                    this.triggerChange({removed:data});                                                                // 2281\n                }                                                                                                      // 2282\n            }                                                                                                          // 2283\n        },                                                                                                             // 2284\n                                                                                                                       // 2285\n        /**                                                                                                            // 2286\n         * Sets selection based on source element's value                                                              // 2287\n         */                                                                                                            // 2288\n        // single                                                                                                      // 2289\n        initSelection: function () {                                                                                   // 2290\n            var selected;                                                                                              // 2291\n            if (this.isPlaceholderOptionSelected()) {                                                                  // 2292\n                this.updateSelection(null);                                                                            // 2293\n                this.close();                                                                                          // 2294\n                this.setPlaceholder();                                                                                 // 2295\n            } else {                                                                                                   // 2296\n                var self = this;                                                                                       // 2297\n                this.opts.initSelection.call(null, this.opts.element, function(selected){                              // 2298\n                    if (selected !== undefined && selected !== null) {                                                 // 2299\n                        self.updateSelection(selected);                                                                // 2300\n                        self.close();                                                                                  // 2301\n                        self.setPlaceholder();                                                                         // 2302\n                        self.nextSearchTerm = self.opts.nextSearchTerm(selected, self.search.val());                   // 2303\n                    }                                                                                                  // 2304\n                });                                                                                                    // 2305\n            }                                                                                                          // 2306\n        },                                                                                                             // 2307\n                                                                                                                       // 2308\n        isPlaceholderOptionSelected: function() {                                                                      // 2309\n            var placeholderOption;                                                                                     // 2310\n            if (this.getPlaceholder() === undefined) return false; // no placeholder specified so no option should be considered\n            return ((placeholderOption = this.getPlaceholderOption()) !== undefined && placeholderOption.prop(\"selected\"))\n                || (this.opts.element.val() === \"\")                                                                    // 2313\n                || (this.opts.element.val() === undefined)                                                             // 2314\n                || (this.opts.element.val() === null);                                                                 // 2315\n        },                                                                                                             // 2316\n                                                                                                                       // 2317\n        // single                                                                                                      // 2318\n        prepareOpts: function () {                                                                                     // 2319\n            var opts = this.parent.prepareOpts.apply(this, arguments),                                                 // 2320\n                self=this;                                                                                             // 2321\n                                                                                                                       // 2322\n            if (opts.element.get(0).tagName.toLowerCase() === \"select\") {                                              // 2323\n                // install the selection initializer                                                                   // 2324\n                opts.initSelection = function (element, callback) {                                                    // 2325\n                    var selected = element.find(\"option\").filter(function() { return this.selected && !this.disabled });\n                    // a single select box always has a value, no need to null check 'selected'                        // 2327\n                    callback(self.optionToData(selected));                                                             // 2328\n                };                                                                                                     // 2329\n            } else if (\"data\" in opts) {                                                                               // 2330\n                // install default initSelection when applied to hidden input and data is local                        // 2331\n                opts.initSelection = opts.initSelection || function (element, callback) {                              // 2332\n                    var id = element.val();                                                                            // 2333\n                    //search in data by id, storing the actual matching item                                           // 2334\n                    var match = null;                                                                                  // 2335\n                    opts.query({                                                                                       // 2336\n                        matcher: function(term, text, el){                                                             // 2337\n                            var is_match = equal(id, opts.id(el));                                                     // 2338\n                            if (is_match) {                                                                            // 2339\n                                match = el;                                                                            // 2340\n                            }                                                                                          // 2341\n                            return is_match;                                                                           // 2342\n                        },                                                                                             // 2343\n                        callback: !$.isFunction(callback) ? $.noop : function() {                                      // 2344\n                            callback(match);                                                                           // 2345\n                        }                                                                                              // 2346\n                    });                                                                                                // 2347\n                };                                                                                                     // 2348\n            }                                                                                                          // 2349\n                                                                                                                       // 2350\n            return opts;                                                                                               // 2351\n        },                                                                                                             // 2352\n                                                                                                                       // 2353\n        // single                                                                                                      // 2354\n        getPlaceholder: function() {                                                                                   // 2355\n            // if a placeholder is specified on a single select without a valid placeholder option ignore it           // 2356\n            if (this.select) {                                                                                         // 2357\n                if (this.getPlaceholderOption() === undefined) {                                                       // 2358\n                    return undefined;                                                                                  // 2359\n                }                                                                                                      // 2360\n            }                                                                                                          // 2361\n                                                                                                                       // 2362\n            return this.parent.getPlaceholder.apply(this, arguments);                                                  // 2363\n        },                                                                                                             // 2364\n                                                                                                                       // 2365\n        // single                                                                                                      // 2366\n        setPlaceholder: function () {                                                                                  // 2367\n            var placeholder = this.getPlaceholder();                                                                   // 2368\n                                                                                                                       // 2369\n            if (this.isPlaceholderOptionSelected() && placeholder !== undefined) {                                     // 2370\n                                                                                                                       // 2371\n                // check for a placeholder option if attached to a select                                              // 2372\n                if (this.select && this.getPlaceholderOption() === undefined) return;                                  // 2373\n                                                                                                                       // 2374\n                this.selection.find(\".select2-chosen\").html(this.opts.escapeMarkup(placeholder));                      // 2375\n                                                                                                                       // 2376\n                this.selection.addClass(\"select2-default\");                                                            // 2377\n                                                                                                                       // 2378\n                this.container.removeClass(\"select2-allowclear\");                                                      // 2379\n            }                                                                                                          // 2380\n        },                                                                                                             // 2381\n                                                                                                                       // 2382\n        // single                                                                                                      // 2383\n        postprocessResults: function (data, initial, noHighlightUpdate) {                                              // 2384\n            var selected = 0, self = this, showSearchInput = true;                                                     // 2385\n                                                                                                                       // 2386\n            // find the selected element in the result list                                                            // 2387\n                                                                                                                       // 2388\n            this.findHighlightableChoices().each2(function (i, elm) {                                                  // 2389\n                if (equal(self.id(elm.data(\"select2-data\")), self.opts.element.val())) {                               // 2390\n                    selected = i;                                                                                      // 2391\n                    return false;                                                                                      // 2392\n                }                                                                                                      // 2393\n            });                                                                                                        // 2394\n                                                                                                                       // 2395\n            // and highlight it                                                                                        // 2396\n            if (noHighlightUpdate !== false) {                                                                         // 2397\n                if (initial === true && selected >= 0) {                                                               // 2398\n                    this.highlight(selected);                                                                          // 2399\n                } else {                                                                                               // 2400\n                    this.highlight(0);                                                                                 // 2401\n                }                                                                                                      // 2402\n            }                                                                                                          // 2403\n                                                                                                                       // 2404\n            // hide the search box if this is the first we got the results and there are enough of them for search     // 2405\n                                                                                                                       // 2406\n            if (initial === true) {                                                                                    // 2407\n                var min = this.opts.minimumResultsForSearch;                                                           // 2408\n                if (min >= 0) {                                                                                        // 2409\n                    this.showSearch(countResults(data.results) >= min);                                                // 2410\n                }                                                                                                      // 2411\n            }                                                                                                          // 2412\n        },                                                                                                             // 2413\n                                                                                                                       // 2414\n        // single                                                                                                      // 2415\n        showSearch: function(showSearchInput) {                                                                        // 2416\n            if (this.showSearchInput === showSearchInput) return;                                                      // 2417\n                                                                                                                       // 2418\n            this.showSearchInput = showSearchInput;                                                                    // 2419\n                                                                                                                       // 2420\n            this.dropdown.find(\".select2-search\").toggleClass(\"select2-search-hidden\", !showSearchInput);              // 2421\n            this.dropdown.find(\".select2-search\").toggleClass(\"select2-offscreen\", !showSearchInput);                  // 2422\n            //add \"select2-with-searchbox\" to the container if search box is shown                                     // 2423\n            $(this.dropdown, this.container).toggleClass(\"select2-with-searchbox\", showSearchInput);                   // 2424\n        },                                                                                                             // 2425\n                                                                                                                       // 2426\n        // single                                                                                                      // 2427\n        onSelect: function (data, options) {                                                                           // 2428\n                                                                                                                       // 2429\n            if (!this.triggerSelect(data)) { return; }                                                                 // 2430\n                                                                                                                       // 2431\n            var old = this.opts.element.val(),                                                                         // 2432\n                oldData = this.data();                                                                                 // 2433\n                                                                                                                       // 2434\n            this.opts.element.val(this.id(data));                                                                      // 2435\n            this.updateSelection(data);                                                                                // 2436\n                                                                                                                       // 2437\n            this.opts.element.trigger({ type: \"select2-selected\", val: this.id(data), choice: data });                 // 2438\n                                                                                                                       // 2439\n            this.nextSearchTerm = this.opts.nextSearchTerm(data, this.search.val());                                   // 2440\n            this.close();                                                                                              // 2441\n                                                                                                                       // 2442\n            if ((!options || !options.noFocus) && this.opts.shouldFocusInput(this)) {                                  // 2443\n                this.focusser.focus();                                                                                 // 2444\n            }                                                                                                          // 2445\n                                                                                                                       // 2446\n            if (!equal(old, this.id(data))) {                                                                          // 2447\n                this.triggerChange({ added: data, removed: oldData });                                                 // 2448\n            }                                                                                                          // 2449\n        },                                                                                                             // 2450\n                                                                                                                       // 2451\n        // single                                                                                                      // 2452\n        updateSelection: function (data) {                                                                             // 2453\n                                                                                                                       // 2454\n            var container=this.selection.find(\".select2-chosen\"), formatted, cssClass;                                 // 2455\n                                                                                                                       // 2456\n            this.selection.data(\"select2-data\", data);                                                                 // 2457\n                                                                                                                       // 2458\n            container.empty();                                                                                         // 2459\n            if (data !== null) {                                                                                       // 2460\n                formatted=this.opts.formatSelection(data, container, this.opts.escapeMarkup);                          // 2461\n            }                                                                                                          // 2462\n            if (formatted !== undefined) {                                                                             // 2463\n                container.append(formatted);                                                                           // 2464\n            }                                                                                                          // 2465\n            cssClass=this.opts.formatSelectionCssClass(data, container);                                               // 2466\n            if (cssClass !== undefined) {                                                                              // 2467\n                container.addClass(cssClass);                                                                          // 2468\n            }                                                                                                          // 2469\n                                                                                                                       // 2470\n            this.selection.removeClass(\"select2-default\");                                                             // 2471\n                                                                                                                       // 2472\n            if (this.opts.allowClear && this.getPlaceholder() !== undefined) {                                         // 2473\n                this.container.addClass(\"select2-allowclear\");                                                         // 2474\n            }                                                                                                          // 2475\n        },                                                                                                             // 2476\n                                                                                                                       // 2477\n        // single                                                                                                      // 2478\n        val: function () {                                                                                             // 2479\n            var val,                                                                                                   // 2480\n                triggerChange = false,                                                                                 // 2481\n                data = null,                                                                                           // 2482\n                self = this,                                                                                           // 2483\n                oldData = this.data();                                                                                 // 2484\n                                                                                                                       // 2485\n            if (arguments.length === 0) {                                                                              // 2486\n                return this.opts.element.val();                                                                        // 2487\n            }                                                                                                          // 2488\n                                                                                                                       // 2489\n            val = arguments[0];                                                                                        // 2490\n                                                                                                                       // 2491\n            if (arguments.length > 1) {                                                                                // 2492\n                triggerChange = arguments[1];                                                                          // 2493\n            }                                                                                                          // 2494\n                                                                                                                       // 2495\n            if (this.select) {                                                                                         // 2496\n                this.select                                                                                            // 2497\n                    .val(val)                                                                                          // 2498\n                    .find(\"option\").filter(function() { return this.selected }).each2(function (i, elm) {              // 2499\n                        data = self.optionToData(elm);                                                                 // 2500\n                        return false;                                                                                  // 2501\n                    });                                                                                                // 2502\n                this.updateSelection(data);                                                                            // 2503\n                this.setPlaceholder();                                                                                 // 2504\n                if (triggerChange) {                                                                                   // 2505\n                    this.triggerChange({added: data, removed:oldData});                                                // 2506\n                }                                                                                                      // 2507\n            } else {                                                                                                   // 2508\n                // val is an id. !val is true for [undefined,null,'',0] - 0 is legal                                   // 2509\n                if (!val && val !== 0) {                                                                               // 2510\n                    this.clear(triggerChange);                                                                         // 2511\n                    return;                                                                                            // 2512\n                }                                                                                                      // 2513\n                if (this.opts.initSelection === undefined) {                                                           // 2514\n                    throw new Error(\"cannot call val() if initSelection() is not defined\");                            // 2515\n                }                                                                                                      // 2516\n                this.opts.element.val(val);                                                                            // 2517\n                this.opts.initSelection(this.opts.element, function(data){                                             // 2518\n                    self.opts.element.val(!data ? \"\" : self.id(data));                                                 // 2519\n                    self.updateSelection(data);                                                                        // 2520\n                    self.setPlaceholder();                                                                             // 2521\n                    if (triggerChange) {                                                                               // 2522\n                        self.triggerChange({added: data, removed:oldData});                                            // 2523\n                    }                                                                                                  // 2524\n                });                                                                                                    // 2525\n            }                                                                                                          // 2526\n        },                                                                                                             // 2527\n                                                                                                                       // 2528\n        // single                                                                                                      // 2529\n        clearSearch: function () {                                                                                     // 2530\n            this.search.val(\"\");                                                                                       // 2531\n            this.focusser.val(\"\");                                                                                     // 2532\n        },                                                                                                             // 2533\n                                                                                                                       // 2534\n        // single                                                                                                      // 2535\n        data: function(value) {                                                                                        // 2536\n            var data,                                                                                                  // 2537\n                triggerChange = false;                                                                                 // 2538\n                                                                                                                       // 2539\n            if (arguments.length === 0) {                                                                              // 2540\n                data = this.selection.data(\"select2-data\");                                                            // 2541\n                if (data == undefined) data = null;                                                                    // 2542\n                return data;                                                                                           // 2543\n            } else {                                                                                                   // 2544\n                if (arguments.length > 1) {                                                                            // 2545\n                    triggerChange = arguments[1];                                                                      // 2546\n                }                                                                                                      // 2547\n                if (!value) {                                                                                          // 2548\n                    this.clear(triggerChange);                                                                         // 2549\n                } else {                                                                                               // 2550\n                    data = this.data();                                                                                // 2551\n                    this.opts.element.val(!value ? \"\" : this.id(value));                                               // 2552\n                    this.updateSelection(value);                                                                       // 2553\n                    if (triggerChange) {                                                                               // 2554\n                        this.triggerChange({added: value, removed:data});                                              // 2555\n                    }                                                                                                  // 2556\n                }                                                                                                      // 2557\n            }                                                                                                          // 2558\n        }                                                                                                              // 2559\n    });                                                                                                                // 2560\n                                                                                                                       // 2561\n    MultiSelect2 = clazz(AbstractSelect2, {                                                                            // 2562\n                                                                                                                       // 2563\n        // multi                                                                                                       // 2564\n        createContainer: function () {                                                                                 // 2565\n            var container = $(document.createElement(\"div\")).attr({                                                    // 2566\n                \"class\": \"select2-container select2-container-multi\"                                                   // 2567\n            }).html([                                                                                                  // 2568\n                \"<ul class='select2-choices'>\",                                                                        // 2569\n                \"  <li class='select2-search-field'>\",                                                                 // 2570\n                \"    <label for='' class='select2-offscreen'></label>\",                                                // 2571\n                \"    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>\",\n                \"  </li>\",                                                                                             // 2573\n                \"</ul>\",                                                                                               // 2574\n                \"<div class='select2-drop select2-drop-multi select2-display-none'>\",                                  // 2575\n                \"   <ul class='select2-results'>\",                                                                     // 2576\n                \"   </ul>\",                                                                                            // 2577\n                \"</div>\"].join(\"\"));                                                                                   // 2578\n            return container;                                                                                          // 2579\n        },                                                                                                             // 2580\n                                                                                                                       // 2581\n        // multi                                                                                                       // 2582\n        prepareOpts: function () {                                                                                     // 2583\n            var opts = this.parent.prepareOpts.apply(this, arguments),                                                 // 2584\n                self=this;                                                                                             // 2585\n                                                                                                                       // 2586\n            // TODO validate placeholder is a string if specified                                                      // 2587\n                                                                                                                       // 2588\n            if (opts.element.get(0).tagName.toLowerCase() === \"select\") {                                              // 2589\n                // install the selection initializer                                                                   // 2590\n                opts.initSelection = function (element, callback) {                                                    // 2591\n                                                                                                                       // 2592\n                    var data = [];                                                                                     // 2593\n                                                                                                                       // 2594\n                    element.find(\"option\").filter(function() { return this.selected && !this.disabled }).each2(function (i, elm) {\n                        data.push(self.optionToData(elm));                                                             // 2596\n                    });                                                                                                // 2597\n                    callback(data);                                                                                    // 2598\n                };                                                                                                     // 2599\n            } else if (\"data\" in opts) {                                                                               // 2600\n                // install default initSelection when applied to hidden input and data is local                        // 2601\n                opts.initSelection = opts.initSelection || function (element, callback) {                              // 2602\n                    var ids = splitVal(element.val(), opts.separator);                                                 // 2603\n                    //search in data by array of ids, storing matching items in a list                                 // 2604\n                    var matches = [];                                                                                  // 2605\n                    opts.query({                                                                                       // 2606\n                        matcher: function(term, text, el){                                                             // 2607\n                            var is_match = $.grep(ids, function(id) {                                                  // 2608\n                                return equal(id, opts.id(el));                                                         // 2609\n                            }).length;                                                                                 // 2610\n                            if (is_match) {                                                                            // 2611\n                                matches.push(el);                                                                      // 2612\n                            }                                                                                          // 2613\n                            return is_match;                                                                           // 2614\n                        },                                                                                             // 2615\n                        callback: !$.isFunction(callback) ? $.noop : function() {                                      // 2616\n                            // reorder matches based on the order they appear in the ids array because right now       // 2617\n                            // they are in the order in which they appear in data array                                // 2618\n                            var ordered = [];                                                                          // 2619\n                            for (var i = 0; i < ids.length; i++) {                                                     // 2620\n                                var id = ids[i];                                                                       // 2621\n                                for (var j = 0; j < matches.length; j++) {                                             // 2622\n                                    var match = matches[j];                                                            // 2623\n                                    if (equal(id, opts.id(match))) {                                                   // 2624\n                                        ordered.push(match);                                                           // 2625\n                                        matches.splice(j, 1);                                                          // 2626\n                                        break;                                                                         // 2627\n                                    }                                                                                  // 2628\n                                }                                                                                      // 2629\n                            }                                                                                          // 2630\n                            callback(ordered);                                                                         // 2631\n                        }                                                                                              // 2632\n                    });                                                                                                // 2633\n                };                                                                                                     // 2634\n            }                                                                                                          // 2635\n                                                                                                                       // 2636\n            return opts;                                                                                               // 2637\n        },                                                                                                             // 2638\n                                                                                                                       // 2639\n        // multi                                                                                                       // 2640\n        selectChoice: function (choice) {                                                                              // 2641\n                                                                                                                       // 2642\n            var selected = this.container.find(\".select2-search-choice-focus\");                                        // 2643\n            if (selected.length && choice && choice[0] == selected[0]) {                                               // 2644\n                                                                                                                       // 2645\n            } else {                                                                                                   // 2646\n                if (selected.length) {                                                                                 // 2647\n                    this.opts.element.trigger(\"choice-deselected\", selected);                                          // 2648\n                }                                                                                                      // 2649\n                selected.removeClass(\"select2-search-choice-focus\");                                                   // 2650\n                if (choice && choice.length) {                                                                         // 2651\n                    this.close();                                                                                      // 2652\n                    choice.addClass(\"select2-search-choice-focus\");                                                    // 2653\n                    this.opts.element.trigger(\"choice-selected\", choice);                                              // 2654\n                }                                                                                                      // 2655\n            }                                                                                                          // 2656\n        },                                                                                                             // 2657\n                                                                                                                       // 2658\n        // multi                                                                                                       // 2659\n        destroy: function() {                                                                                          // 2660\n            $(\"label[for='\" + this.search.attr('id') + \"']\")                                                           // 2661\n                .attr('for', this.opts.element.attr(\"id\"));                                                            // 2662\n            this.parent.destroy.apply(this, arguments);                                                                // 2663\n                                                                                                                       // 2664\n            cleanupJQueryElements.call(this,                                                                           // 2665\n                \"searchContainer\",                                                                                     // 2666\n                \"selection\"                                                                                            // 2667\n            );                                                                                                         // 2668\n        },                                                                                                             // 2669\n                                                                                                                       // 2670\n        // multi                                                                                                       // 2671\n        initContainer: function () {                                                                                   // 2672\n                                                                                                                       // 2673\n            var selector = \".select2-choices\", selection;                                                              // 2674\n                                                                                                                       // 2675\n            this.searchContainer = this.container.find(\".select2-search-field\");                                       // 2676\n            this.selection = selection = this.container.find(selector);                                                // 2677\n                                                                                                                       // 2678\n            var _this = this;                                                                                          // 2679\n            this.selection.on(\"click\", \".select2-search-choice:not(.select2-locked)\", function (e) {                   // 2680\n                //killEvent(e);                                                                                        // 2681\n                _this.search[0].focus();                                                                               // 2682\n                _this.selectChoice($(this));                                                                           // 2683\n            });                                                                                                        // 2684\n                                                                                                                       // 2685\n            // rewrite labels from original element to focusser                                                        // 2686\n            this.search.attr(\"id\", \"s2id_autogen\"+nextUid());                                                          // 2687\n                                                                                                                       // 2688\n            this.search.prev()                                                                                         // 2689\n                .text($(\"label[for='\" + this.opts.element.attr(\"id\") + \"']\").text())                                   // 2690\n                .attr('for', this.search.attr('id'));                                                                  // 2691\n                                                                                                                       // 2692\n            this.search.on(\"input paste\", this.bind(function() {                                                       // 2693\n                if (this.search.attr('placeholder') && this.search.val().length == 0) return;                          // 2694\n                if (!this.isInterfaceEnabled()) return;                                                                // 2695\n                if (!this.opened()) {                                                                                  // 2696\n                    this.open();                                                                                       // 2697\n                }                                                                                                      // 2698\n            }));                                                                                                       // 2699\n                                                                                                                       // 2700\n            this.search.attr(\"tabindex\", this.elementTabIndex);                                                        // 2701\n                                                                                                                       // 2702\n            this.keydowns = 0;                                                                                         // 2703\n            this.search.on(\"keydown\", this.bind(function (e) {                                                         // 2704\n                if (!this.isInterfaceEnabled()) return;                                                                // 2705\n                                                                                                                       // 2706\n                ++this.keydowns;                                                                                       // 2707\n                var selected = selection.find(\".select2-search-choice-focus\");                                         // 2708\n                var prev = selected.prev(\".select2-search-choice:not(.select2-locked)\");                               // 2709\n                var next = selected.next(\".select2-search-choice:not(.select2-locked)\");                               // 2710\n                var pos = getCursorInfo(this.search);                                                                  // 2711\n                                                                                                                       // 2712\n                if (selected.length &&                                                                                 // 2713\n                    (e.which == KEY.LEFT || e.which == KEY.RIGHT || e.which == KEY.BACKSPACE || e.which == KEY.DELETE || e.which == KEY.ENTER)) {\n                    var selectedChoice = selected;                                                                     // 2715\n                    if (e.which == KEY.LEFT && prev.length) {                                                          // 2716\n                        selectedChoice = prev;                                                                         // 2717\n                    }                                                                                                  // 2718\n                    else if (e.which == KEY.RIGHT) {                                                                   // 2719\n                        selectedChoice = next.length ? next : null;                                                    // 2720\n                    }                                                                                                  // 2721\n                    else if (e.which === KEY.BACKSPACE) {                                                              // 2722\n                        if (this.unselect(selected.first())) {                                                         // 2723\n                            this.search.width(10);                                                                     // 2724\n                            selectedChoice = prev.length ? prev : next;                                                // 2725\n                        }                                                                                              // 2726\n                    } else if (e.which == KEY.DELETE) {                                                                // 2727\n                        if (this.unselect(selected.first())) {                                                         // 2728\n                            this.search.width(10);                                                                     // 2729\n                            selectedChoice = next.length ? next : null;                                                // 2730\n                        }                                                                                              // 2731\n                    } else if (e.which == KEY.ENTER) {                                                                 // 2732\n                        selectedChoice = null;                                                                         // 2733\n                    }                                                                                                  // 2734\n                                                                                                                       // 2735\n                    this.selectChoice(selectedChoice);                                                                 // 2736\n                    killEvent(e);                                                                                      // 2737\n                    if (!selectedChoice || !selectedChoice.length) {                                                   // 2738\n                        this.open();                                                                                   // 2739\n                    }                                                                                                  // 2740\n                    return;                                                                                            // 2741\n                } else if (((e.which === KEY.BACKSPACE && this.keydowns == 1)                                          // 2742\n                    || e.which == KEY.LEFT) && (pos.offset == 0 && !pos.length)) {                                     // 2743\n                                                                                                                       // 2744\n                    this.selectChoice(selection.find(\".select2-search-choice:not(.select2-locked)\").last());           // 2745\n                    killEvent(e);                                                                                      // 2746\n                    return;                                                                                            // 2747\n                } else {                                                                                               // 2748\n                    this.selectChoice(null);                                                                           // 2749\n                }                                                                                                      // 2750\n                                                                                                                       // 2751\n                if (this.opened()) {                                                                                   // 2752\n                    switch (e.which) {                                                                                 // 2753\n                    case KEY.UP:                                                                                       // 2754\n                    case KEY.DOWN:                                                                                     // 2755\n                        this.moveHighlight((e.which === KEY.UP) ? -1 : 1);                                             // 2756\n                        killEvent(e);                                                                                  // 2757\n                        return;                                                                                        // 2758\n                    case KEY.ENTER:                                                                                    // 2759\n                        this.selectHighlighted();                                                                      // 2760\n                        killEvent(e);                                                                                  // 2761\n                        return;                                                                                        // 2762\n                    case KEY.TAB:                                                                                      // 2763\n                        this.selectHighlighted({noFocus:true});                                                        // 2764\n                        this.close();                                                                                  // 2765\n                        return;                                                                                        // 2766\n                    case KEY.ESC:                                                                                      // 2767\n                        this.cancel(e);                                                                                // 2768\n                        killEvent(e);                                                                                  // 2769\n                        return;                                                                                        // 2770\n                    }                                                                                                  // 2771\n                }                                                                                                      // 2772\n                                                                                                                       // 2773\n                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e)                                    // 2774\n                 || e.which === KEY.BACKSPACE || e.which === KEY.ESC) {                                                // 2775\n                    return;                                                                                            // 2776\n                }                                                                                                      // 2777\n                                                                                                                       // 2778\n                if (e.which === KEY.ENTER) {                                                                           // 2779\n                    if (this.opts.openOnEnter === false) {                                                             // 2780\n                        return;                                                                                        // 2781\n                    } else if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {                                     // 2782\n                        return;                                                                                        // 2783\n                    }                                                                                                  // 2784\n                }                                                                                                      // 2785\n                                                                                                                       // 2786\n                this.open();                                                                                           // 2787\n                                                                                                                       // 2788\n                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {                                            // 2789\n                    // prevent the page from scrolling                                                                 // 2790\n                    killEvent(e);                                                                                      // 2791\n                }                                                                                                      // 2792\n                                                                                                                       // 2793\n                if (e.which === KEY.ENTER) {                                                                           // 2794\n                    // prevent form from being submitted                                                               // 2795\n                    killEvent(e);                                                                                      // 2796\n                }                                                                                                      // 2797\n                                                                                                                       // 2798\n            }));                                                                                                       // 2799\n                                                                                                                       // 2800\n            this.search.on(\"keyup\", this.bind(function (e) {                                                           // 2801\n                this.keydowns = 0;                                                                                     // 2802\n                this.resizeSearch();                                                                                   // 2803\n            })                                                                                                         // 2804\n            );                                                                                                         // 2805\n                                                                                                                       // 2806\n            this.search.on(\"blur\", this.bind(function(e) {                                                             // 2807\n                this.container.removeClass(\"select2-container-active\");                                                // 2808\n                this.search.removeClass(\"select2-focused\");                                                            // 2809\n                this.selectChoice(null);                                                                               // 2810\n                if (!this.opened()) this.clearSearch();                                                                // 2811\n                e.stopImmediatePropagation();                                                                          // 2812\n                this.opts.element.trigger($.Event(\"select2-blur\"));                                                    // 2813\n            }));                                                                                                       // 2814\n                                                                                                                       // 2815\n            this.container.on(\"click\", selector, this.bind(function (e) {                                              // 2816\n                if (!this.isInterfaceEnabled()) return;                                                                // 2817\n                if ($(e.target).closest(\".select2-search-choice\").length > 0) {                                        // 2818\n                    // clicked inside a select2 search choice, do not open                                             // 2819\n                    return;                                                                                            // 2820\n                }                                                                                                      // 2821\n                this.selectChoice(null);                                                                               // 2822\n                this.clearPlaceholder();                                                                               // 2823\n                if (!this.container.hasClass(\"select2-container-active\")) {                                            // 2824\n                    this.opts.element.trigger($.Event(\"select2-focus\"));                                               // 2825\n                }                                                                                                      // 2826\n                this.open();                                                                                           // 2827\n                this.focusSearch();                                                                                    // 2828\n                e.preventDefault();                                                                                    // 2829\n            }));                                                                                                       // 2830\n                                                                                                                       // 2831\n            this.container.on(\"focus\", selector, this.bind(function () {                                               // 2832\n                if (!this.isInterfaceEnabled()) return;                                                                // 2833\n                if (!this.container.hasClass(\"select2-container-active\")) {                                            // 2834\n                    this.opts.element.trigger($.Event(\"select2-focus\"));                                               // 2835\n                }                                                                                                      // 2836\n                this.container.addClass(\"select2-container-active\");                                                   // 2837\n                this.dropdown.addClass(\"select2-drop-active\");                                                         // 2838\n                this.clearPlaceholder();                                                                               // 2839\n            }));                                                                                                       // 2840\n                                                                                                                       // 2841\n            this.initContainerWidth();                                                                                 // 2842\n            this.opts.element.addClass(\"select2-offscreen\");                                                           // 2843\n                                                                                                                       // 2844\n            // set the placeholder if necessary                                                                        // 2845\n            this.clearSearch();                                                                                        // 2846\n        },                                                                                                             // 2847\n                                                                                                                       // 2848\n        // multi                                                                                                       // 2849\n        enableInterface: function() {                                                                                  // 2850\n            if (this.parent.enableInterface.apply(this, arguments)) {                                                  // 2851\n                this.search.prop(\"disabled\", !this.isInterfaceEnabled());                                              // 2852\n            }                                                                                                          // 2853\n        },                                                                                                             // 2854\n                                                                                                                       // 2855\n        // multi                                                                                                       // 2856\n        initSelection: function () {                                                                                   // 2857\n            var data;                                                                                                  // 2858\n            if (this.opts.element.val() === \"\" && this.opts.element.text() === \"\") {                                   // 2859\n                this.updateSelection([]);                                                                              // 2860\n                this.close();                                                                                          // 2861\n                // set the placeholder if necessary                                                                    // 2862\n                this.clearSearch();                                                                                    // 2863\n            }                                                                                                          // 2864\n            if (this.select || this.opts.element.val() !== \"\") {                                                       // 2865\n                var self = this;                                                                                       // 2866\n                this.opts.initSelection.call(null, this.opts.element, function(data){                                  // 2867\n                    if (data !== undefined && data !== null) {                                                         // 2868\n                        self.updateSelection(data);                                                                    // 2869\n                        self.close();                                                                                  // 2870\n                        // set the placeholder if necessary                                                            // 2871\n                        self.clearSearch();                                                                            // 2872\n                    }                                                                                                  // 2873\n                });                                                                                                    // 2874\n            }                                                                                                          // 2875\n        },                                                                                                             // 2876\n                                                                                                                       // 2877\n        // multi                                                                                                       // 2878\n        clearSearch: function () {                                                                                     // 2879\n            var placeholder = this.getPlaceholder(),                                                                   // 2880\n                maxWidth = this.getMaxSearchWidth();                                                                   // 2881\n                                                                                                                       // 2882\n            if (placeholder !== undefined  && this.getVal().length === 0 && this.search.hasClass(\"select2-focused\") === false) {\n                this.search.val(placeholder).addClass(\"select2-default\");                                              // 2884\n                // stretch the search box to full width of the container so as much of the placeholder is visible as possible\n                // we could call this.resizeSearch(), but we do not because that requires a sizer and we do not want to create one so early because of a firefox bug, see #944\n                this.search.width(maxWidth > 0 ? maxWidth : this.container.css(\"width\"));                              // 2887\n            } else {                                                                                                   // 2888\n                this.search.val(\"\").width(10);                                                                         // 2889\n            }                                                                                                          // 2890\n        },                                                                                                             // 2891\n                                                                                                                       // 2892\n        // multi                                                                                                       // 2893\n        clearPlaceholder: function () {                                                                                // 2894\n            if (this.search.hasClass(\"select2-default\")) {                                                             // 2895\n                this.search.val(\"\").removeClass(\"select2-default\");                                                    // 2896\n            }                                                                                                          // 2897\n        },                                                                                                             // 2898\n                                                                                                                       // 2899\n        // multi                                                                                                       // 2900\n        opening: function () {                                                                                         // 2901\n            this.clearPlaceholder(); // should be done before super so placeholder is not used to search               // 2902\n            this.resizeSearch();                                                                                       // 2903\n                                                                                                                       // 2904\n            this.parent.opening.apply(this, arguments);                                                                // 2905\n                                                                                                                       // 2906\n            this.focusSearch();                                                                                        // 2907\n                                                                                                                       // 2908\n            // initializes search's value with nextSearchTerm (if defined by user)                                     // 2909\n            // ignore nextSearchTerm if the dropdown is opened by the user pressing a letter                           // 2910\n            if(this.search.val() === \"\") {                                                                             // 2911\n                if(this.nextSearchTerm != undefined){                                                                  // 2912\n                    this.search.val(this.nextSearchTerm);                                                              // 2913\n                    this.search.select();                                                                              // 2914\n                }                                                                                                      // 2915\n            }                                                                                                          // 2916\n                                                                                                                       // 2917\n            this.updateResults(true);                                                                                  // 2918\n            if (this.opts.shouldFocusInput(this)) {                                                                    // 2919\n                this.search.focus();                                                                                   // 2920\n            }                                                                                                          // 2921\n            this.opts.element.trigger($.Event(\"select2-open\"));                                                        // 2922\n        },                                                                                                             // 2923\n                                                                                                                       // 2924\n        // multi                                                                                                       // 2925\n        close: function () {                                                                                           // 2926\n            if (!this.opened()) return;                                                                                // 2927\n            this.parent.close.apply(this, arguments);                                                                  // 2928\n        },                                                                                                             // 2929\n                                                                                                                       // 2930\n        // multi                                                                                                       // 2931\n        focus: function () {                                                                                           // 2932\n            this.close();                                                                                              // 2933\n            this.search.focus();                                                                                       // 2934\n        },                                                                                                             // 2935\n                                                                                                                       // 2936\n        // multi                                                                                                       // 2937\n        isFocused: function () {                                                                                       // 2938\n            return this.search.hasClass(\"select2-focused\");                                                            // 2939\n        },                                                                                                             // 2940\n                                                                                                                       // 2941\n        // multi                                                                                                       // 2942\n        updateSelection: function (data) {                                                                             // 2943\n            var ids = [], filtered = [], self = this;                                                                  // 2944\n                                                                                                                       // 2945\n            // filter out duplicates                                                                                   // 2946\n            $(data).each(function () {                                                                                 // 2947\n                if (indexOf(self.id(this), ids) < 0) {                                                                 // 2948\n                    ids.push(self.id(this));                                                                           // 2949\n                    filtered.push(this);                                                                               // 2950\n                }                                                                                                      // 2951\n            });                                                                                                        // 2952\n            data = filtered;                                                                                           // 2953\n                                                                                                                       // 2954\n            this.selection.find(\".select2-search-choice\").remove();                                                    // 2955\n            $(data).each(function () {                                                                                 // 2956\n                self.addSelectedChoice(this);                                                                          // 2957\n            });                                                                                                        // 2958\n            self.postprocessResults();                                                                                 // 2959\n        },                                                                                                             // 2960\n                                                                                                                       // 2961\n        // multi                                                                                                       // 2962\n        tokenize: function() {                                                                                         // 2963\n            var input = this.search.val();                                                                             // 2964\n            input = this.opts.tokenizer.call(this, input, this.data(), this.bind(this.onSelect), this.opts);           // 2965\n            if (input != null && input != undefined) {                                                                 // 2966\n                this.search.val(input);                                                                                // 2967\n                if (input.length > 0) {                                                                                // 2968\n                    this.open();                                                                                       // 2969\n                }                                                                                                      // 2970\n            }                                                                                                          // 2971\n                                                                                                                       // 2972\n        },                                                                                                             // 2973\n                                                                                                                       // 2974\n        // multi                                                                                                       // 2975\n        onSelect: function (data, options) {                                                                           // 2976\n                                                                                                                       // 2977\n            if (!this.triggerSelect(data) || data.text === \"\") { return; }                                             // 2978\n                                                                                                                       // 2979\n            this.addSelectedChoice(data);                                                                              // 2980\n                                                                                                                       // 2981\n            this.opts.element.trigger({ type: \"selected\", val: this.id(data), choice: data });                         // 2982\n                                                                                                                       // 2983\n            // keep track of the search's value before it gets cleared                                                 // 2984\n            this.nextSearchTerm = this.opts.nextSearchTerm(data, this.search.val());                                   // 2985\n                                                                                                                       // 2986\n            this.clearSearch();                                                                                        // 2987\n            this.updateResults();                                                                                      // 2988\n                                                                                                                       // 2989\n            if (this.select || !this.opts.closeOnSelect) this.postprocessResults(data, false, this.opts.closeOnSelect===true);\n                                                                                                                       // 2991\n            if (this.opts.closeOnSelect) {                                                                             // 2992\n                this.close();                                                                                          // 2993\n                this.search.width(10);                                                                                 // 2994\n            } else {                                                                                                   // 2995\n                if (this.countSelectableResults()>0) {                                                                 // 2996\n                    this.search.width(10);                                                                             // 2997\n                    this.resizeSearch();                                                                               // 2998\n                    if (this.getMaximumSelectionSize() > 0 && this.val().length >= this.getMaximumSelectionSize()) {   // 2999\n                        // if we reached max selection size repaint the results so choices                             // 3000\n                        // are replaced with the max selection reached message                                         // 3001\n                        this.updateResults(true);                                                                      // 3002\n                    } else {                                                                                           // 3003\n                        // initializes search's value with nextSearchTerm and update search result                     // 3004\n                        if(this.nextSearchTerm != undefined){                                                          // 3005\n                            this.search.val(this.nextSearchTerm);                                                      // 3006\n                            this.updateResults();                                                                      // 3007\n                            this.search.select();                                                                      // 3008\n                        }                                                                                              // 3009\n                    }                                                                                                  // 3010\n                    this.positionDropdown();                                                                           // 3011\n                } else {                                                                                               // 3012\n                    // if nothing left to select close                                                                 // 3013\n                    this.close();                                                                                      // 3014\n                    this.search.width(10);                                                                             // 3015\n                }                                                                                                      // 3016\n            }                                                                                                          // 3017\n                                                                                                                       // 3018\n            // since its not possible to select an element that has already been                                       // 3019\n            // added we do not need to check if this is a new element before firing change                             // 3020\n            this.triggerChange({ added: data });                                                                       // 3021\n                                                                                                                       // 3022\n            if (!options || !options.noFocus)                                                                          // 3023\n                this.focusSearch();                                                                                    // 3024\n        },                                                                                                             // 3025\n                                                                                                                       // 3026\n        // multi                                                                                                       // 3027\n        cancel: function () {                                                                                          // 3028\n            this.close();                                                                                              // 3029\n            this.focusSearch();                                                                                        // 3030\n        },                                                                                                             // 3031\n                                                                                                                       // 3032\n        addSelectedChoice: function (data) {                                                                           // 3033\n            var enableChoice = !data.locked,                                                                           // 3034\n                enabledItem = $(                                                                                       // 3035\n                    \"<li class='select2-search-choice'>\" +                                                             // 3036\n                    \"    <div></div>\" +                                                                                // 3037\n                    \"    <a href='#' class='select2-search-choice-close' tabindex='-1'></a>\" +                         // 3038\n                    \"</li>\"),                                                                                          // 3039\n                disabledItem = $(                                                                                      // 3040\n                    \"<li class='select2-search-choice select2-locked'>\" +                                              // 3041\n                    \"<div></div>\" +                                                                                    // 3042\n                    \"</li>\");                                                                                          // 3043\n            var choice = enableChoice ? enabledItem : disabledItem,                                                    // 3044\n                id = this.id(data),                                                                                    // 3045\n                val = this.getVal(),                                                                                   // 3046\n                formatted,                                                                                             // 3047\n                cssClass;                                                                                              // 3048\n                                                                                                                       // 3049\n            formatted=this.opts.formatSelection(data, choice.find(\"div\"), this.opts.escapeMarkup);                     // 3050\n            if (formatted != undefined) {                                                                              // 3051\n                choice.find(\"div\").replaceWith(\"<div>\"+formatted+\"</div>\");                                            // 3052\n            }                                                                                                          // 3053\n            cssClass=this.opts.formatSelectionCssClass(data, choice.find(\"div\"));                                      // 3054\n            if (cssClass != undefined) {                                                                               // 3055\n                choice.addClass(cssClass);                                                                             // 3056\n            }                                                                                                          // 3057\n                                                                                                                       // 3058\n            if(enableChoice){                                                                                          // 3059\n              choice.find(\".select2-search-choice-close\")                                                              // 3060\n                  .on(\"mousedown\", killEvent)                                                                          // 3061\n                  .on(\"click dblclick\", this.bind(function (e) {                                                       // 3062\n                  if (!this.isInterfaceEnabled()) return;                                                              // 3063\n                                                                                                                       // 3064\n                  this.unselect($(e.target));                                                                          // 3065\n                  this.selection.find(\".select2-search-choice-focus\").removeClass(\"select2-search-choice-focus\");      // 3066\n                  killEvent(e);                                                                                        // 3067\n                  this.close();                                                                                        // 3068\n                  this.focusSearch();                                                                                  // 3069\n              })).on(\"focus\", this.bind(function () {                                                                  // 3070\n                  if (!this.isInterfaceEnabled()) return;                                                              // 3071\n                  this.container.addClass(\"select2-container-active\");                                                 // 3072\n                  this.dropdown.addClass(\"select2-drop-active\");                                                       // 3073\n              }));                                                                                                     // 3074\n            }                                                                                                          // 3075\n                                                                                                                       // 3076\n            choice.data(\"select2-data\", data);                                                                         // 3077\n            choice.insertBefore(this.searchContainer);                                                                 // 3078\n                                                                                                                       // 3079\n            val.push(id);                                                                                              // 3080\n            this.setVal(val);                                                                                          // 3081\n        },                                                                                                             // 3082\n                                                                                                                       // 3083\n        // multi                                                                                                       // 3084\n        unselect: function (selected) {                                                                                // 3085\n            var val = this.getVal(),                                                                                   // 3086\n                data,                                                                                                  // 3087\n                index;                                                                                                 // 3088\n            selected = selected.closest(\".select2-search-choice\");                                                     // 3089\n                                                                                                                       // 3090\n            if (selected.length === 0) {                                                                               // 3091\n                throw \"Invalid argument: \" + selected + \". Must be .select2-search-choice\";                            // 3092\n            }                                                                                                          // 3093\n                                                                                                                       // 3094\n            data = selected.data(\"select2-data\");                                                                      // 3095\n                                                                                                                       // 3096\n            if (!data) {                                                                                               // 3097\n                // prevent a race condition when the 'x' is clicked really fast repeatedly the event can be queued     // 3098\n                // and invoked on an element already removed                                                           // 3099\n                return;                                                                                                // 3100\n            }                                                                                                          // 3101\n                                                                                                                       // 3102\n            var evt = $.Event(\"select2-removing\");                                                                     // 3103\n            evt.val = this.id(data);                                                                                   // 3104\n            evt.choice = data;                                                                                         // 3105\n            this.opts.element.trigger(evt);                                                                            // 3106\n                                                                                                                       // 3107\n            if (evt.isDefaultPrevented()) {                                                                            // 3108\n                return false;                                                                                          // 3109\n            }                                                                                                          // 3110\n                                                                                                                       // 3111\n            while((index = indexOf(this.id(data), val)) >= 0) {                                                        // 3112\n                val.splice(index, 1);                                                                                  // 3113\n                this.setVal(val);                                                                                      // 3114\n                if (this.select) this.postprocessResults();                                                            // 3115\n            }                                                                                                          // 3116\n                                                                                                                       // 3117\n            selected.remove();                                                                                         // 3118\n                                                                                                                       // 3119\n            this.opts.element.trigger({ type: \"select2-removed\", val: this.id(data), choice: data });                  // 3120\n            this.triggerChange({ removed: data });                                                                     // 3121\n                                                                                                                       // 3122\n            return true;                                                                                               // 3123\n        },                                                                                                             // 3124\n                                                                                                                       // 3125\n        // multi                                                                                                       // 3126\n        postprocessResults: function (data, initial, noHighlightUpdate) {                                              // 3127\n            var val = this.getVal(),                                                                                   // 3128\n                choices = this.results.find(\".select2-result\"),                                                        // 3129\n                compound = this.results.find(\".select2-result-with-children\"),                                         // 3130\n                self = this;                                                                                           // 3131\n                                                                                                                       // 3132\n            choices.each2(function (i, choice) {                                                                       // 3133\n                var id = self.id(choice.data(\"select2-data\"));                                                         // 3134\n                if (indexOf(id, val) >= 0) {                                                                           // 3135\n                    choice.addClass(\"select2-selected\");                                                               // 3136\n                    // mark all children of the selected parent as selected                                            // 3137\n                    choice.find(\".select2-result-selectable\").addClass(\"select2-selected\");                            // 3138\n                }                                                                                                      // 3139\n            });                                                                                                        // 3140\n                                                                                                                       // 3141\n            compound.each2(function(i, choice) {                                                                       // 3142\n                // hide an optgroup if it doesn't have any selectable children                                         // 3143\n                if (!choice.is('.select2-result-selectable')                                                           // 3144\n                    && choice.find(\".select2-result-selectable:not(.select2-selected)\").length === 0) {                // 3145\n                    choice.addClass(\"select2-selected\");                                                               // 3146\n                }                                                                                                      // 3147\n            });                                                                                                        // 3148\n                                                                                                                       // 3149\n            if (this.highlight() == -1 && noHighlightUpdate !== false){                                                // 3150\n                self.highlight(0);                                                                                     // 3151\n            }                                                                                                          // 3152\n                                                                                                                       // 3153\n            //If all results are chosen render formatNoMatches                                                         // 3154\n            if(!this.opts.createSearchChoice && !choices.filter('.select2-result:not(.select2-selected)').length > 0){ // 3155\n                if(!data || data && !data.more && this.results.find(\".select2-no-results\").length === 0) {             // 3156\n                    if (checkFormatter(self.opts.formatNoMatches, \"formatNoMatches\")) {                                // 3157\n                        this.results.append(\"<li class='select2-no-results'>\" + evaluate(self.opts.formatNoMatches, self.opts.element, self.search.val()) + \"</li>\");\n                    }                                                                                                  // 3159\n                }                                                                                                      // 3160\n            }                                                                                                          // 3161\n                                                                                                                       // 3162\n        },                                                                                                             // 3163\n                                                                                                                       // 3164\n        // multi                                                                                                       // 3165\n        getMaxSearchWidth: function() {                                                                                // 3166\n            return this.selection.width() - getSideBorderPadding(this.search);                                         // 3167\n        },                                                                                                             // 3168\n                                                                                                                       // 3169\n        // multi                                                                                                       // 3170\n        resizeSearch: function () {                                                                                    // 3171\n            var minimumWidth, left, maxWidth, containerLeft, searchWidth,                                              // 3172\n                sideBorderPadding = getSideBorderPadding(this.search);                                                 // 3173\n                                                                                                                       // 3174\n            minimumWidth = measureTextWidth(this.search) + 10;                                                         // 3175\n                                                                                                                       // 3176\n            left = this.search.offset().left;                                                                          // 3177\n                                                                                                                       // 3178\n            maxWidth = this.selection.width();                                                                         // 3179\n            containerLeft = this.selection.offset().left;                                                              // 3180\n                                                                                                                       // 3181\n            searchWidth = maxWidth - (left - containerLeft) - sideBorderPadding;                                       // 3182\n                                                                                                                       // 3183\n            if (searchWidth < minimumWidth) {                                                                          // 3184\n                searchWidth = maxWidth - sideBorderPadding;                                                            // 3185\n            }                                                                                                          // 3186\n                                                                                                                       // 3187\n            if (searchWidth < 40) {                                                                                    // 3188\n                searchWidth = maxWidth - sideBorderPadding;                                                            // 3189\n            }                                                                                                          // 3190\n                                                                                                                       // 3191\n            if (searchWidth <= 0) {                                                                                    // 3192\n              searchWidth = minimumWidth;                                                                              // 3193\n            }                                                                                                          // 3194\n                                                                                                                       // 3195\n            this.search.width(Math.floor(searchWidth));                                                                // 3196\n        },                                                                                                             // 3197\n                                                                                                                       // 3198\n        // multi                                                                                                       // 3199\n        getVal: function () {                                                                                          // 3200\n            var val;                                                                                                   // 3201\n            if (this.select) {                                                                                         // 3202\n                val = this.select.val();                                                                               // 3203\n                return val === null ? [] : val;                                                                        // 3204\n            } else {                                                                                                   // 3205\n                val = this.opts.element.val();                                                                         // 3206\n                return splitVal(val, this.opts.separator);                                                             // 3207\n            }                                                                                                          // 3208\n        },                                                                                                             // 3209\n                                                                                                                       // 3210\n        // multi                                                                                                       // 3211\n        setVal: function (val) {                                                                                       // 3212\n            var unique;                                                                                                // 3213\n            if (this.select) {                                                                                         // 3214\n                this.select.val(val);                                                                                  // 3215\n            } else {                                                                                                   // 3216\n                unique = [];                                                                                           // 3217\n                // filter out duplicates                                                                               // 3218\n                $(val).each(function () {                                                                              // 3219\n                    if (indexOf(this, unique) < 0) unique.push(this);                                                  // 3220\n                });                                                                                                    // 3221\n                this.opts.element.val(unique.length === 0 ? \"\" : unique.join(this.opts.separator));                    // 3222\n            }                                                                                                          // 3223\n        },                                                                                                             // 3224\n                                                                                                                       // 3225\n        // multi                                                                                                       // 3226\n        buildChangeDetails: function (old, current) {                                                                  // 3227\n            var current = current.slice(0),                                                                            // 3228\n                old = old.slice(0);                                                                                    // 3229\n                                                                                                                       // 3230\n            // remove intersection from each array                                                                     // 3231\n            for (var i = 0; i < current.length; i++) {                                                                 // 3232\n                for (var j = 0; j < old.length; j++) {                                                                 // 3233\n                    if (equal(this.opts.id(current[i]), this.opts.id(old[j]))) {                                       // 3234\n                        current.splice(i, 1);                                                                          // 3235\n                        if(i>0){                                                                                       // 3236\n                        \ti--;                                                                                          // 3237\n                        }                                                                                              // 3238\n                        old.splice(j, 1);                                                                              // 3239\n                        j--;                                                                                           // 3240\n                    }                                                                                                  // 3241\n                }                                                                                                      // 3242\n            }                                                                                                          // 3243\n                                                                                                                       // 3244\n            return {added: current, removed: old};                                                                     // 3245\n        },                                                                                                             // 3246\n                                                                                                                       // 3247\n                                                                                                                       // 3248\n        // multi                                                                                                       // 3249\n        val: function (val, triggerChange) {                                                                           // 3250\n            var oldData, self=this;                                                                                    // 3251\n                                                                                                                       // 3252\n            if (arguments.length === 0) {                                                                              // 3253\n                return this.getVal();                                                                                  // 3254\n            }                                                                                                          // 3255\n                                                                                                                       // 3256\n            oldData=this.data();                                                                                       // 3257\n            if (!oldData.length) oldData=[];                                                                           // 3258\n                                                                                                                       // 3259\n            // val is an id. !val is true for [undefined,null,'',0] - 0 is legal                                       // 3260\n            if (!val && val !== 0) {                                                                                   // 3261\n                this.opts.element.val(\"\");                                                                             // 3262\n                this.updateSelection([]);                                                                              // 3263\n                this.clearSearch();                                                                                    // 3264\n                if (triggerChange) {                                                                                   // 3265\n                    this.triggerChange({added: this.data(), removed: oldData});                                        // 3266\n                }                                                                                                      // 3267\n                return;                                                                                                // 3268\n            }                                                                                                          // 3269\n                                                                                                                       // 3270\n            // val is a list of ids                                                                                    // 3271\n            this.setVal(val);                                                                                          // 3272\n                                                                                                                       // 3273\n            if (this.select) {                                                                                         // 3274\n                this.opts.initSelection(this.select, this.bind(this.updateSelection));                                 // 3275\n                if (triggerChange) {                                                                                   // 3276\n                    this.triggerChange(this.buildChangeDetails(oldData, this.data()));                                 // 3277\n                }                                                                                                      // 3278\n            } else {                                                                                                   // 3279\n                if (this.opts.initSelection === undefined) {                                                           // 3280\n                    throw new Error(\"val() cannot be called if initSelection() is not defined\");                       // 3281\n                }                                                                                                      // 3282\n                                                                                                                       // 3283\n                this.opts.initSelection(this.opts.element, function(data){                                             // 3284\n                    var ids=$.map(data, self.id);                                                                      // 3285\n                    self.setVal(ids);                                                                                  // 3286\n                    self.updateSelection(data);                                                                        // 3287\n                    self.clearSearch();                                                                                // 3288\n                    if (triggerChange) {                                                                               // 3289\n                        self.triggerChange(self.buildChangeDetails(oldData, self.data()));                             // 3290\n                    }                                                                                                  // 3291\n                });                                                                                                    // 3292\n            }                                                                                                          // 3293\n            this.clearSearch();                                                                                        // 3294\n        },                                                                                                             // 3295\n                                                                                                                       // 3296\n        // multi                                                                                                       // 3297\n        onSortStart: function() {                                                                                      // 3298\n            if (this.select) {                                                                                         // 3299\n                throw new Error(\"Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.\");\n            }                                                                                                          // 3301\n                                                                                                                       // 3302\n            // collapse search field into 0 width so its container can be collapsed as well                            // 3303\n            this.search.width(0);                                                                                      // 3304\n            // hide the container                                                                                      // 3305\n            this.searchContainer.hide();                                                                               // 3306\n        },                                                                                                             // 3307\n                                                                                                                       // 3308\n        // multi                                                                                                       // 3309\n        onSortEnd:function() {                                                                                         // 3310\n                                                                                                                       // 3311\n            var val=[], self=this;                                                                                     // 3312\n                                                                                                                       // 3313\n            // show search and move it to the end of the list                                                          // 3314\n            this.searchContainer.show();                                                                               // 3315\n            // make sure the search container is the last item in the list                                             // 3316\n            this.searchContainer.appendTo(this.searchContainer.parent());                                              // 3317\n            // since we collapsed the width in dragStarted, we resize it here                                          // 3318\n            this.resizeSearch();                                                                                       // 3319\n                                                                                                                       // 3320\n            // update selection                                                                                        // 3321\n            this.selection.find(\".select2-search-choice\").each(function() {                                            // 3322\n                val.push(self.opts.id($(this).data(\"select2-data\")));                                                  // 3323\n            });                                                                                                        // 3324\n            this.setVal(val);                                                                                          // 3325\n            this.triggerChange();                                                                                      // 3326\n        },                                                                                                             // 3327\n                                                                                                                       // 3328\n        // multi                                                                                                       // 3329\n        data: function(values, triggerChange) {                                                                        // 3330\n            var self=this, ids, old;                                                                                   // 3331\n            if (arguments.length === 0) {                                                                              // 3332\n                 return this.selection                                                                                 // 3333\n                     .children(\".select2-search-choice\")                                                               // 3334\n                     .map(function() { return $(this).data(\"select2-data\"); })                                         // 3335\n                     .get();                                                                                           // 3336\n            } else {                                                                                                   // 3337\n                old = this.data();                                                                                     // 3338\n                if (!values) { values = []; }                                                                          // 3339\n                ids = $.map(values, function(e) { return self.opts.id(e); });                                          // 3340\n                this.setVal(ids);                                                                                      // 3341\n                this.updateSelection(values);                                                                          // 3342\n                this.clearSearch();                                                                                    // 3343\n                if (triggerChange) {                                                                                   // 3344\n                    this.triggerChange(this.buildChangeDetails(old, this.data()));                                     // 3345\n                }                                                                                                      // 3346\n            }                                                                                                          // 3347\n        }                                                                                                              // 3348\n    });                                                                                                                // 3349\n                                                                                                                       // 3350\n    $.fn.select2 = function () {                                                                                       // 3351\n                                                                                                                       // 3352\n        var args = Array.prototype.slice.call(arguments, 0),                                                           // 3353\n            opts,                                                                                                      // 3354\n            select2,                                                                                                   // 3355\n            method, value, multiple,                                                                                   // 3356\n            allowedMethods = [\"val\", \"destroy\", \"opened\", \"open\", \"close\", \"focus\", \"isFocused\", \"container\", \"dropdown\", \"onSortStart\", \"onSortEnd\", \"enable\", \"disable\", \"readonly\", \"positionDropdown\", \"data\", \"search\"],\n            valueMethods = [\"opened\", \"isFocused\", \"container\", \"dropdown\"],                                           // 3358\n            propertyMethods = [\"val\", \"data\"],                                                                         // 3359\n            methodsMap = { search: \"externalSearch\" };                                                                 // 3360\n                                                                                                                       // 3361\n        this.each(function () {                                                                                        // 3362\n            if (args.length === 0 || typeof(args[0]) === \"object\") {                                                   // 3363\n                opts = args.length === 0 ? {} : $.extend({}, args[0]);                                                 // 3364\n                opts.element = $(this);                                                                                // 3365\n                                                                                                                       // 3366\n                if (opts.element.get(0).tagName.toLowerCase() === \"select\") {                                          // 3367\n                    multiple = opts.element.prop(\"multiple\");                                                          // 3368\n                } else {                                                                                               // 3369\n                    multiple = opts.multiple || false;                                                                 // 3370\n                    if (\"tags\" in opts) {opts.multiple = multiple = true;}                                             // 3371\n                }                                                                                                      // 3372\n                                                                                                                       // 3373\n                select2 = multiple ? new window.Select2[\"class\"].multi() : new window.Select2[\"class\"].single();       // 3374\n                select2.init(opts);                                                                                    // 3375\n            } else if (typeof(args[0]) === \"string\") {                                                                 // 3376\n                                                                                                                       // 3377\n                if (indexOf(args[0], allowedMethods) < 0) {                                                            // 3378\n                    throw \"Unknown method: \" + args[0];                                                                // 3379\n                }                                                                                                      // 3380\n                                                                                                                       // 3381\n                value = undefined;                                                                                     // 3382\n                select2 = $(this).data(\"select2\");                                                                     // 3383\n                if (select2 === undefined) return;                                                                     // 3384\n                                                                                                                       // 3385\n                method=args[0];                                                                                        // 3386\n                                                                                                                       // 3387\n                if (method === \"container\") {                                                                          // 3388\n                    value = select2.container;                                                                         // 3389\n                } else if (method === \"dropdown\") {                                                                    // 3390\n                    value = select2.dropdown;                                                                          // 3391\n                } else {                                                                                               // 3392\n                    if (methodsMap[method]) method = methodsMap[method];                                               // 3393\n                                                                                                                       // 3394\n                    value = select2[method].apply(select2, args.slice(1));                                             // 3395\n                }                                                                                                      // 3396\n                if (indexOf(args[0], valueMethods) >= 0                                                                // 3397\n                    || (indexOf(args[0], propertyMethods) >= 0 && args.length == 1)) {                                 // 3398\n                    return false; // abort the iteration, ready to return first matched value                          // 3399\n                }                                                                                                      // 3400\n            } else {                                                                                                   // 3401\n                throw \"Invalid arguments to select2 plugin: \" + args;                                                  // 3402\n            }                                                                                                          // 3403\n        });                                                                                                            // 3404\n        return (value === undefined) ? this : value;                                                                   // 3405\n    };                                                                                                                 // 3406\n                                                                                                                       // 3407\n    // plugin defaults, accessible to users                                                                            // 3408\n    $.fn.select2.defaults = {                                                                                          // 3409\n        width: \"copy\",                                                                                                 // 3410\n        loadMorePadding: 0,                                                                                            // 3411\n        closeOnSelect: true,                                                                                           // 3412\n        openOnEnter: true,                                                                                             // 3413\n        containerCss: {},                                                                                              // 3414\n        dropdownCss: {},                                                                                               // 3415\n        containerCssClass: \"\",                                                                                         // 3416\n        dropdownCssClass: \"\",                                                                                          // 3417\n        formatResult: function(result, container, query, escapeMarkup) {                                               // 3418\n            var markup=[];                                                                                             // 3419\n            markMatch(result.text, query.term, markup, escapeMarkup);                                                  // 3420\n            return markup.join(\"\");                                                                                    // 3421\n        },                                                                                                             // 3422\n        formatSelection: function (data, container, escapeMarkup) {                                                    // 3423\n            return data ? escapeMarkup(data.text) : undefined;                                                         // 3424\n        },                                                                                                             // 3425\n        sortResults: function (results, container, query) {                                                            // 3426\n            return results;                                                                                            // 3427\n        },                                                                                                             // 3428\n        formatResultCssClass: function(data) {return data.css;},                                                       // 3429\n        formatSelectionCssClass: function(data, container) {return undefined;},                                        // 3430\n        minimumResultsForSearch: 0,                                                                                    // 3431\n        minimumInputLength: 0,                                                                                         // 3432\n        maximumInputLength: null,                                                                                      // 3433\n        maximumSelectionSize: 0,                                                                                       // 3434\n        id: function (e) { return e == undefined ? null : e.id; },                                                     // 3435\n        matcher: function(term, text) {                                                                                // 3436\n            return stripDiacritics(''+text).toUpperCase().indexOf(stripDiacritics(''+term).toUpperCase()) >= 0;        // 3437\n        },                                                                                                             // 3438\n        separator: \",\",                                                                                                // 3439\n        tokenSeparators: [],                                                                                           // 3440\n        tokenizer: defaultTokenizer,                                                                                   // 3441\n        escapeMarkup: defaultEscapeMarkup,                                                                             // 3442\n        blurOnChange: false,                                                                                           // 3443\n        selectOnBlur: false,                                                                                           // 3444\n        adaptContainerCssClass: function(c) { return c; },                                                             // 3445\n        adaptDropdownCssClass: function(c) { return null; },                                                           // 3446\n        nextSearchTerm: function(selectedObject, currentSearchTerm) { return undefined; },                             // 3447\n        searchInputPlaceholder: '',                                                                                    // 3448\n        createSearchChoicePosition: 'top',                                                                             // 3449\n        shouldFocusInput: function (instance) {                                                                        // 3450\n            // Attempt to detect touch devices                                                                         // 3451\n            var supportsTouchEvents = (('ontouchstart' in window) ||                                                   // 3452\n                                       (navigator.msMaxTouchPoints > 0));                                              // 3453\n                                                                                                                       // 3454\n            // Only devices which support touch events should be special cased                                         // 3455\n            if (!supportsTouchEvents) {                                                                                // 3456\n                return true;                                                                                           // 3457\n            }                                                                                                          // 3458\n                                                                                                                       // 3459\n            // Never focus the input if search is disabled                                                             // 3460\n            if (instance.opts.minimumResultsForSearch < 0) {                                                           // 3461\n                return false;                                                                                          // 3462\n            }                                                                                                          // 3463\n                                                                                                                       // 3464\n            return true;                                                                                               // 3465\n        }                                                                                                              // 3466\n    };                                                                                                                 // 3467\n                                                                                                                       // 3468\n    $.fn.select2.locales = [];                                                                                         // 3469\n                                                                                                                       // 3470\n    $.fn.select2.locales['en'] = {                                                                                     // 3471\n         formatMatches: function (matches) { if (matches === 1) { return \"One result is available, press enter to select it.\"; } return matches + \" results are available, use up and down arrow keys to navigate.\"; },\n         formatNoMatches: function () { return \"No matches found\"; },                                                  // 3473\n         formatAjaxError: function (jqXHR, textStatus, errorThrown) { return \"Loading failed\"; },                      // 3474\n         formatInputTooShort: function (input, min) { var n = min - input.length; return \"Please enter \" + n + \" or more character\" + (n == 1 ? \"\" : \"s\"); },\n         formatInputTooLong: function (input, max) { var n = input.length - max; return \"Please delete \" + n + \" character\" + (n == 1 ? \"\" : \"s\"); },\n         formatSelectionTooBig: function (limit) { return \"You can only select \" + limit + \" item\" + (limit == 1 ? \"\" : \"s\"); },\n         formatLoadMore: function (pageNumber) { return \"Loading more results…\"; },                                    // 3478\n         formatSearching: function () { return \"Searching…\"; },                                                        // 3479\n    };                                                                                                                 // 3480\n                                                                                                                       // 3481\n    $.extend($.fn.select2.defaults, $.fn.select2.locales['en']);                                                       // 3482\n                                                                                                                       // 3483\n    $.fn.select2.ajaxDefaults = {                                                                                      // 3484\n        transport: $.ajax,                                                                                             // 3485\n        params: {                                                                                                      // 3486\n            type: \"GET\",                                                                                               // 3487\n            cache: false,                                                                                              // 3488\n            dataType: \"json\"                                                                                           // 3489\n        }                                                                                                              // 3490\n    };                                                                                                                 // 3491\n                                                                                                                       // 3492\n    // exports                                                                                                         // 3493\n    window.Select2 = {                                                                                                 // 3494\n        query: {                                                                                                       // 3495\n            ajax: ajax,                                                                                                // 3496\n            local: local,                                                                                              // 3497\n            tags: tags                                                                                                 // 3498\n        }, util: {                                                                                                     // 3499\n            debounce: debounce,                                                                                        // 3500\n            markMatch: markMatch,                                                                                      // 3501\n            escapeMarkup: defaultEscapeMarkup,                                                                         // 3502\n            stripDiacritics: stripDiacritics                                                                           // 3503\n        }, \"class\": {                                                                                                  // 3504\n            \"abstract\": AbstractSelect2,                                                                               // 3505\n            \"single\": SingleSelect2,                                                                                   // 3506\n            \"multi\": MultiSelect2                                                                                      // 3507\n        }                                                                                                              // 3508\n    };                                                                                                                 // 3509\n                                                                                                                       // 3510\n}(jQuery));                                                                                                            // 3511\n                                                                                                                       // 3512\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"natestrauser:select2\");\n\n})();\n","servePath":"/packages/natestrauser_select2.js"}]