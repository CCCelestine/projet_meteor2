[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nAccounts = Package['accounts-base'].Accounts;\nCollection2 = Package['aldeed:collection2'].Collection2;\n_ = Package.underscore._;\nRoles = Package['alanning:roles'].Roles;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"Globals.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// lib/Globals.js                                                                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nGlobals = {\n  appName: \"GFaim\",\n  appSlogan: \"L'application qui comble votre faim !\",\n  // Nous stockerons également nos schémas ici\n  schemas: {}\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Utils.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// lib/Utils.js                                                                                                 //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nUtils = {\n  formatDate: function (date) {\n    var date = new Date(date);\n    var day = date.getDate().toString();\n    var month = (date.getMonth() + 1).toString();\n    var year = date.getFullYear();\n\n    if (day.length === 1) {\n      day = '0' + day;\n    }\n\n    if (month.length === 1) {\n      month = '0' + month;\n    }\n\n    return day + '/' + month + '/' + year;\n  },\n  pathFor: function (routeName, params) {\n    // Similaire au helper \"pathFor\", mais utilisable directement dans le code\n    var route = Router.routes[routeName].path(params);\n    return route;\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"routeur.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// lib/routeur.js                                                                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nRouter.configure({\n  layoutTemplate: 'mainLayout'\n});\nRouter.route('/', {\n  name: 'accueil',\n  template: \"accueil\"\n});\nRouter.route('/register', {\n  name: \"user.register\",\n  //name: \"register\",\n  template: \"register\"\n});\nRouter.route('/login', {\n  name: \"user.login\",\n  //name: \"login\",\n  template: \"login\"\n});\nRouter.route('/loggedInHome', {\n  name: \"loggedInHome\",\n  template: \"loggedInHome\"\n});\nRouter.route('/commerces', {\n  name: \"commerces\",\n  template: \"commerces\"\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"collections\":{\"Commerces.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// collections/Commerces.js                                                                                     //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\n//SimpleSchema.extendOptions(['autoform']);\n//SimpleSchema.extendOptions(['denyUpdate']);\nCommerces = new Mongo.Collection('commerces');\nCommerces.attachSchema(new SimpleSchema({\n  name: {\n    type: String,\n    label: \"Nom\"\n  }\n}));\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Users.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// collections/Users.js                                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nSimpleSchema.extendOptions(['autoform']);\nSimpleSchema.extendOptions(['denyUpdate']); // Schéma du profil\n\nGlobals.schemas.UserProfile = new SimpleSchema({\n  firstName: {\n    type: String,\n    regEx: /^[a-zA-Z-]{2,25}/,\n    optional: true,\n    label: \"Prénom\"\n  },\n  lastName: {\n    type: String,\n    regEx: /^[a-zA-Z-]{2,25}/,\n    optional: true,\n    label: \"Nom\"\n  },\n  birthDay: {\n    type: Date,\n    optional: true,\n    label: \"Date de naissance\"\n  },\n  gender: {\n    type: String,\n    allowedValues: ['M', 'F'],\n    optional: true,\n    label: \"Genre\",\n    autoform: {\n      afFieldInput: {\n        type: \"select2\",\n        // type de champ particulier, voir plus bas\n        options: [{\n          value: \"M\",\n          label: \"Homme\"\n        }, {\n          value: \"F\",\n          label: \"Femme\"\n        }]\n      }\n    }\n  },\n  organization: {\n    type: String,\n    regEx: /^[a-z0-9A-Z .]{3,30}$/,\n    optional: true,\n    label: \"Organisation\"\n  },\n  website: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Url,\n    optional: true,\n    label: \"Site Web\"\n  },\n  bio: {\n    type: String,\n    optional: true,\n    label: \"Biographie\",\n    autoform: {\n      afFieldInput: {\n        type: \"textarea\"\n      }\n    }\n  }\n}); // Schéma principal\n\nGlobals.schemas.User = new SimpleSchema({\n  username: {\n    type: String,\n    regEx: /^[a-z0-9A-Z_]{3,15}$/,\n    label: \"Nom d'utilisateur\"\n  },\n  password: {\n    type: String,\n    label: \"Mot de passe\",\n    optional: true,\n    autoform: {\n      afFieldInput: {\n        type: \"password\"\n      }\n    }\n  },\n  confirmation: {\n    type: String,\n    label: \"Confirmation\",\n    optional: true,\n    custom: function () {\n      if (this.value !== this.field('password').value) {\n        return \"passwordMissmatch\";\n      }\n    },\n    autoform: {\n      afFieldInput: {\n        type: \"password\"\n      }\n    }\n  },\n  emails: {\n    type: Array,\n    optional: false,\n    label: \"Adresses Email\"\n  },\n  \"emails.$\": {\n    type: Object\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: [{\n      exp: SimpleSchema.RegEx.Email,\n      msg: \"Nope\"\n    }],\n    label: \"Adresse\"\n  },\n  \"emails.$.verified\": {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      omit: true\n    }\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      } else {\n        this.unset();\n      }\n    },\n    autoform: {\n      omit: true\n    }\n  },\n  profile: {\n    type: Globals.schemas.UserProfile,\n    optional: true\n  },\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true,\n    autoform: {\n      omit: true\n    }\n  },\n  roles: {\n    type: Object,\n    optional: true,\n    autoform: {\n      omit: true\n    }\n  }\n}); // On attache ce schéma à la collection\n\nMeteor.users.attachSchema(Globals.schemas.User);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"Accounts.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// server/Accounts.js                                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nAccounts.validateNewUser(function (user) {\n  // L'adresse email est-elle valide ?\n  if ( // Ne fonctionne pas pour tout, mais relativement précise\n  /^[a-zA-Z][a-zA-Z0-9_-]+[a-zA-Z0-9]@([a-zA-Z][a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,3}$/.test(user.emails[0].address)) {\n    return true;\n  } else {\n    throw new Meteor.Error(500, \"Veuillez donner une adresse email valide\");\n  }\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// server/main.js                                                                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.startup(() => {// code to run on server at startup\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/lib/Globals.js\");\nrequire(\"/lib/Utils.js\");\nrequire(\"/lib/routeur.js\");\nrequire(\"/collections/Commerces.js\");\nrequire(\"/collections/Users.js\");\nrequire(\"/server/Accounts.js\");\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["lib/Globals.js","lib/Utils.js","lib/routeur.js","collections/Commerces.js","collections/Users.js","server/Accounts.js","server/main.js"],"names":["Globals","appName","appSlogan","schemas","Utils","formatDate","date","Date","day","getDate","toString","month","getMonth","year","getFullYear","length","pathFor","routeName","params","route","Router","routes","path","configure","layoutTemplate","name","template","SimpleSchema","module","watch","require","default","v","Commerces","Mongo","Collection","attachSchema","type","String","label","extendOptions","UserProfile","firstName","regEx","optional","lastName","birthDay","gender","allowedValues","autoform","afFieldInput","options","value","organization","website","RegEx","Url","bio","User","username","password","confirmation","custom","field","emails","Array","Object","exp","Email","msg","Boolean","omit","createdAt","autoValue","isInsert","unset","profile","services","blackbox","roles","Meteor","users","Accounts","validateNewUser","user","test","address","Error","startup"],"mappings":"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","file":"/app.js","sourcesContent":["Globals = {\r\n    appName: \"GFaim\",\r\n    appSlogan: \"L'application qui comble votre faim !\",\r\n    // Nous stockerons également nos schémas ici\r\n    schemas: {}\r\n};","Utils = {\r\n    formatDate: function(date) {\r\n        var date = new Date(date);\r\n\r\n        var day = date.getDate().toString();\r\n        var month = (date.getMonth() + 1).toString();\r\n        var year = date.getFullYear();\r\n\r\n        if (day.length === 1) {\r\n            day = '0' + day;\r\n        }\r\n\r\n        if (month.length === 1) {\r\n            month = '0' + month;\r\n        }\r\n\r\n        return day + '/' + month + '/' + year;\r\n    },\r\n\r\n    pathFor: function(routeName, params){\r\n        // Similaire au helper \"pathFor\", mais utilisable directement dans le code\r\n        var route = Router.routes[routeName].path(params);\r\n        return route;\r\n    }\r\n};","Router.configure({\r\n    layoutTemplate: 'mainLayout'\r\n});\r\n\r\nRouter.route('/', {\r\n    name: 'accueil',\r\n    template: \"accueil\"\r\n});\r\n\r\nRouter.route('/register', {\r\n    name: \"user.register\",\r\n    //name: \"register\",\r\n    template: \"register\"\r\n});\r\n\r\nRouter.route('/login', {\r\n    name: \"user.login\",\r\n    //name: \"login\",\r\n    template: \"login\"\r\n});\r\n\r\nRouter.route('/loggedInHome', {\r\n    name: \"loggedInHome\",\r\n    template: \"loggedInHome\"\r\n});\r\n\r\nRouter.route('/commerces', {\r\n    name: \"commerces\",\r\n    template: \"commerces\"\r\n});\r\n","import SimpleSchema from 'simpl-schema';\r\n//SimpleSchema.extendOptions(['autoform']);\r\n//SimpleSchema.extendOptions(['denyUpdate']);\r\n\r\nCommerces = new Mongo.Collection('commerces');\r\n\r\nCommerces.attachSchema(new SimpleSchema({\r\n    name: {\r\n        type: String,\r\n        label: \"Nom\"\r\n    }\r\n}));","import SimpleSchema from 'simpl-schema';\r\nSimpleSchema.extendOptions(['autoform']);\r\nSimpleSchema.extendOptions(['denyUpdate']);\r\n\r\n// Schéma du profil\r\nGlobals.schemas.UserProfile = new SimpleSchema({\r\n    firstName: {\r\n        type: String,\r\n        regEx: /^[a-zA-Z-]{2,25}/,\r\n        optional: true,\r\n        label: \"Prénom\"\r\n    },\r\n    lastName: {\r\n        type: String,\r\n        regEx: /^[a-zA-Z-]{2,25}/,\r\n        optional: true,\r\n        label: \"Nom\"\r\n    },\r\n    birthDay: {\r\n        type: Date,\r\n        optional: true,\r\n        label: \"Date de naissance\"\r\n    },\r\n    gender: {\r\n        type: String,\r\n        allowedValues: ['M', 'F'],\r\n        optional: true,\r\n        label: \"Genre\",\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"select2\", // type de champ particulier, voir plus bas\r\n                options: [\r\n                    {\r\n                        value: \"M\",\r\n                        label: \"Homme\"\r\n                    },\r\n                    {\r\n                        value: \"F\",\r\n                        label: \"Femme\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    organization: {\r\n        type: String,\r\n        regEx: /^[a-z0-9A-Z .]{3,30}$/,\r\n        optional: true,\r\n        label: \"Organisation\"\r\n    },\r\n    website: {\r\n        type: String,\r\n        regEx: SimpleSchema.RegEx.Url,\r\n        optional: true,\r\n        label: \"Site Web\"\r\n    },\r\n    bio: {\r\n        type: String,\r\n        optional: true,\r\n        label: \"Biographie\",\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"textarea\"\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n// Schéma principal\r\nGlobals.schemas.User = new SimpleSchema({\r\n    username: {\r\n        type: String,\r\n        regEx: /^[a-z0-9A-Z_]{3,15}$/,\r\n        label: \"Nom d'utilisateur\"\r\n    },\r\n    password: {\r\n        type: String,\r\n        label: \"Mot de passe\",\r\n        optional: true,\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"password\"\r\n            }\r\n        }\r\n    },\r\n    confirmation: {\r\n        type: String,\r\n        label: \"Confirmation\",\r\n        optional: true,\r\n        custom: function(){\r\n            if(this.value !== this.field('password').value){\r\n                return \"passwordMissmatch\";\r\n            }\r\n        },\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"password\"\r\n            }\r\n        }\r\n    },\r\n    emails: {\r\n        type: Array,\r\n        optional: false,\r\n        label: \"Adresses Email\"\r\n    },\r\n    \"emails.$\": {\r\n        type: Object,\r\n    },\r\n    \"emails.$.address\": {\r\n        type: String,\r\n        regEx: [{ exp: SimpleSchema.RegEx.Email, msg : \"Nope\"}],\r\n        label: \"Adresse\",\r\n    },\r\n    \"emails.$.verified\": {\r\n        type: Boolean,\r\n        optional: true,\r\n        autoform: {\r\n            omit: true\r\n        }\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        autoValue: function () {\r\n            if (this.isInsert) {\r\n                return new Date;\r\n            } else {\r\n                this.unset();\r\n            }\r\n        },\r\n        autoform: {\r\n            omit: true\r\n        }\r\n    },\r\n    profile: {\r\n        type: Globals.schemas.UserProfile,\r\n        optional: true,\r\n\r\n    },\r\n    services: {\r\n        type: Object,\r\n        optional: true,\r\n        blackbox: true,\r\n        autoform:{\r\n            omit: true\r\n        }\r\n    },\r\n    roles: {\r\n        type: Object,\r\n        optional: true,\r\n        autoform: {\r\n            omit: true\r\n        }\r\n    }\r\n});\r\n\r\n// On attache ce schéma à la collection\r\nMeteor.users.attachSchema(Globals.schemas.User);","Accounts.validateNewUser(function(user) {\r\n    // L'adresse email est-elle valide ?\r\n    if (\r\n        // Ne fonctionne pas pour tout, mais relativement précise\r\n        /^[a-zA-Z][a-zA-Z0-9_-]+[a-zA-Z0-9]@([a-zA-Z][a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,3}$/\r\n            .test(user.emails[0].address)\r\n    ) {\r\n        return true;\r\n    } else {\r\n        throw new Meteor.Error(500, \"Veuillez donner une adresse email valide\");\r\n    }\r\n});","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]