[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Template = Package['templating-runtime'].Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar HTML = Package.htmljs.HTML;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\nvar Spacebars = Package.spacebars.Spacebars;\n\n/* Package-scope variables */\nvar Hooks;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"aldeed:template-extension\":{\"lib\":{\"hooks.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/hooks.js                                                              //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nHooks = {\n  global: {\n    created: [],\n    rendered: [],\n    destroyed: []\n  },\n  master: {\n    created: function () {\n      Hooks.runGlobal('created', this, arguments);\n    },\n    rendered: function () {\n      Hooks.runGlobal('rendered', this, arguments);\n    },\n    destroyed: function () {\n      Hooks.runGlobal('destroyed', this, arguments);\n    }\n  }\n};\n\nHooks.addGlobal = function (template) {\n  // For each hookType, define the hooks for this template.\n  // Since we might call this multiple times from startup code\n  // and other functions, make sure we do it only once.\n  // Doing it twice would create an infinite loop of self-calling\n  // hooks.\n  if (!template._hasTemplateExtensionMasterHooks) {\n    template.onCreated(Hooks.master.created);\n    template.onRendered(Hooks.master.rendered);\n    template.onDestroyed(Hooks.master.destroyed);\n    template._hasTemplateExtensionMasterHooks = true;\n  }\n};\n\nHooks.runGlobal = function (type, template, args) {\n  for (var _iterator = Hooks.global[type], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _hook = _ref;\n\n    _hook.apply(template, args);\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-for-each.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-for-each.js                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.forEach = function (callback) {\n  // for some reason we get the \"body\" template twice when looping, so\n  // we track that and only call the callback once.\n  var alreadyDidBody = false;\n\n  for (var t in meteorBabelHelpers.sanitizeForInObject(Template)) {\n    if (Template.hasOwnProperty(t)) {\n      var tmpl = Template[t];\n\n      if (Blaze.isTemplate(tmpl)) {\n        var name = tmpl.viewName;\n\n        if (name === \"body\") {\n          if (!alreadyDidBody) {\n            alreadyDidBody = true;\n            callback(tmpl);\n          }\n        } else if (name !== 'Template.__dynamic' && name !== 'Template.__dynamicWithDataContext') {\n          callback(tmpl);\n        }\n      }\n    }\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-hooks.js\":function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-hooks.js                                                     //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nTemplate.prototype.hooks = function (hooks) {\n  if (!hooks || _typeof(hooks) !== \"object\") {\n    throw new Error(\"hooks argument must be an object with created, rendered, and/or destroyed properties, each set to a function\");\n  }\n\n  if (typeof hooks.created === 'function') this.onCreated(hooks.created);\n  if (typeof hooks.rendered === 'function') this.onRendered(hooks.rendered);\n  if (typeof hooks.destroyed === 'function') this.onDestroyed(hooks.destroyed);\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-global-hooks.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-global-hooks.js                                              //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// Setup for multiple hooks support\n// We assume that no other code will be directly defining\n// a hook once the client has started.\nMeteor.startup(function () {\n  Template.forEach(function (template) {\n    Hooks.addGlobal(template);\n  });\n});\n\nTemplate.onCreated = function (hook) {\n  Hooks.global.created.push(hook);\n};\n\nTemplate.onRendered = function (hook) {\n  Hooks.global.rendered.push(hook);\n};\n\nTemplate.onDestroyed = function (hook) {\n  Hooks.global.destroyed.push(hook);\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-for-each-instance.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-for-each-instance.js                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate._renderedInstances = [];\nTemplate.onRendered(function () {\n  Template._renderedInstances.push(this);\n});\nTemplate.onDestroyed(function () {\n  var i = Template._renderedInstances.indexOf(this);\n\n  if (i > -1) Template._renderedInstances.splice(i, 1);\n});\n\nTemplate.forEachCurrentlyRenderedInstance = function (func) {\n  Template._renderedInstances.forEach(func);\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-inherits-events-from.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-inherits-events-from.js                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.inheritsEventsFrom = function () {\n  function inheritsEventsFrom(otherTemplate) {\n    var self = this;\n    self.__eventMaps = self.__eventMaps || [];\n\n    function inheritEvents(template) {\n      // String template names can be provided and template object is looked up\n      if (typeof template === 'string') template = Template[template];\n      if (!template) return;\n      self.__eventMaps = self.__eventMaps.concat(template.__eventMaps);\n    } // Accept an array as otherTemplate argument\n\n\n    if (_.isArray(otherTemplate)) {\n      _.each(otherTemplate, inheritEvents);\n    } else {\n      //otherTemplate is a string\n      inheritEvents(otherTemplate);\n    }\n  }\n\n  return inheritsEventsFrom;\n}();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-inherits-helpers-from.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-inherits-helpers-from.js                                     //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.inheritsHelpersFrom = function () {\n  function inheritsHelpersFrom(otherTemplate) {\n    var self = this;\n\n    function inheritHelpers(template) {\n      // String template names can be provided and template object is looked up\n      if (typeof template === 'string') template = Template[template];\n      if (!template) return;\n      var inheritedHelpers = {};\n\n      _.each(template.__helpers, function (helper, name) {\n        if (name.charAt(0) === \" \") inheritedHelpers[name.slice(1)] = helper;\n      });\n\n      self.helpers(inheritedHelpers);\n    } // Accept an array as otherTemplate argument\n\n\n    if (_.isArray(otherTemplate)) {\n      _.each(otherTemplate, inheritHelpers);\n    } else {\n      //otherTemplate is a string\n      inheritHelpers(otherTemplate);\n    }\n  }\n\n  return inheritsHelpersFrom;\n}();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-inherits-hooks-from.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-inherits-hooks-from.js                                       //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.inheritsHooksFrom = function () {\n  function inheritsHooksFrom(otherTemplate) {\n    var self = this;\n\n    function inheritHooks(template) {\n      // String template names can be provided and template object is looked up\n      if (typeof template === 'string') template = Template[template];\n      if (!template) return; // For this to work properly, need to ensure that we've defined\n      // the global hook hook for the other template already.\n\n      Hooks.addGlobal(template);\n\n      for (var _iterator = template._callbacks.created, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _hook3 = _ref;\n        // Don't copy the master hook because every template already has it\n        if (_hook3 === Hooks.master.created) continue;\n        self.onCreated(_hook3);\n      }\n\n      for (var _iterator2 = template._callbacks.rendered, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var _hook4 = _ref2;\n        // Don't copy the master hook because every template already has it\n        if (_hook4 === Hooks.master.rendered) continue;\n        self.onRendered(_hook4);\n      }\n\n      for (var _iterator3 = template._callbacks.destroyed, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var _hook5 = _ref3;\n        // Don't copy the master hook because every template already has it\n        if (_hook5 === Hooks.master.destroyed) continue;\n        self.onDestroyed(_hook5);\n      }\n    } // Accept an array as otherTemplate argument\n\n\n    if (_.isArray(otherTemplate)) {\n      _.each(otherTemplate, inheritHooks);\n    } else {\n      //otherTemplate is a string\n      inheritHooks(otherTemplate);\n    }\n  }\n\n  return inheritsHooksFrom;\n}();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-register-helpers.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-register-helpers.js                                          //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.registerHelpers = function (helpers) {\n  if (!helpers) return;\n\n  for (var name in meteorBabelHelpers.sanitizeForInObject(helpers)) {\n    if (helpers.hasOwnProperty(name)) {\n      Template.registerHelper(name, helpers[name]);\n    }\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-replaces.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-replaces.js                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.replaces = function () {\n  function replaces(otherTemplate) {\n    var self = this;\n\n    function replaceRender(template) {\n      // String template names can be provided and template object is looked up\n      if (typeof template === 'string') template = Template[template];\n      if (!template) return;\n      template.renderFunction = self.renderFunction;\n    } // Accept an array as otherTemplate argument\n\n\n    if (_.isArray(otherTemplate)) {\n      _.each(otherTemplate, replaceRender);\n    } else {\n      replaceRender(otherTemplate);\n    }\n  }\n\n  return replaces;\n}();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-clear-event-maps.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-clear-event-maps.js                                          //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.clearEventMaps = function () {\n  function clearEventMaps() {\n    this.__eventMaps = [];\n  }\n\n  return clearEventMaps;\n}();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-copy-as.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-copy-as.js                                                   //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nTemplate.prototype.copyAs = function () {\n  function copyAs(newTemplateName) {\n    var self = this;\n\n    function createNewTemplate(templateName) {\n      var newTemplate = Template[templateName] = new Template(\"Template.\" + templateName, self.renderFunction);\n      newTemplate.inheritsHelpersFrom(self);\n      newTemplate.inheritsEventsFrom(self);\n      newTemplate.inheritsHooksFrom(self);\n      return newTemplate;\n    } // Check if newTemplateName is an array\n\n\n    if (_.isArray(newTemplateName)) {\n      var result = [];\n\n      for (var _iterator = newTemplateName, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _name = _ref;\n        result.push(createNewTemplate(_name));\n      }\n\n      return result;\n    } else {\n      //newTemplateName is a string\n      return createNewTemplate(newTemplateName);\n    }\n  }\n\n  return copyAs;\n}();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-instance-parent.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-instance-parent.js                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// Access parent template instance. \"height\" is the number of levels beyond the\n// current template instance to look. By default block helper template instances\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.\n// See https://github.com/meteor/meteor/issues/3071\nBlaze.TemplateInstance.prototype.parent = function () {\n  function parent(height, includeBlockHelpers) {\n    // If height is null or undefined, we default to 1, the first parent.\n    if (height == null) height = 1;\n    var i = 0;\n    var template = this;\n\n    while (i < height && template) {\n      var view = parentView(template.view, includeBlockHelpers); // We skip contentBlock views which are injected by Meteor when using\n      // block helpers (in addition to block helper view). This matches more\n      // the visual structure of templates and not the internal implementation.\n\n      while (view && (!view.template || view.name === '(contentBlock)' || view.name === '(elseBlock)')) {\n        view = parentView(view, includeBlockHelpers);\n      }\n\n      if (!view) return null; // Body view has template field, but not templateInstance,\n      // which more or less signals that we reached the top.\n\n      template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;\n      i++;\n    }\n\n    return template;\n  }\n\n  return parent;\n}();\n\nfunction parentView(view, includeBlockHelpers) {\n  if (includeBlockHelpers) return view.originalParentView || view.parentView;\n  return view.parentView;\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-instance-get.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-instance-get.js                                              //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// Allow easy access to a template instance field when you do not know exactly\n// on which instance (this, or parent, or parent's parent, ...) a field is defined.\n// This allows easy restructuring of templates in HTML, moving things to included\n// templates without having to change everywhere in the code instance levels.\n// It also allows different structures of templates, when once template is included\n// at one level, and some other time at another. Levels do not matter anymore, just\n// that the field exists somewhere.\nBlaze.TemplateInstance.prototype.get = function () {\n  function get(fieldName) {\n    var template = this;\n\n    while (template) {\n      if (fieldName in template) return template[fieldName];\n      template = template.parent(1, true);\n    }\n  }\n\n  return get;\n}();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template-parent-data-function.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/aldeed_template-extension/lib/template-parent-data-function.js                                      //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// Allow to specify a function to test parent data for at various\n// levels, instead of specifying a fixed number of levels to traverse.\nvar originalParentData = Blaze._parentData;\n\nBlaze._parentData = function (height, _functionWrapped) {\n  // If height is not a function, simply call original implementation.\n  if (typeof height !== 'function') return originalParentData(height, _functionWrapped);\n  var theWith = Blaze.getView('with');\n\n  var test = function () {\n    return height(theWith.dataVar.get());\n  };\n\n  while (theWith) {\n    if (Tracker.nonreactive(test)) break;\n    theWith = Blaze.getView(theWith, 'with');\n  } // _functionWrapped is internal and will not be\n  // specified with non numeric height, so we ignore it.\n\n\n  if (!theWith) return null; // This registers a Tracker dependency.\n\n  return theWith.dataVar.get();\n};\n\nTemplate.parentData = Blaze._parentData;\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/hooks.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-for-each.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-hooks.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-global-hooks.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-for-each-instance.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-inherits-events-from.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-inherits-helpers-from.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-inherits-hooks-from.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-register-helpers.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-replaces.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-clear-event-maps.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-copy-as.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-instance-parent.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-instance-get.js\");\nrequire(\"/node_modules/meteor/aldeed:template-extension/lib/template-parent-data-function.js\");\n\n/* Exports */\nPackage._define(\"aldeed:template-extension\");\n\n})();\n","servePath":"/packages/aldeed_template-extension.js","sourceMap":{"version":3,"sources":["packages/aldeed:template-extension/lib/hooks.js","packages/aldeed:template-extension/lib/template-for-each.js","packages/aldeed:template-extension/lib/template-hooks.js","packages/aldeed:template-extension/lib/template-global-hooks.js","packages/aldeed:template-extension/lib/template-for-each-instance.js","packages/aldeed:template-extension/lib/template-inherits-events-from.js","packages/aldeed:template-extension/lib/template-inherits-helpers-from.js","packages/aldeed:template-extension/lib/template-inherits-hooks-from.js","packages/aldeed:template-extension/lib/template-register-helpers.js","packages/aldeed:template-extension/lib/template-replaces.js","packages/aldeed:template-extension/lib/template-clear-event-maps.js","packages/aldeed:template-extension/lib/template-copy-as.js","packages/aldeed:template-extension/lib/template-instance-parent.js","packages/aldeed:template-extension/lib/template-instance-get.js","packages/aldeed:template-extension/lib/template-parent-data-function.js"],"names":["Hooks","global","created","rendered","destroyed","master","runGlobal","arguments","addGlobal","template","_hasTemplateExtensionMasterHooks","onCreated","onRendered","onDestroyed","type","args","hook","apply","Template","forEach","callback","alreadyDidBody","t","hasOwnProperty","tmpl","Blaze","isTemplate","name","viewName","prototype","hooks","Error","Meteor","startup","push","_renderedInstances","i","indexOf","splice","forEachCurrentlyRenderedInstance","func","inheritsEventsFrom","otherTemplate","self","__eventMaps","inheritEvents","concat","_","isArray","each","inheritsHelpersFrom","inheritHelpers","inheritedHelpers","__helpers","helper","charAt","slice","helpers","inheritsHooksFrom","inheritHooks","_callbacks","registerHelpers","registerHelper","replaces","replaceRender","renderFunction","clearEventMaps","copyAs","newTemplateName","createNewTemplate","templateName","newTemplate","result","TemplateInstance","parent","height","includeBlockHelpers","view","parentView","templateInstance","originalParentView","get","fieldName","originalParentData","_parentData","_functionWrapped","theWith","getView","test","dataVar","Tracker","nonreactive","parentData"],"mappings":"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","file":"/packages/aldeed_template-extension.js","sourcesContent":["Hooks = {\n  global: {\n    created: [],\n    rendered: [],\n    destroyed: []\n  },\n  master: {\n    created: function () {\n      Hooks.runGlobal('created', this, arguments);\n    },\n    rendered: function () {\n      Hooks.runGlobal('rendered', this, arguments);\n    },\n    destroyed: function () {\n      Hooks.runGlobal('destroyed', this, arguments);\n    }\n  }\n};\n\nHooks.addGlobal = (template) => {\n  // For each hookType, define the hooks for this template.\n  // Since we might call this multiple times from startup code\n  // and other functions, make sure we do it only once.\n  // Doing it twice would create an infinite loop of self-calling\n  // hooks.\n  if (!template._hasTemplateExtensionMasterHooks) {\n    template.onCreated(Hooks.master.created);\n    template.onRendered(Hooks.master.rendered);\n    template.onDestroyed(Hooks.master.destroyed);\n    \n    template._hasTemplateExtensionMasterHooks = true;\n  }\n};\n\nHooks.runGlobal = (type, template, args) => {\n  for (let hook of Hooks.global[type]) {\n    hook.apply(template, args);\n  }\n};\n","Template.forEach = (callback) => {\n  // for some reason we get the \"body\" template twice when looping, so\n  // we track that and only call the callback once.\n  var alreadyDidBody = false;\n  for (var t in Template) {\n    if (Template.hasOwnProperty(t)) {\n      var tmpl = Template[t];\n      if (Blaze.isTemplate(tmpl)) {\n        let name = tmpl.viewName;\n        if (name === \"body\") {\n          if (!alreadyDidBody) {\n            alreadyDidBody = true;\n            callback(tmpl);\n          }\n        } else if (name !== 'Template.__dynamic' && name !== 'Template.__dynamicWithDataContext') {\n          callback(tmpl);\n        }\n      }\n    }\n  }\n};\n","Template.prototype.hooks = function (hooks) {\n  if (!hooks || typeof hooks !== \"object\") {\n    throw new Error(\"hooks argument must be an object with created, rendered, and/or destroyed properties, each set to a function\");\n  }\n  \n  if (typeof hooks.created === 'function') this.onCreated(hooks.created);\n  if (typeof hooks.rendered === 'function') this.onRendered(hooks.rendered);\n  if (typeof hooks.destroyed === 'function') this.onDestroyed(hooks.destroyed);\n};\n","// Setup for multiple hooks support\n// We assume that no other code will be directly defining\n// a hook once the client has started.\nMeteor.startup(() => {\n  Template.forEach((template) => {\n    Hooks.addGlobal(template);\n  });\n});\n\nTemplate.onCreated = (hook) => {\n  Hooks.global.created.push(hook);\n};\n\nTemplate.onRendered = (hook) => {\n  Hooks.global.rendered.push(hook);\n};\n\nTemplate.onDestroyed = (hook) => {\n  Hooks.global.destroyed.push(hook);\n};\n","Template._renderedInstances = [];\n\nTemplate.onRendered(function () {\n  Template._renderedInstances.push(this);\n});\n\nTemplate.onDestroyed(function () {\n  var i = Template._renderedInstances.indexOf(this);\n  if (i > -1) Template._renderedInstances.splice(i, 1);\n});\n\nTemplate.forEachCurrentlyRenderedInstance = (func) => {\n  Template._renderedInstances.forEach(func);\n};\n","Template.prototype.inheritsEventsFrom = function inheritsEventsFrom(otherTemplate) {\n  var self = this;\n  \n  self.__eventMaps = self.__eventMaps || [];\n\n  function inheritEvents(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    \n    self.__eventMaps = self.__eventMaps.concat(template.__eventMaps);\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritEvents);\n  } else { //otherTemplate is a string\n    inheritEvents(otherTemplate);\n  }\n};\n","Template.prototype.inheritsHelpersFrom = function inheritsHelpersFrom(otherTemplate) {\n  var self = this;\n  \n  function inheritHelpers(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    \n    let inheritedHelpers = {};\n    _.each(template.__helpers, (helper, name) => {\n      if (name.charAt(0) === \" \") inheritedHelpers[name.slice(1)] = helper;\n    });\n\n    self.helpers(inheritedHelpers);\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritHelpers);\n  } else { //otherTemplate is a string\n    inheritHelpers(otherTemplate);\n  }\n};\n","Template.prototype.inheritsHooksFrom = function inheritsHooksFrom(otherTemplate) {\n  var self = this;\n  \n  function inheritHooks(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n    \n    // For this to work properly, need to ensure that we've defined\n    // the global hook hook for the other template already.\n    Hooks.addGlobal(template);\n    \n    for (let hook of template._callbacks.created) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.created) continue;\n      self.onCreated(hook);\n    }\n    \n    for (let hook of template._callbacks.rendered) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.rendered) continue;\n      self.onRendered(hook);\n    }\n    \n    for (let hook of template._callbacks.destroyed) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.destroyed) continue;\n      self.onDestroyed(hook);\n    }\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, inheritHooks);\n  } else { //otherTemplate is a string\n    inheritHooks(otherTemplate);\n  }\n};\n","Template.registerHelpers = (helpers) => {\n  if (!helpers) return;\n\n  for (let name in helpers) {\n    if (helpers.hasOwnProperty(name)) {\n      Template.registerHelper(name, helpers[name]);\n    }\n  }\n};\n","Template.prototype.replaces = function replaces(otherTemplate) {\n  var self = this;\n\n  function replaceRender(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n\n    template.renderFunction = self.renderFunction;\n  }\n\n  // Accept an array as otherTemplate argument\n  if (_.isArray(otherTemplate)) {\n    _.each(otherTemplate, replaceRender);\n  } else {\n    replaceRender(otherTemplate);\n  }\n};\n","Template.prototype.clearEventMaps = function clearEventMaps() {\n  this.__eventMaps = [];\n};\n","Template.prototype.copyAs = function copyAs(newTemplateName) {\n  var self = this;\n\n  function createNewTemplate(templateName) {\n    var newTemplate =\n    Template[templateName] = new Template(`Template.${templateName}`, self.renderFunction);\n\n    newTemplate.inheritsHelpersFrom(self);\n    newTemplate.inheritsEventsFrom(self);\n    newTemplate.inheritsHooksFrom(self);\n\n    return newTemplate;\n  }\n\n  // Check if newTemplateName is an array\n  if (_.isArray(newTemplateName)) {\n    let result = [];\n    for (let name of newTemplateName) {\n      result.push(createNewTemplate(name));\n    }\n    return result;\n  } else { //newTemplateName is a string\n    return createNewTemplate(newTemplateName);\n  }\n};\n","// Access parent template instance. \"height\" is the number of levels beyond the\n// current template instance to look. By default block helper template instances\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.\n// See https://github.com/meteor/meteor/issues/3071\nBlaze.TemplateInstance.prototype.parent = function parent(height, includeBlockHelpers) {\n  // If height is null or undefined, we default to 1, the first parent.\n  if (height == null) height = 1;\n\n  var i = 0;\n  var template = this;\n  while (i < height && template) {\n    var view = parentView(template.view, includeBlockHelpers);\n    // We skip contentBlock views which are injected by Meteor when using\n    // block helpers (in addition to block helper view). This matches more\n    // the visual structure of templates and not the internal implementation.\n    while (view && (!view.template || view.name === '(contentBlock)' || view.name === '(elseBlock)')) {\n      view = parentView(view, includeBlockHelpers);\n    }\n    if (!view) return null;\n    // Body view has template field, but not templateInstance,\n    // which more or less signals that we reached the top.\n    template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;\n    i++;\n  }\n  return template;\n};\n\nfunction parentView(view, includeBlockHelpers) {\n  if (includeBlockHelpers) return view.originalParentView || view.parentView;\n  return view.parentView;\n}\n","// Allow easy access to a template instance field when you do not know exactly\n// on which instance (this, or parent, or parent's parent, ...) a field is defined.\n// This allows easy restructuring of templates in HTML, moving things to included\n// templates without having to change everywhere in the code instance levels.\n// It also allows different structures of templates, when once template is included\n// at one level, and some other time at another. Levels do not matter anymore, just\n// that the field exists somewhere.\nBlaze.TemplateInstance.prototype.get = function get(fieldName) {\n  var template = this;\n\n  while (template) {\n    if (fieldName in template) return template[fieldName];\n    template = template.parent(1, true);\n  }\n};\n","// Allow to specify a function to test parent data for at various\n// levels, instead of specifying a fixed number of levels to traverse.\nvar originalParentData = Blaze._parentData;\nBlaze._parentData = function (height, _functionWrapped) {\n  // If height is not a function, simply call original implementation.\n  if (typeof height !== 'function') return originalParentData(height, _functionWrapped);\n\n  var theWith = Blaze.getView('with');\n  var test = () => { return height(theWith.dataVar.get()); };\n  while (theWith) {\n    if (Tracker.nonreactive(test)) break;\n    theWith = Blaze.getView(theWith, 'with');\n  }\n\n  // _functionWrapped is internal and will not be\n  // specified with non numeric height, so we ignore it.\n  if (!theWith) return null;\n  // This registers a Tracker dependency.\n  return theWith.dataVar.get();\n};\n\nTemplate.parentData = Blaze._parentData;\n"]}}]