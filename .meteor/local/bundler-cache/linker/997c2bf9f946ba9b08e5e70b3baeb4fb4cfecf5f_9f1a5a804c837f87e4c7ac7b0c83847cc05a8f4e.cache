[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nAccounts = Package['accounts-base'].Accounts;\nCollection2 = Package['aldeed:collection2'].Collection2;\n_ = Package.underscore._;\nRoles = Package['alanning:roles'].Roles;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"Globals.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// lib/Globals.js                                                               //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nGlobals = {\n  appName: \"GFaim\",\n  appSlogan: \"L'application qui comble votre faim !\",\n  // Nous stockerons également nos schémas ici\n  schemas: {}\n};\n//////////////////////////////////////////////////////////////////////////////////\n\n},\"Utils.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// lib/Utils.js                                                                 //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nUtils = {\n  formatDate: function (date) {\n    var date = new Date(date);\n    var day = date.getDate().toString();\n    var month = (date.getMonth() + 1).toString();\n    var year = date.getFullYear();\n\n    if (day.length === 1) {\n      day = '0' + day;\n    }\n\n    if (month.length === 1) {\n      month = '0' + month;\n    }\n\n    return day + '/' + month + '/' + year;\n  },\n  pathFor: function (routeName, params) {\n    // Similaire au helper \"pathFor\", mais utilisable directement dans le code\n    var route = Router.routes[routeName].path(params);\n    return route;\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////\n\n}},\"collections\":{\"Commerces.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// collections/Commerces.js                                                     //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nSimpleSchema.extendOptions(['autoform']);\nSimpleSchema.extendOptions(['denyUpdate']);\nCommerces = new Mongo.Collection('commerces');\nCommerces.allow({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  }\n});\nCommerces.attachSchema(new SimpleSchema({\n  name: {\n    type: String,\n    label: \"Nom\"\n  },\n  horaire: {\n    type: String,\n    label: \"Horaires\"\n  },\n  telephone: {\n    type: String,\n    label: \"Téléphone\"\n  },\n  ville: {\n    type: String,\n    label: \"Ville\"\n  },\n  adresse: {\n    type: String,\n    label: \"Adresse\"\n  },\n  menus: {\n    type: Array,\n    label: \"menus\"\n  },\n  \"menus.$\": {\n    type: String,\n    label: \"menu\"\n  }\n}));\n//////////////////////////////////////////////////////////////////////////////////\n\n},\"Menus.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// collections/Menus.js                                                         //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nSimpleSchema.extendOptions(['autoform']);\nSimpleSchema.extendOptions(['denyUpdate']);\nMenus = new Mongo.Collection('menus');\nMenus.allow({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  }\n});\nMenus.attachSchema(new SimpleSchema({\n  name: {\n    type: String,\n    label: \"Nom\"\n  },\n  description: {\n    type: String,\n    label: \"Description\"\n  },\n  prix: {\n    type: Number,\n    label: \"Prix\"\n  },\n  rest: {\n    type: String,\n    label: \"Nombre de produits restants (facultatif)\",\n    optional: true\n  },\n  photo: {\n    type: String,\n    label: \"URL de l'image (facultatif)\",\n    optional: true\n  },\n  commerces: {\n    type: String,\n    label: \"Commerces\"\n  }\n}));\n//////////////////////////////////////////////////////////////////////////////////\n\n},\"Users.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// collections/Users.js                                                         //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nSimpleSchema.extendOptions(['autoform']);\nSimpleSchema.extendOptions(['denyUpdate']); // Schéma du profil\n\nGlobals.schemas.UserProfile = new SimpleSchema({\n  firstName: {\n    type: String,\n    regEx: /^[a-zA-Z-]{2,25}/,\n    optional: true,\n    label: \"Prénom\"\n  },\n  lastName: {\n    type: String,\n    regEx: /^[a-zA-Z-]{2,25}/,\n    optional: true,\n    label: \"Nom\"\n  },\n  birthDay: {\n    type: Date,\n    optional: true,\n    label: \"Date de naissance\"\n  },\n  gender: {\n    type: String,\n    allowedValues: ['M', 'F'],\n    optional: true,\n    label: \"Genre\",\n    autoform: {\n      afFieldInput: {\n        type: \"select2\",\n        // type de champ particulier, voir plus bas\n        options: [{\n          value: \"M\",\n          label: \"Homme\"\n        }, {\n          value: \"F\",\n          label: \"Femme\"\n        }]\n      }\n    }\n  }\n}); // Schéma principal\n\nGlobals.schemas.User = new SimpleSchema({\n  username: {\n    type: String,\n    regEx: /^[a-z0-9A-Z_]{3,15}$/,\n    label: \"Nom d'utilisateur\"\n  },\n  password: {\n    type: String,\n    label: \"Mot de passe\",\n    optional: true,\n    autoform: {\n      afFieldInput: {\n        type: \"password\"\n      }\n    }\n  },\n  confirmation: {\n    type: String,\n    label: \"Confirmation\",\n    optional: true,\n    custom: function () {\n      if (this.value !== this.field('password').value) {\n        return \"passwordMissmatch\";\n      }\n    },\n    autoform: {\n      afFieldInput: {\n        type: \"password\"\n      }\n    }\n  },\n  emails: {\n    type: Array,\n    optional: false,\n    label: \"Adresses Email\"\n  },\n  \"emails.$\": {\n    type: Object\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n\n    /*regEx :[\n    {msg: \" failed regular expression validation\"},\n    {exp: SimpleSchema.RegEx.Email, msg: \" must be a valid e-mail address\"}],*/\n    label: \"Adresse\"\n  },\n  \"emails.$.verified\": {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      omit: true\n    }\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      } else {\n        this.unset();\n      }\n    },\n    autoform: {\n      omit: true\n    }\n  },\n  profile: {\n    type: Globals.schemas.UserProfile,\n    optional: true\n  },\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true,\n    autoform: {\n      omit: true\n    }\n  },\n  roles: {\n    type: Array,\n    //optional: true,\n    autoform: {\n      omit: true\n    }\n  },\n  \"roles.$\": {\n    type: String\n  }\n}); // On attache ce schéma à la collection\n\nMeteor.users.attachSchema(Globals.schemas.User);\n//////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"commerces.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// server/commerces.js                                                          //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nMeteor.publish(\"allCommerces\", function () {\n  return Commerces.find({}, {});\n});\nMeteor.publish(\"allMenus\", function () {\n  return Menus.find({}, {});\n});\n//////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// server/main.js                                                               //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.startup(() => {// code to run on server at startup\n});\n//////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/lib/Globals.js\");\nrequire(\"/lib/Utils.js\");\nrequire(\"/collections/Commerces.js\");\nrequire(\"/collections/Menus.js\");\nrequire(\"/collections/Users.js\");\nrequire(\"/server/commerces.js\");\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["lib/Globals.js","lib/Utils.js","collections/Commerces.js","collections/Menus.js","collections/Users.js","server/commerces.js","server/main.js"],"names":["Globals","appName","appSlogan","schemas","Utils","formatDate","date","Date","day","getDate","toString","month","getMonth","year","getFullYear","length","pathFor","routeName","params","route","Router","routes","path","SimpleSchema","module","watch","require","default","v","extendOptions","Commerces","Mongo","Collection","allow","insert","update","remove","attachSchema","name","type","String","label","horaire","telephone","ville","adresse","menus","Array","Menus","description","prix","Number","rest","optional","photo","commerces","UserProfile","firstName","regEx","lastName","birthDay","gender","allowedValues","autoform","afFieldInput","options","value","User","username","password","confirmation","custom","field","emails","Object","RegEx","Email","Boolean","omit","createdAt","autoValue","isInsert","unset","profile","services","blackbox","roles","Meteor","users","publish","find","startup"],"mappings":"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","file":"/app.js","sourcesContent":["Globals = {\r\n    appName: \"GFaim\",\r\n    appSlogan: \"L'application qui comble votre faim !\",\r\n    // Nous stockerons également nos schémas ici\r\n    schemas: {}\r\n};","Utils = {\r\n    formatDate: function(date) {\r\n        var date = new Date(date);\r\n\r\n        var day = date.getDate().toString();\r\n        var month = (date.getMonth() + 1).toString();\r\n        var year = date.getFullYear();\r\n\r\n        if (day.length === 1) {\r\n            day = '0' + day;\r\n        }\r\n\r\n        if (month.length === 1) {\r\n            month = '0' + month;\r\n        }\r\n\r\n        return day + '/' + month + '/' + year;\r\n    },\r\n\r\n    pathFor: function(routeName, params){\r\n        // Similaire au helper \"pathFor\", mais utilisable directement dans le code\r\n        var route = Router.routes[routeName].path(params);\r\n        return route;\r\n    }\r\n};","import SimpleSchema from 'simpl-schema';\r\nSimpleSchema.extendOptions(['autoform']);\r\nSimpleSchema.extendOptions(['denyUpdate']);\r\n\r\nCommerces = new Mongo.Collection('commerces');\r\n\r\nCommerces.allow({\r\n    insert: function(){return true;},\r\n    update: function(){return true;},\r\n    remove: function(){return true;}\r\n});\r\n\r\nCommerces.attachSchema(new SimpleSchema({\r\n    name: {\r\n        type: String,\r\n        label: \"Nom\"\r\n    },\r\n    horaire: {\r\n        type: String,\r\n        label: \"Horaires\"\r\n    },\r\n    telephone: {\r\n        type: String,\r\n        label: \"Téléphone\"\r\n    },\r\n    ville: {\r\n        type: String,\r\n        label: \"Ville\"\r\n    },\r\n    adresse: {\r\n        type: String,\r\n        label: \"Adresse\"\r\n    },\r\n    menus: {\r\n    type: Array,\r\n    label: \"menus\"\r\n},\r\n    \"menus.$\": {\r\n        type: String,\r\n        label: \"menu\"\r\n    }\r\n\r\n}));","import SimpleSchema from 'simpl-schema';\r\nSimpleSchema.extendOptions(['autoform']);\r\nSimpleSchema.extendOptions(['denyUpdate']);\r\n\r\nMenus = new Mongo.Collection('menus');\r\n\r\nMenus.allow({\r\n    insert: function(){return true;},\r\n    update: function(){return true;},\r\n    remove: function(){return true;}\r\n});\r\n\r\nMenus.attachSchema(new SimpleSchema({\r\n    name: {\r\n        type: String,\r\n        label: \"Nom\"\r\n    },\r\n    description: {\r\n        type: String,\r\n        label: \"Description\"\r\n    },\r\n    prix: {\r\n        type: Number,\r\n        label: \"Prix\"\r\n    },\r\n    rest: {\r\n        type: String,\r\n        label: \"Nombre de produits restants (facultatif)\",\r\n        optional: true\r\n    },\r\n    photo: {\r\n        type: String,\r\n        label: \"URL de l'image (facultatif)\",\r\n        optional: true\r\n    },\r\n    commerces: {\r\n        type: String,\r\n        label: \"Commerces\"\r\n    }\r\n\r\n}));","import SimpleSchema from 'simpl-schema';\r\nSimpleSchema.extendOptions(['autoform']);\r\nSimpleSchema.extendOptions(['denyUpdate']);\r\n\r\n// Schéma du profil\r\nGlobals.schemas.UserProfile = new SimpleSchema({\r\n    firstName: {\r\n        type: String,\r\n        regEx: /^[a-zA-Z-]{2,25}/,\r\n        optional: true,\r\n        label: \"Prénom\"\r\n    },\r\n    lastName: {\r\n        type: String,\r\n        regEx: /^[a-zA-Z-]{2,25}/,\r\n        optional: true,\r\n        label: \"Nom\"\r\n    },\r\n    birthDay: {\r\n        type: Date,\r\n        optional: true,\r\n        label: \"Date de naissance\"\r\n    },\r\n    gender: {\r\n        type: String,\r\n        allowedValues: ['M', 'F'],\r\n        optional: true,\r\n        label: \"Genre\",\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"select2\", // type de champ particulier, voir plus bas\r\n                options: [\r\n                    {\r\n                        value: \"M\",\r\n                        label: \"Homme\"\r\n                    },\r\n                    {\r\n                        value: \"F\",\r\n                        label: \"Femme\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n// Schéma principal\r\nGlobals.schemas.User = new SimpleSchema({\r\n    username: {\r\n        type: String,\r\n        regEx: /^[a-z0-9A-Z_]{3,15}$/,\r\n        label: \"Nom d'utilisateur\"\r\n    },\r\n    password: {\r\n        type: String,\r\n        label: \"Mot de passe\",\r\n        optional: true,\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"password\"\r\n            }\r\n        }\r\n    },\r\n    confirmation: {\r\n        type: String,\r\n        label: \"Confirmation\",\r\n        optional: true,\r\n        custom: function(){\r\n            if(this.value !== this.field('password').value){\r\n                return \"passwordMissmatch\";\r\n            }\r\n        },\r\n        autoform: {\r\n            afFieldInput: {\r\n                type: \"password\"\r\n            }\r\n        }\r\n    },\r\n    emails: {\r\n        type: Array,\r\n        optional: false,\r\n        label: \"Adresses Email\"\r\n    },\r\n    \"emails.$\": {\r\n        type: Object,\r\n    },\r\n    \"emails.$.address\": {\r\n        type: String,\r\n        regEx: SimpleSchema.RegEx.Email,\r\n        /*regEx :[\r\n        {msg: \" failed regular expression validation\"},\r\n        {exp: SimpleSchema.RegEx.Email, msg: \" must be a valid e-mail address\"}],*/\r\n        label: \"Adresse\",\r\n    },\r\n    \"emails.$.verified\": {\r\n        type: Boolean,\r\n        optional: true,\r\n        autoform: {\r\n            omit: true\r\n        }\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        autoValue: function () {\r\n            if (this.isInsert) {\r\n                return new Date;\r\n            } else {\r\n                this.unset();\r\n            }\r\n        },\r\n        autoform: {\r\n            omit: true\r\n        }\r\n    },\r\n    profile: {\r\n        type: Globals.schemas.UserProfile,\r\n        optional: true,\r\n\r\n    },\r\n    services: {\r\n        type: Object,\r\n        optional: true,\r\n        blackbox: true,\r\n        autoform:{\r\n            omit: true\r\n        }\r\n    },\r\n    roles: {\r\n        type: Array,\r\n        //optional: true,\r\n        autoform: {\r\n            omit: true\r\n        }\r\n    }\r\n   ,\r\n    \"roles.$\": {\r\n        type: String\r\n    }\r\n});\r\n\r\n// On attache ce schéma à la collection\r\nMeteor.users.attachSchema(Globals.schemas.User);","Meteor.publish(\"allCommerces\", function(){\r\n    return Commerces.find({}, {});\r\n});\r\n\r\nMeteor.publish(\"allMenus\", function(){\r\n    return Menus.find({}, {});\r\n});","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]